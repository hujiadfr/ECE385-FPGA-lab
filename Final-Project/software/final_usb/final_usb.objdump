
final_usb.elf:     file format elf32-littlenios2
final_usb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00012c04 memsz 0x00012c04 flags r-x
    LOAD off    0x00013c24 vaddr 0x08012c24 paddr 0x080147fc align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x000163d4 vaddr 0x080163d4 paddr 0x080163d4 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011c48  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000db8  08011e6c  08011e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  08012c24  080147fc  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  080163d4  080163d4  000163d4  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  08016530  08016530  000157fc  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000157fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010e0  00000000  00000000  00015830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0002e066  00000000  00000000  00016910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b667  00000000  00000000  00044976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0001753d  00000000  00000000  0004ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00002738  00000000  00000000  0006751c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000401c  00000000  00000000  00069c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001e257  00000000  00000000  0006dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000040  00000000  00000000  0008bec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002438  00000000  00000000  0008bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00091920  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00091923  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009192f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00091930  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00091931  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00091935  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00091939  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009193d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00091948  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00091953  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0009195e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000033  00000000  00000000  00091967  2**0
                  CONTENTS, READONLY
 29 .jdi          0000535a  00000000  00000000  0009199a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
08011e6c l    d  .rodata	00000000 .rodata
08012c24 l    d  .rwdata	00000000 .rwdata
080163d4 l    d  .bss	00000000 .bss
08016530 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/jiaru/GitHub/ECE385-FPGA-lab/Final-Project/software/final_usb_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_main.c
080163d4 l     O .bss	00000002 ctl_reg.1
080163d6 l     O .bss	00000002 no_device.0
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08004694 l     F .text	000000c0 __sbprintf
08012624 l     O .rodata	00000010 blanks.1
08012614 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080048b8 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800652c l     F .text	00000008 __fp_lock
08006540 l     F .text	00000008 __fp_unlock
08006548 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08012c24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080126d8 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009a18 l     F .text	000000f4 __sprint_r.part.0
0800ae84 l     F .text	000000c0 __sbprintf
0801280c l     O .rodata	00000010 blanks.1
080127fc l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
0800b13c l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f5ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f6c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f728 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f840 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0800f92c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800fa94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800fb80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800fd60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080147ec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800fffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801013c l     F .text	00000034 alt_dev_reg
08013764 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801041c l     F .text	0000020c altera_avalon_jtag_uart_irq
08010628 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010f18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801137c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080114cc l     F .text	0000003c alt_get_errno
08011508 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08016404 g     O .bss	00000004 alt_instruction_exception_handler
080091d0 g     F .text	00000070 _mprec_log10
080092bc g     F .text	00000060 __any_on
0800b594 g     F .text	00000058 _isatty_r
080126e4 g     O .rodata	00000028 __mprec_tinytens
0800fc9c g     F .text	0000007c alt_main
08002400 g     F .text	000000cc _puts_r
08016430 g     O .bss	00000100 alt_irq
0800b6e0 g     F .text	00000064 _lseek_r
080147fc g       *ABS*	00000000 __flash_rwdata_start
0800e08c g     F .text	00000080 .hidden __eqdf2
08016530 g       *ABS*	00000000 __alt_heap_start
0800c048 g     F .text	00000060 _kill_r
080023c8 g     F .text	00000038 printf
0800ba14 g     F .text	0000006c _wcrtomb_r
0800bbb8 g     F .text	00000098 _signal_r
080099b4 g     F .text	0000005c __sseek
08006890 g     F .text	00000010 __sinit
0800b8b4 g     F .text	00000148 __swbuf_r
0800b5ec g     F .text	00000074 _setlocale_r
080066b0 g     F .text	00000078 __sfmoreglue
0800fd3c g     F .text	00000024 __malloc_unlock
080014c0 g     F .text	00000080 UsbGetRetryCnt
08007f10 g     F .text	0000012c memmove
08000260 g     F .text	000000b0 IO_init
0800687c g     F .text	00000014 _cleanup
0800812c g     F .text	000000a4 _Balloc
0800e10c g     F .text	000000e8 .hidden __gtdf2
080118f0 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
080072f8 g     F .text	00000008 __localeconv_l
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b534 g     F .text	00000060 _fstat_r
080163e4 g     O .bss	00000004 errno
0800992c g     F .text	00000008 __seofread
080163f0 g     O .bss	00000004 alt_argv
0801c7c4 g       *ABS*	00000000 _gp
0800ffcc g     F .text	00000030 usleep
0800f820 g     F .text	00000020 getpid
080135e4 g     O .rwdata	00000180 alt_fd_list
08011914 g     F .text	00000090 alt_find_dev
08007e10 g     F .text	00000100 memcpy
08006534 g     F .text	0000000c _cleanup_r
0800f410 g     F .text	000000b8 .hidden __floatsidf
08011450 g     F .text	0000007c alt_io_redirect
0800e1f4 g     F .text	000000e8 .hidden __ltdf2
08011e6c g       *ABS*	00000000 __DTOR_END__
080024cc g     F .text	00000010 puts
08011b64 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0800912c g     F .text	000000a4 __ratio
0800ae68 g     F .text	0000001c __vfiprintf_internal
08010824 g     F .text	00000220 altera_avalon_jtag_uart_read
08002398 g     F .text	00000030 _printf_r
0800cd84 g     F .text	00000064 .hidden __udivsi3
0800f87c g     F .text	000000b0 isatty
0800bc50 g     F .text	000000c4 _raise_r
0800b000 g     F .text	00000064 __assert_func
08012734 g     O .rodata	000000c8 __mprec_tens
080015c4 g     F .text	00000dd4 usb_init
080163e0 g     O .bss	00000004 __malloc_top_pad
08000b4c g     F .text	00000268 UsbGetConfigDesc2
0800c0a8 g     F .text	00000004 _getpid_r
08007300 g     F .text	0000000c _localeconv_r
0800859c g     F .text	000000b0 __i2b
08006cf0 g     F .text	000004c8 __sfvwrite_r
0800bd14 g     F .text	000000bc __sigtramp_r
08009880 g     F .text	00000058 _sbrk_r
0800b794 g     F .text	00000064 _read_r
080147e4 g     O .rwdata	00000004 alt_max_fd
0800b1fc g     F .text	00000070 _fclose_r
080064a8 g     F .text	00000084 fflush
080163dc g     O .bss	00000004 __malloc_max_sbrked_mem
0800ce6c g     F .text	000008f0 .hidden __adddf3
08008ec0 g     F .text	00000108 __b2d
0800c6cc g     F .text	000005c4 .hidden __umoddi3
0800fbbc g     F .text	000000e0 lseek
080147c4 g     O .rwdata	00000004 _global_impure_ptr
0800931c g     F .text	00000564 _realloc_r
08016530 g       *ABS*	00000000 __bss_end
08011294 g     F .text	000000e8 alt_iic_isr_register
080117e8 g     F .text	00000108 alt_tick
0800c0ac g     F .text	00000620 .hidden __udivdi3
0800b498 g     F .text	00000024 _fputwc_r
0801270c g     O .rodata	00000028 __mprec_bigtens
08008350 g     F .text	00000138 __s2b
0800bb44 g     F .text	00000018 abort
0800f4c8 g     F .text	00000090 .hidden __floatunsidf
08008be0 g     F .text	00000058 __mcmp
0800059c g     F .text	00000100 UsbSetAddress
080068b0 g     F .text	00000014 __fp_lock_all
08011248 g     F .text	0000004c alt_ic_irq_enabled
08011744 g     F .text	000000a4 alt_alarm_stop
080163f8 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000c8 alt_irq_handler
080135bc g     O .rwdata	00000028 alt_dev_null
08010ef8 g     F .text	00000020 alt_dcache_flush_all
08008488 g     F .text	00000064 __hi0bits
0800039c g     F .text	00000080 IO_read
0800f390 g     F .text	00000080 .hidden __fixdfsi
080147fc g       *ABS*	00000000 __ram_rwdata_end
080147dc g     O .rwdata	00000008 alt_dev_list
08010038 g     F .text	00000104 write
08012c24 g       *ABS*	00000000 __ram_rodata_end
0800f764 g     F .text	000000bc fstat
0800f968 g     F .text	0000012c kill
08000000 g       *ABS*	00000000 __alt_mem_SDRAM
0800e1f4 g     F .text	000000e8 .hidden __ledf2
08001540 g     F .text	00000084 UsbPrintMem
08008910 g     F .text	00000148 __pow5mult
08009b24 g     F .text	00001344 ___vfiprintf_internal_r
0800cde8 g     F .text	0000005c .hidden __umodsi3
08016530 g       *ABS*	00000000 end
0801035c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
08011e6c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800f558 g     F .text	00000054 .hidden __clzsi2
08010a44 g     F .text	00000228 altera_avalon_jtag_uart_write
080068a0 g     F .text	00000004 __sfp_lock_acquire
08007d40 g     F .text	000000d0 memchr
08002574 g     F .text	00002104 ___vfprintf_internal_r
08000eb4 g     F .text	00000100 UsbClassRequest
080069f4 g     F .text	000002fc _free_r
08012970 g     O .rodata	00000180 _ctype_b
0800b660 g     F .text	0000000c __locale_mb_cur_max
08011d4c g     F .text	00000120 __call_exitprocs
080147cc g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
080163fc g     O .bss	00000004 _alt_tick_rate
08008a58 g     F .text	00000188 __lshift
08016400 g     O .bss	00000004 _alt_nticks
0800be8c g     F .text	000000a0 signal
0800fd9c g     F .text	00000108 read
080101ac g     F .text	0000004c alt_sys_init
08011cbc g     F .text	00000090 __register_exitproc
0800864c g     F .text	000002c4 __multiply
080106c8 g     F .text	00000068 altera_avalon_jtag_uart_close
0800ce44 g     F .text	00000028 .hidden __mulsi3
08012c24 g       *ABS*	00000000 __ram_rwdata_start
08011e6c g       *ABS*	00000000 __ram_rodata_start
08016408 g     O .bss	00000028 __malloc_current_mallinfo
08008fc8 g     F .text	00000164 __d2b
0800069c g     F .text	00000148 UsbGetDeviceDesc1
080101f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08011aac g     F .text	000000b8 alt_get_fd
08010da0 g     F .text	00000158 alt_busy_sleep
0800afa8 g     F .text	00000058 _close_r
08011c44 g     F .text	00000078 memcmp
080102b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08016530 g       *ABS*	00000000 __alt_stack_base
08010308 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004754 g     F .text	00000164 __swsetup_r
0800d75c g     F .text	00000930 .hidden __divdf3
08006728 g     F .text	00000154 __sfp
08009240 g     F .text	0000007c __copybits
08013048 g     O .rwdata	00000408 __malloc_av_
080068ac g     F .text	00000004 __sinit_lock_release
0800e2dc g     F .text	000007ac .hidden __muldf3
080098d8 g     F .text	00000054 __sread
0800143c g     F .text	00000084 UsbWaitTDListDone
080119a4 g     F .text	00000108 alt_find_file
08010f54 g     F .text	000000a8 alt_dev_llist_insert
0800fd18 g     F .text	00000024 __malloc_lock
0800ff14 g     F .text	000000b8 sbrk
08006448 g     F .text	00000060 _fflush_r
0800b078 g     F .text	000000c4 _calloc_r
080163d4 g       *ABS*	00000000 __bss_start
0800803c g     F .text	000000f0 memset
0800041c g     F .text	0000002c main
080163f4 g     O .bss	00000004 alt_envp
080163d8 g     O .bss	00000004 __malloc_max_total_mem
08010258 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000db4 g     F .text	00000100 UsbSetConfig
0800b9fc g     F .text	00000018 __swbuf
08009a10 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800b26c g     F .text	00000070 fclose
08004ad8 g     F .text	00001748 _dtoa_r
08007560 g     F .text	000007e0 _malloc_r
0800bb14 g     F .text	00000030 __ascii_wctomb
080147e8 g     O .rwdata	00000004 alt_errno
0800b2dc g     F .text	00000020 _fiprintf_r
0800bf2c g     F .text	00000060 _init_signal
080071b8 g     F .text	00000098 _fwalk
0800b744 g     F .text	0000000c _mbtowc_r
0800cc90 g     F .text	00000080 .hidden __divsi3
080068d8 g     F .text	0000011c _malloc_trim_r
08000fb4 g     F .text	00000148 UsbGetHidDesc
08011e6c g       *ABS*	00000000 __CTOR_END__
0800b7f8 g     F .text	000000b8 strcmp
08011e6c g       *ABS*	00000000 __flash_rodata_start
08011e6c g       *ABS*	00000000 __DTOR_LIST__
0800e08c g     F .text	00000080 .hidden __nedf2
080004a4 g     F .text	00000044 UsbRead
08010170 g     F .text	0000003c alt_irq_init
0800fea4 g     F .text	00000070 alt_release_fd
08012af0 g     O .rodata	00000100 .hidden __clz_tab
080163e8 g     O .bss	00000004 _PathLocale
08011bfc g     F .text	00000014 atexit
0800af44 g     F .text	00000064 _write_r
0800b66c g     F .text	00000074 setlocale
080147c8 g     O .rwdata	00000004 _impure_ptr
080163ec g     O .bss	00000004 alt_argc
08006220 g     F .text	00000228 __sflush_r
08011060 g     F .text	00000064 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
0800b750 g     F .text	00000044 __ascii_mbtowc
08008e64 g     F .text	0000005c __ulp
080068c4 g     F .text	00000014 __fp_unlock_all
080147d4 g     O .rwdata	00000008 alt_fs_list
080010fc g     F .text	00000340 UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800730c g     F .text	0000000c localeconv
080074c8 g     F .text	00000098 __swhatbuf_r
080110e4 g     F .text	00000050 alt_ic_isr_register
080147fc g       *ABS*	00000000 _edata
08016530 g       *ABS*	00000000 _end
08000448 g     F .text	0000005c UsbWrite
0800b334 g     F .text	00000164 __fputwc
08000224 g       *ABS*	00000000 __ram_exceptions_end
08010730 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
080111bc g     F .text	0000008c alt_ic_irq_disable
08009934 g     F .text	00000080 __swrite
080147d0 g     O .rwdata	00000004 __malloc_trim_threshold
08011c10 g     F .text	00000034 exit
0800b2fc g     F .text	00000038 fiprintf
0800b8b0 g     F .text	00000004 _vfiprintf_r
08007250 g     F .text	000000a8 _fwalk_reent
08008c38 g     F .text	0000022c __mdiff
0800cd10 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080068a4 g     F .text	00000004 __sfp_lock_release
08000310 g     F .text	0000008c IO_write
0801286c g     O .rodata	00000101 _ctype_
0800f33c g     F .text	00000054 .hidden __unorddf2
0800f6f0 g     F .text	00000038 _exit
08010c6c g     F .text	00000134 alt_alarm_start
08007318 g     F .text	000001b0 __smakebuf_r
080024dc g     F .text	00000098 strlen
0800bb5c g     F .text	0000005c _init_signal_r
080115e4 g     F .text	00000160 open
0800e10c g     F .text	000000e8 .hidden __gedf2
0800b064 g     F .text	00000014 __assert
08009b0c g     F .text	00000018 __sprint_r
080110c4 g     F .text	00000020 alt_icache_flush_all
080147f0 g     O .rwdata	00000004 alt_priority_mask
08011134 g     F .text	00000088 alt_ic_irq_enable
08004678 g     F .text	0000001c __vfprintf_internal
0800bb08 g     F .text	0000000c _wctomb_r
0800ea88 g     F .text	000008b4 .hidden __subdf3
080084ec g     F .text	000000b0 __lo0bits
080009bc g     F .text	00000190 UsbGetConfigDesc1
080147f4 g     O .rwdata	00000008 alt_alarm_list
08010ffc g     F .text	00000064 _do_ctors
0800bf8c g     F .text	000000bc __sigtramp
080004e8 g     F .text	000000b4 UsbSoftReset
0800ba80 g     F .text	00000088 wcrtomb
0800f5e8 g     F .text	000000dc close
080007e4 g     F .text	000001d8 UsbGetDeviceDesc2
08013450 g     O .rwdata	0000016c __global_locale
0800fafc g     F .text	00000084 alt_load
0800b4bc g     F .text	00000078 fputwc
0800bdd0 g     F .text	000000bc raise
080068a8 g     F .text	00000004 __sinit_lock_acquire
080081f4 g     F .text	0000015c __multadd
080081d0 g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820074 	movhi	r2,2049
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10d90c17 	ldw	r3,25648(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820074 	movhi	r2,2049
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	10990d17 	ldw	r2,25652(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a71017 	ldw	r2,-25536(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a71017 	ldw	r2,-25536(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000230:	d6b1f114 	ori	gp,gp,51140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	1098f514 	ori	r2,r2,25556

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18d94c14 	ori	r3,r3,25904

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	800fafc0 	call	800fafc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	800fc9c0 	call	800fc9c <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 8000260:	deffff04 	addi	sp,sp,-4
 8000264:	df000015 	stw	fp,0(sp)
 8000268:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 800026c:	00840034 	movhi	r2,4096
 8000270:	10845c04 	addi	r2,r2,4464
 8000274:	00c00044 	movi	r3,1
 8000278:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 800027c:	00840034 	movhi	r2,4096
 8000280:	10846004 	addi	r2,r2,4480
 8000284:	00c00044 	movi	r3,1
 8000288:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 800028c:	00840034 	movhi	r2,4096
 8000290:	10846c04 	addi	r2,r2,4528
 8000294:	00c00044 	movi	r3,1
 8000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 800029c:	00840034 	movhi	r2,4096
 80002a0:	10847004 	addi	r2,r2,4544
 80002a4:	00c00044 	movi	r3,1
 80002a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 80002ac:	00840034 	movhi	r2,4096
 80002b0:	10846404 	addi	r2,r2,4496
 80002b4:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 80002b8:	00840034 	movhi	r2,4096
 80002bc:	10846804 	addi	r2,r2,4512
 80002c0:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 80002c4:	00840034 	movhi	r2,4096
 80002c8:	10846004 	addi	r2,r2,4480
 80002cc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 80002d0:	00840034 	movhi	r2,4096
 80002d4:	10845c04 	addi	r2,r2,4464
 80002d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 80002dc:	00840034 	movhi	r2,4096
 80002e0:	10845c04 	addi	r2,r2,4464
 80002e4:	00c00044 	movi	r3,1
 80002e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 80002ec:	00840034 	movhi	r2,4096
 80002f0:	10846004 	addi	r2,r2,4480
 80002f4:	00c00044 	movi	r3,1
 80002f8:	10c00005 	stb	r3,0(r2)
}
 80002fc:	0001883a 	nop
 8000300:	e037883a 	mov	sp,fp
 8000304:	df000017 	ldw	fp,0(sp)
 8000308:	dec00104 	addi	sp,sp,4
 800030c:	f800283a 	ret

08000310 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 8000310:	defffd04 	addi	sp,sp,-12
 8000314:	df000215 	stw	fp,8(sp)
 8000318:	df000204 	addi	fp,sp,8
 800031c:	2005883a 	mov	r2,r4
 8000320:	2807883a 	mov	r3,r5
 8000324:	e0bfff05 	stb	r2,-4(fp)
 8000328:	1805883a 	mov	r2,r3
 800032c:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
 8000330:	00840034 	movhi	r2,4096
 8000334:	10846404 	addi	r2,r2,4496
 8000338:	e0ffff03 	ldbu	r3,-4(fp)
 800033c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
 8000340:	00840034 	movhi	r2,4096
 8000344:	10846804 	addi	r2,r2,4512
 8000348:	e0fffe0b 	ldhu	r3,-8(fp)
 800034c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
 8000350:	00840034 	movhi	r2,4096
 8000354:	10846004 	addi	r2,r2,4480
 8000358:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
 800035c:	00840034 	movhi	r2,4096
 8000360:	10847004 	addi	r2,r2,4544
 8000364:	10000005 	stb	zero,0(r2)

	//reset the OTG
	*otg_hpi_w = 1;
 8000368:	00840034 	movhi	r2,4096
 800036c:	10847004 	addi	r2,r2,4544
 8000370:	00c00044 	movi	r3,1
 8000374:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000378:	00840034 	movhi	r2,4096
 800037c:	10846004 	addi	r2,r2,4480
 8000380:	00c00044 	movi	r3,1
 8000384:	10c00005 	stb	r3,0(r2)
}
 8000388:	0001883a 	nop
 800038c:	e037883a 	mov	sp,fp
 8000390:	df000017 	ldw	fp,0(sp)
 8000394:	dec00104 	addi	sp,sp,4
 8000398:	f800283a 	ret

0800039c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 800039c:	defffd04 	addi	sp,sp,-12
 80003a0:	df000215 	stw	fp,8(sp)
 80003a4:	df000204 	addi	fp,sp,8
 80003a8:	2005883a 	mov	r2,r4
 80003ac:	e0bffe05 	stb	r2,-8(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
 80003b0:	00840034 	movhi	r2,4096
 80003b4:	10846404 	addi	r2,r2,4496
 80003b8:	e0fffe03 	ldbu	r3,-8(fp)
 80003bc:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
 80003c0:	00840034 	movhi	r2,4096
 80003c4:	10846004 	addi	r2,r2,4480
 80003c8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
 80003cc:	00840034 	movhi	r2,4096
 80003d0:	10846c04 	addi	r2,r2,4528
 80003d4:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
 80003d8:	00840034 	movhi	r2,4096
 80003dc:	10846804 	addi	r2,r2,4512
 80003e0:	10800017 	ldw	r2,0(r2)
 80003e4:	e0bfff8d 	sth	r2,-2(fp)

	//reset the OTG
	*otg_hpi_r = 1;
 80003e8:	00840034 	movhi	r2,4096
 80003ec:	10846c04 	addi	r2,r2,4528
 80003f0:	00c00044 	movi	r3,1
 80003f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 80003f8:	00840034 	movhi	r2,4096
 80003fc:	10846004 	addi	r2,r2,4480
 8000400:	00c00044 	movi	r3,1
 8000404:	10c00005 	stb	r3,0(r2)
	return temp;
 8000408:	e0bfff8b 	ldhu	r2,-2(fp)
}
 800040c:	e037883a 	mov	sp,fp
 8000410:	df000017 	ldw	fp,0(sp)
 8000414:	dec00104 	addi	sp,sp,4
 8000418:	f800283a 	ret

0800041c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 800041c:	defffe04 	addi	sp,sp,-8
 8000420:	dfc00115 	stw	ra,4(sp)
 8000424:	df000015 	stw	fp,0(sp)
 8000428:	d839883a 	mov	fp,sp
	usb_init();
 800042c:	80015c40 	call	80015c4 <usb_init>
	return 0;
 8000430:	0005883a 	mov	r2,zero
}
 8000434:	e037883a 	mov	sp,fp
 8000438:	dfc00117 	ldw	ra,4(sp)
 800043c:	df000017 	ldw	fp,0(sp)
 8000440:	dec00204 	addi	sp,sp,8
 8000444:	f800283a 	ret

08000448 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8000448:	defffc04 	addi	sp,sp,-16
 800044c:	dfc00315 	stw	ra,12(sp)
 8000450:	df000215 	stw	fp,8(sp)
 8000454:	df000204 	addi	fp,sp,8
 8000458:	2005883a 	mov	r2,r4
 800045c:	2807883a 	mov	r3,r5
 8000460:	e0bfff0d 	sth	r2,-4(fp)
 8000464:	1805883a 	mov	r2,r3
 8000468:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 800046c:	e0bfff0b 	ldhu	r2,-4(fp)
 8000470:	100b883a 	mov	r5,r2
 8000474:	01000084 	movi	r4,2
 8000478:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,Data);
 800047c:	e0bffe0b 	ldhu	r2,-8(fp)
 8000480:	100b883a 	mov	r5,r2
 8000484:	0009883a 	mov	r4,zero
 8000488:	80003100 	call	8000310 <IO_write>
}
 800048c:	0001883a 	nop
 8000490:	e037883a 	mov	sp,fp
 8000494:	dfc00117 	ldw	ra,4(sp)
 8000498:	df000017 	ldw	fp,0(sp)
 800049c:	dec00204 	addi	sp,sp,8
 80004a0:	f800283a 	ret

080004a4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 80004a4:	defffd04 	addi	sp,sp,-12
 80004a8:	dfc00215 	stw	ra,8(sp)
 80004ac:	df000115 	stw	fp,4(sp)
 80004b0:	df000104 	addi	fp,sp,4
 80004b4:	2005883a 	mov	r2,r4
 80004b8:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 80004bc:	e0bfff0b 	ldhu	r2,-4(fp)
 80004c0:	100b883a 	mov	r5,r2
 80004c4:	01000084 	movi	r4,2
 80004c8:	80003100 	call	8000310 <IO_write>
	return (IO_read(HPI_DATA));
 80004cc:	0009883a 	mov	r4,zero
 80004d0:	800039c0 	call	800039c <IO_read>
}
 80004d4:	e037883a 	mov	sp,fp
 80004d8:	dfc00117 	ldw	ra,4(sp)
 80004dc:	df000017 	ldw	fp,0(sp)
 80004e0:	dec00204 	addi	sp,sp,8
 80004e4:	f800283a 	ret

080004e8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 80004e8:	defffe04 	addi	sp,sp,-8
 80004ec:	dfc00115 	stw	ra,4(sp)
 80004f0:	df000015 	stw	fp,0(sp)
 80004f4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 80004f8:	017e9414 	movui	r5,64080
 80004fc:	01000044 	movi	r4,1
 8000500:	80003100 	call	8000310 <IO_write>
	usleep(100000);
 8000504:	010000b4 	movhi	r4,2
 8000508:	2121a804 	addi	r4,r4,-31072
 800050c:	800ffcc0 	call	800ffcc <usleep>
	printf("[USB INIT]:reset finished!\n");
 8000510:	01020074 	movhi	r4,2049
 8000514:	21079b04 	addi	r4,r4,7788
 8000518:	80024cc0 	call	80024cc <puts>

	usleep(500000);
 800051c:	01000234 	movhi	r4,8
 8000520:	21284804 	addi	r4,r4,-24288
 8000524:	800ffcc0 	call	800ffcc <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 8000528:	01020074 	movhi	r4,2049
 800052c:	2107a204 	addi	r4,r4,7816
 8000530:	80024cc0 	call	80024cc <puts>
	IO_read(HPI_MAILBOX);
 8000534:	01000044 	movi	r4,1
 8000538:	800039c0 	call	800039c <IO_read>
	IO_read(HPI_STATUS);
 800053c:	010000c4 	movi	r4,3
 8000540:	800039c0 	call	800039c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8000544:	01005104 	movi	r4,324
 8000548:	80004a40 	call	80004a4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 800054c:	000b883a 	mov	r5,zero
 8000550:	01005104 	movi	r4,324
 8000554:	80004480 	call	8000448 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 8000558:	01005204 	movi	r4,328
 800055c:	80004a40 	call	80004a4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 8000560:	000b883a 	mov	r5,zero
 8000564:	01005204 	movi	r4,328
 8000568:	80004480 	call	8000448 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 800056c:	017fffd4 	movui	r5,65535
 8000570:	01302414 	movui	r4,49296
 8000574:	80004480 	call	8000448 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 8000578:	017fffd4 	movui	r5,65535
 800057c:	01302c14 	movui	r4,49328
 8000580:	80004480 	call	8000448 <UsbWrite>
}
 8000584:	0001883a 	nop
 8000588:	e037883a 	mov	sp,fp
 800058c:	dfc00117 	ldw	ra,4(sp)
 8000590:	df000017 	ldw	fp,0(sp)
 8000594:	dec00204 	addi	sp,sp,8
 8000598:	f800283a 	ret

0800059c <UsbSetAddress>:


void UsbSetAddress()
{
 800059c:	defffe04 	addi	sp,sp,-8
 80005a0:	dfc00115 	stw	ra,4(sp)
 80005a4:	df000015 	stw	fp,0(sp)
 80005a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80005ac:	01414004 	movi	r5,1280
 80005b0:	01000084 	movi	r4,2
 80005b4:	80003100 	call	8000310 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 80005b8:	01414304 	movi	r5,1292
 80005bc:	0009883a 	mov	r4,zero
 80005c0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80005c4:	01400204 	movi	r5,8
 80005c8:	0009883a 	mov	r4,zero
 80005cc:	80003100 	call	8000310 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 80005d0:	01403404 	movi	r5,208
 80005d4:	0009883a 	mov	r4,zero
 80005d8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80005dc:	01400044 	movi	r5,1
 80005e0:	0009883a 	mov	r4,zero
 80005e4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80005e8:	014004c4 	movi	r5,19
 80005ec:	0009883a 	mov	r4,zero
 80005f0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80005f4:	01414504 	movi	r5,1300
 80005f8:	0009883a 	mov	r4,zero
 80005fc:	80003100 	call	8000310 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 8000600:	01414004 	movi	r5,1280
 8000604:	0009883a 	mov	r4,zero
 8000608:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0002);
 800060c:	01400084 	movi	r5,2
 8000610:	0009883a 	mov	r4,zero
 8000614:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000618:	000b883a 	mov	r5,zero
 800061c:	0009883a 	mov	r4,zero
 8000620:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000624:	000b883a 	mov	r5,zero
 8000628:	0009883a 	mov	r4,zero
 800062c:	80003100 	call	8000310 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8000630:	000b883a 	mov	r5,zero
 8000634:	0009883a 	mov	r4,zero
 8000638:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 800063c:	000b883a 	mov	r5,zero
 8000640:	0009883a 	mov	r4,zero
 8000644:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 8000648:	01402404 	movi	r5,144
 800064c:	0009883a 	mov	r4,zero
 8000650:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8000654:	01401044 	movi	r5,65
 8000658:	0009883a 	mov	r4,zero
 800065c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000660:	014004c4 	movi	r5,19
 8000664:	0009883a 	mov	r4,zero
 8000668:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 800066c:	000b883a 	mov	r5,zero
 8000670:	0009883a 	mov	r4,zero
 8000674:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000678:	01414004 	movi	r5,1280
 800067c:	01006c04 	movi	r4,432
 8000680:	80004480 	call	8000448 <UsbWrite>
}
 8000684:	0001883a 	nop
 8000688:	e037883a 	mov	sp,fp
 800068c:	dfc00117 	ldw	ra,4(sp)
 8000690:	df000017 	ldw	fp,0(sp)
 8000694:	dec00204 	addi	sp,sp,8
 8000698:	f800283a 	ret

0800069c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 800069c:	defffe04 	addi	sp,sp,-8
 80006a0:	dfc00115 	stw	ra,4(sp)
 80006a4:	df000015 	stw	fp,0(sp)
 80006a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80006ac:	01414004 	movi	r5,1280
 80006b0:	01000084 	movi	r4,2
 80006b4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80006b8:	01414304 	movi	r5,1292
 80006bc:	0009883a 	mov	r4,zero
 80006c0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80006c4:	01400204 	movi	r5,8
 80006c8:	0009883a 	mov	r4,zero
 80006cc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80006d0:	0140b404 	movi	r5,720
 80006d4:	0009883a 	mov	r4,zero
 80006d8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80006dc:	01400044 	movi	r5,1
 80006e0:	0009883a 	mov	r4,zero
 80006e4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80006e8:	014004c4 	movi	r5,19
 80006ec:	0009883a 	mov	r4,zero
 80006f0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80006f4:	01414504 	movi	r5,1300
 80006f8:	0009883a 	mov	r4,zero
 80006fc:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8000700:	0141a004 	movi	r5,1664
 8000704:	0009883a 	mov	r4,zero
 8000708:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 800070c:	01404004 	movi	r5,256
 8000710:	0009883a 	mov	r4,zero
 8000714:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000718:	000b883a 	mov	r5,zero
 800071c:	0009883a 	mov	r4,zero
 8000720:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000724:	01400204 	movi	r5,8
 8000728:	0009883a 	mov	r4,zero
 800072c:	80003100 	call	8000310 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 8000730:	01414b04 	movi	r5,1324
 8000734:	0009883a 	mov	r4,zero
 8000738:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 800073c:	01400204 	movi	r5,8
 8000740:	0009883a 	mov	r4,zero
 8000744:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 8000748:	0140a404 	movi	r5,656
 800074c:	0009883a 	mov	r4,zero
 8000750:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8000754:	01401044 	movi	r5,65
 8000758:	0009883a 	mov	r4,zero
 800075c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000760:	014004c4 	movi	r5,19
 8000764:	0009883a 	mov	r4,zero
 8000768:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0520);
 800076c:	01414804 	movi	r5,1312
 8000770:	0009883a 	mov	r4,zero
 8000774:	80003100 	call	8000310 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 8000778:	000b883a 	mov	r5,zero
 800077c:	0009883a 	mov	r4,zero
 8000780:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8000784:	000b883a 	mov	r5,zero
 8000788:	0009883a 	mov	r4,zero
 800078c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 8000790:	01408404 	movi	r5,528
 8000794:	0009883a 	mov	r4,zero
 8000798:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);
 800079c:	01401044 	movi	r5,65
 80007a0:	0009883a 	mov	r4,zero
 80007a4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80007a8:	014004c4 	movi	r5,19
 80007ac:	0009883a 	mov	r4,zero
 80007b0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80007b4:	000b883a 	mov	r5,zero
 80007b8:	0009883a 	mov	r4,zero
 80007bc:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80007c0:	01414004 	movi	r5,1280
 80007c4:	01006c04 	movi	r4,432
 80007c8:	80004480 	call	8000448 <UsbWrite>
}
 80007cc:	0001883a 	nop
 80007d0:	e037883a 	mov	sp,fp
 80007d4:	dfc00117 	ldw	ra,4(sp)
 80007d8:	df000017 	ldw	fp,0(sp)
 80007dc:	dec00204 	addi	sp,sp,8
 80007e0:	f800283a 	ret

080007e4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 80007e4:	defffe04 	addi	sp,sp,-8
 80007e8:	dfc00115 	stw	ra,4(sp)
 80007ec:	df000015 	stw	fp,0(sp)
 80007f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80007f4:	01414004 	movi	r5,1280
 80007f8:	01000084 	movi	r4,2
 80007fc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8000800:	01414304 	movi	r5,1292
 8000804:	0009883a 	mov	r4,zero
 8000808:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 800080c:	01400204 	movi	r5,8
 8000810:	0009883a 	mov	r4,zero
 8000814:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8000818:	0140b404 	movi	r5,720
 800081c:	0009883a 	mov	r4,zero
 8000820:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8000824:	01400044 	movi	r5,1
 8000828:	0009883a 	mov	r4,zero
 800082c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000830:	014004c4 	movi	r5,19
 8000834:	0009883a 	mov	r4,zero
 8000838:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 800083c:	01414504 	movi	r5,1300
 8000840:	0009883a 	mov	r4,zero
 8000844:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8000848:	0141a004 	movi	r5,1664
 800084c:	0009883a 	mov	r4,zero
 8000850:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 8000854:	01404004 	movi	r5,256
 8000858:	0009883a 	mov	r4,zero
 800085c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8000860:	000b883a 	mov	r5,zero
 8000864:	0009883a 	mov	r4,zero
 8000868:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 800086c:	01400484 	movi	r5,18
 8000870:	0009883a 	mov	r4,zero
 8000874:	80003100 	call	8000310 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8000878:	01415104 	movi	r5,1348
 800087c:	0009883a 	mov	r4,zero
 8000880:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8000884:	01400204 	movi	r5,8
 8000888:	0009883a 	mov	r4,zero
 800088c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8000890:	0140a404 	movi	r5,656
 8000894:	0009883a 	mov	r4,zero
 8000898:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 800089c:	01401044 	movi	r5,65
 80008a0:	0009883a 	mov	r4,zero
 80008a4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80008a8:	014004c4 	movi	r5,19
 80008ac:	0009883a 	mov	r4,zero
 80008b0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80008b4:	01414804 	movi	r5,1312
 80008b8:	0009883a 	mov	r4,zero
 80008bc:	80003100 	call	8000310 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80008c0:	01415304 	movi	r5,1356
 80008c4:	0009883a 	mov	r4,zero
 80008c8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 80008cc:	01400204 	movi	r5,8
 80008d0:	0009883a 	mov	r4,zero
 80008d4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80008d8:	0140a404 	movi	r5,656
 80008dc:	0009883a 	mov	r4,zero
 80008e0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 80008e4:	01400044 	movi	r5,1
 80008e8:	0009883a 	mov	r4,zero
 80008ec:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80008f0:	014004c4 	movi	r5,19
 80008f4:	0009883a 	mov	r4,zero
 80008f8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80008fc:	01414b04 	movi	r5,1324
 8000900:	0009883a 	mov	r4,zero
 8000904:	80003100 	call	8000310 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 8000908:	01415504 	movi	r5,1364
 800090c:	0009883a 	mov	r4,zero
 8000910:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 8000914:	01400084 	movi	r5,2
 8000918:	0009883a 	mov	r4,zero
 800091c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8000920:	0140a404 	movi	r5,656
 8000924:	0009883a 	mov	r4,zero
 8000928:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 800092c:	01401044 	movi	r5,65
 8000930:	0009883a 	mov	r4,zero
 8000934:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8000938:	014004c4 	movi	r5,19
 800093c:	0009883a 	mov	r4,zero
 8000940:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8000944:	01414e04 	movi	r5,1336
 8000948:	0009883a 	mov	r4,zero
 800094c:	80003100 	call	8000310 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 8000950:	000b883a 	mov	r5,zero
 8000954:	0009883a 	mov	r4,zero
 8000958:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 800095c:	000b883a 	mov	r5,zero
 8000960:	0009883a 	mov	r4,zero
 8000964:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 8000968:	01408404 	movi	r5,528
 800096c:	0009883a 	mov	r4,zero
 8000970:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 8000974:	01401044 	movi	r5,65
 8000978:	0009883a 	mov	r4,zero
 800097c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8000980:	014004c4 	movi	r5,19
 8000984:	0009883a 	mov	r4,zero
 8000988:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 800098c:	000b883a 	mov	r5,zero
 8000990:	0009883a 	mov	r4,zero
 8000994:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000998:	01414004 	movi	r5,1280
 800099c:	01006c04 	movi	r4,432
 80009a0:	80004480 	call	8000448 <UsbWrite>
}
 80009a4:	0001883a 	nop
 80009a8:	e037883a 	mov	sp,fp
 80009ac:	dfc00117 	ldw	ra,4(sp)
 80009b0:	df000017 	ldw	fp,0(sp)
 80009b4:	dec00204 	addi	sp,sp,8
 80009b8:	f800283a 	ret

080009bc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 80009bc:	defffe04 	addi	sp,sp,-8
 80009c0:	dfc00115 	stw	ra,4(sp)
 80009c4:	df000015 	stw	fp,0(sp)
 80009c8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80009cc:	01414004 	movi	r5,1280
 80009d0:	01000084 	movi	r4,2
 80009d4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80009d8:	01414304 	movi	r5,1292
 80009dc:	0009883a 	mov	r4,zero
 80009e0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80009e4:	01400204 	movi	r5,8
 80009e8:	0009883a 	mov	r4,zero
 80009ec:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80009f0:	0140b404 	movi	r5,720
 80009f4:	0009883a 	mov	r4,zero
 80009f8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80009fc:	01400044 	movi	r5,1
 8000a00:	0009883a 	mov	r4,zero
 8000a04:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000a08:	014004c4 	movi	r5,19
 8000a0c:	0009883a 	mov	r4,zero
 8000a10:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8000a14:	01414504 	movi	r5,1300
 8000a18:	0009883a 	mov	r4,zero
 8000a1c:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8000a20:	0141a004 	movi	r5,1664
 8000a24:	0009883a 	mov	r4,zero
 8000a28:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 8000a2c:	01408004 	movi	r5,512
 8000a30:	0009883a 	mov	r4,zero
 8000a34:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8000a38:	000b883a 	mov	r5,zero
 8000a3c:	0009883a 	mov	r4,zero
 8000a40:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 8000a44:	01400244 	movi	r5,9
 8000a48:	0009883a 	mov	r4,zero
 8000a4c:	80003100 	call	8000310 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8000a50:	01415104 	movi	r5,1348
 8000a54:	0009883a 	mov	r4,zero
 8000a58:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8000a5c:	01400204 	movi	r5,8
 8000a60:	0009883a 	mov	r4,zero
 8000a64:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8000a68:	0140a404 	movi	r5,656
 8000a6c:	0009883a 	mov	r4,zero
 8000a70:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8000a74:	01401044 	movi	r5,65
 8000a78:	0009883a 	mov	r4,zero
 8000a7c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8000a80:	014004c4 	movi	r5,19
 8000a84:	0009883a 	mov	r4,zero
 8000a88:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8000a8c:	01414804 	movi	r5,1312
 8000a90:	0009883a 	mov	r4,zero
 8000a94:	80003100 	call	8000310 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 8000a98:	01415304 	movi	r5,1356
 8000a9c:	0009883a 	mov	r4,zero
 8000aa0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 8000aa4:	01400044 	movi	r5,1
 8000aa8:	0009883a 	mov	r4,zero
 8000aac:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8000ab0:	0140a404 	movi	r5,656
 8000ab4:	0009883a 	mov	r4,zero
 8000ab8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8000abc:	01400044 	movi	r5,1
 8000ac0:	0009883a 	mov	r4,zero
 8000ac4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8000ac8:	014004c4 	movi	r5,19
 8000acc:	0009883a 	mov	r4,zero
 8000ad0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8000ad4:	01414b04 	movi	r5,1324
 8000ad8:	0009883a 	mov	r4,zero
 8000adc:	80003100 	call	8000310 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8000ae0:	000b883a 	mov	r5,zero
 8000ae4:	0009883a 	mov	r4,zero
 8000ae8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8000aec:	000b883a 	mov	r5,zero
 8000af0:	0009883a 	mov	r4,zero
 8000af4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8000af8:	01408404 	movi	r5,528
 8000afc:	0009883a 	mov	r4,zero
 8000b00:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8000b04:	01401044 	movi	r5,65
 8000b08:	0009883a 	mov	r4,zero
 8000b0c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8000b10:	014004c4 	movi	r5,19
 8000b14:	0009883a 	mov	r4,zero
 8000b18:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8000b1c:	000b883a 	mov	r5,zero
 8000b20:	0009883a 	mov	r4,zero
 8000b24:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000b28:	01414004 	movi	r5,1280
 8000b2c:	01006c04 	movi	r4,432
 8000b30:	80004480 	call	8000448 <UsbWrite>
}
 8000b34:	0001883a 	nop
 8000b38:	e037883a 	mov	sp,fp
 8000b3c:	dfc00117 	ldw	ra,4(sp)
 8000b40:	df000017 	ldw	fp,0(sp)
 8000b44:	dec00204 	addi	sp,sp,8
 8000b48:	f800283a 	ret

08000b4c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 8000b4c:	defffe04 	addi	sp,sp,-8
 8000b50:	dfc00115 	stw	ra,4(sp)
 8000b54:	df000015 	stw	fp,0(sp)
 8000b58:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8000b5c:	01414004 	movi	r5,1280
 8000b60:	01000084 	movi	r4,2
 8000b64:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8000b68:	01414304 	movi	r5,1292
 8000b6c:	0009883a 	mov	r4,zero
 8000b70:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8000b74:	01400204 	movi	r5,8
 8000b78:	0009883a 	mov	r4,zero
 8000b7c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8000b80:	0140b404 	movi	r5,720
 8000b84:	0009883a 	mov	r4,zero
 8000b88:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8000b8c:	01400044 	movi	r5,1
 8000b90:	0009883a 	mov	r4,zero
 8000b94:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000b98:	014004c4 	movi	r5,19
 8000b9c:	0009883a 	mov	r4,zero
 8000ba0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8000ba4:	01414504 	movi	r5,1300
 8000ba8:	0009883a 	mov	r4,zero
 8000bac:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8000bb0:	0141a004 	movi	r5,1664
 8000bb4:	0009883a 	mov	r4,zero
 8000bb8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 8000bbc:	01408004 	movi	r5,512
 8000bc0:	0009883a 	mov	r4,zero
 8000bc4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8000bc8:	000b883a 	mov	r5,zero
 8000bcc:	0009883a 	mov	r4,zero
 8000bd0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 8000bd4:	01403fc4 	movi	r5,255
 8000bd8:	0009883a 	mov	r4,zero
 8000bdc:	80003100 	call	8000310 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 8000be0:	01415704 	movi	r5,1372
 8000be4:	0009883a 	mov	r4,zero
 8000be8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8000bec:	01400204 	movi	r5,8
 8000bf0:	0009883a 	mov	r4,zero
 8000bf4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8000bf8:	0140a404 	movi	r5,656
 8000bfc:	0009883a 	mov	r4,zero
 8000c00:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8000c04:	01401044 	movi	r5,65
 8000c08:	0009883a 	mov	r4,zero
 8000c0c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8000c10:	014004c4 	movi	r5,19
 8000c14:	0009883a 	mov	r4,zero
 8000c18:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8000c1c:	01414804 	movi	r5,1312
 8000c20:	0009883a 	mov	r4,zero
 8000c24:	80003100 	call	8000310 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 8000c28:	01415904 	movi	r5,1380
 8000c2c:	0009883a 	mov	r4,zero
 8000c30:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8000c34:	01400204 	movi	r5,8
 8000c38:	0009883a 	mov	r4,zero
 8000c3c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8000c40:	0140a404 	movi	r5,656
 8000c44:	0009883a 	mov	r4,zero
 8000c48:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8000c4c:	01400044 	movi	r5,1
 8000c50:	0009883a 	mov	r4,zero
 8000c54:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8000c58:	014004c4 	movi	r5,19
 8000c5c:	0009883a 	mov	r4,zero
 8000c60:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8000c64:	01414b04 	movi	r5,1324
 8000c68:	0009883a 	mov	r4,zero
 8000c6c:	80003100 	call	8000310 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 8000c70:	01415b04 	movi	r5,1388
 8000c74:	0009883a 	mov	r4,zero
 8000c78:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8000c7c:	01400204 	movi	r5,8
 8000c80:	0009883a 	mov	r4,zero
 8000c84:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8000c88:	0140a404 	movi	r5,656
 8000c8c:	0009883a 	mov	r4,zero
 8000c90:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8000c94:	01401044 	movi	r5,65
 8000c98:	0009883a 	mov	r4,zero
 8000c9c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8000ca0:	014004c4 	movi	r5,19
 8000ca4:	0009883a 	mov	r4,zero
 8000ca8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8000cac:	01414e04 	movi	r5,1336
 8000cb0:	0009883a 	mov	r4,zero
 8000cb4:	80003100 	call	8000310 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 8000cb8:	01415d04 	movi	r5,1396
 8000cbc:	0009883a 	mov	r4,zero
 8000cc0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8000cc4:	01400204 	movi	r5,8
 8000cc8:	0009883a 	mov	r4,zero
 8000ccc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8000cd0:	0140a404 	movi	r5,656
 8000cd4:	0009883a 	mov	r4,zero
 8000cd8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8000cdc:	01400044 	movi	r5,1
 8000ce0:	0009883a 	mov	r4,zero
 8000ce4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8000ce8:	014004c4 	movi	r5,19
 8000cec:	0009883a 	mov	r4,zero
 8000cf0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8000cf4:	01415104 	movi	r5,1348
 8000cf8:	0009883a 	mov	r4,zero
 8000cfc:	80003100 	call	8000310 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 8000d00:	01415f04 	movi	r5,1404
 8000d04:	0009883a 	mov	r4,zero
 8000d08:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 8000d0c:	01400084 	movi	r5,2
 8000d10:	0009883a 	mov	r4,zero
 8000d14:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8000d18:	0140a404 	movi	r5,656
 8000d1c:	0009883a 	mov	r4,zero
 8000d20:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8000d24:	01401044 	movi	r5,65
 8000d28:	0009883a 	mov	r4,zero
 8000d2c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8000d30:	014004c4 	movi	r5,19
 8000d34:	0009883a 	mov	r4,zero
 8000d38:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8000d3c:	01415404 	movi	r5,1360
 8000d40:	0009883a 	mov	r4,zero
 8000d44:	80003100 	call	8000310 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 8000d48:	000b883a 	mov	r5,zero
 8000d4c:	0009883a 	mov	r4,zero
 8000d50:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8000d54:	000b883a 	mov	r5,zero
 8000d58:	0009883a 	mov	r4,zero
 8000d5c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 8000d60:	01408404 	movi	r5,528
 8000d64:	0009883a 	mov	r4,zero
 8000d68:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 8000d6c:	01401044 	movi	r5,65
 8000d70:	0009883a 	mov	r4,zero
 8000d74:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8000d78:	014004c4 	movi	r5,19
 8000d7c:	0009883a 	mov	r4,zero
 8000d80:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8000d84:	000b883a 	mov	r5,zero
 8000d88:	0009883a 	mov	r4,zero
 8000d8c:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000d90:	01414004 	movi	r5,1280
 8000d94:	01006c04 	movi	r4,432
 8000d98:	80004480 	call	8000448 <UsbWrite>
}
 8000d9c:	0001883a 	nop
 8000da0:	e037883a 	mov	sp,fp
 8000da4:	dfc00117 	ldw	ra,4(sp)
 8000da8:	df000017 	ldw	fp,0(sp)
 8000dac:	dec00204 	addi	sp,sp,8
 8000db0:	f800283a 	ret

08000db4 <UsbSetConfig>:

void UsbSetConfig()
{
 8000db4:	defffe04 	addi	sp,sp,-8
 8000db8:	dfc00115 	stw	ra,4(sp)
 8000dbc:	df000015 	stw	fp,0(sp)
 8000dc0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8000dc4:	01414004 	movi	r5,1280
 8000dc8:	01000084 	movi	r4,2
 8000dcc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8000dd0:	01414304 	movi	r5,1292
 8000dd4:	0009883a 	mov	r4,zero
 8000dd8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8000ddc:	01400204 	movi	r5,8
 8000de0:	0009883a 	mov	r4,zero
 8000de4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8000de8:	0140b404 	movi	r5,720
 8000dec:	0009883a 	mov	r4,zero
 8000df0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8000df4:	01400044 	movi	r5,1
 8000df8:	0009883a 	mov	r4,zero
 8000dfc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000e00:	014004c4 	movi	r5,19
 8000e04:	0009883a 	mov	r4,zero
 8000e08:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8000e0c:	01414504 	movi	r5,1300
 8000e10:	0009883a 	mov	r4,zero
 8000e14:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8000e18:	01424004 	movi	r5,2304
 8000e1c:	0009883a 	mov	r4,zero
 8000e20:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8000e24:	01400044 	movi	r5,1
 8000e28:	0009883a 	mov	r4,zero
 8000e2c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000e30:	000b883a 	mov	r5,zero
 8000e34:	0009883a 	mov	r4,zero
 8000e38:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000e3c:	000b883a 	mov	r5,zero
 8000e40:	0009883a 	mov	r4,zero
 8000e44:	80003100 	call	8000310 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8000e48:	000b883a 	mov	r5,zero
 8000e4c:	0009883a 	mov	r4,zero
 8000e50:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8000e54:	000b883a 	mov	r5,zero
 8000e58:	0009883a 	mov	r4,zero
 8000e5c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8000e60:	0140a404 	movi	r5,656
 8000e64:	0009883a 	mov	r4,zero
 8000e68:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8000e6c:	01401044 	movi	r5,65
 8000e70:	0009883a 	mov	r4,zero
 8000e74:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000e78:	014004c4 	movi	r5,19
 8000e7c:	0009883a 	mov	r4,zero
 8000e80:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000e84:	000b883a 	mov	r5,zero
 8000e88:	0009883a 	mov	r4,zero
 8000e8c:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000e90:	01414004 	movi	r5,1280
 8000e94:	01006c04 	movi	r4,432
 8000e98:	80004480 	call	8000448 <UsbWrite>

}
 8000e9c:	0001883a 	nop
 8000ea0:	e037883a 	mov	sp,fp
 8000ea4:	dfc00117 	ldw	ra,4(sp)
 8000ea8:	df000017 	ldw	fp,0(sp)
 8000eac:	dec00204 	addi	sp,sp,8
 8000eb0:	f800283a 	ret

08000eb4 <UsbClassRequest>:

void UsbClassRequest()
{
 8000eb4:	defffe04 	addi	sp,sp,-8
 8000eb8:	dfc00115 	stw	ra,4(sp)
 8000ebc:	df000015 	stw	fp,0(sp)
 8000ec0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8000ec4:	01414004 	movi	r5,1280
 8000ec8:	01000084 	movi	r4,2
 8000ecc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8000ed0:	01414304 	movi	r5,1292
 8000ed4:	0009883a 	mov	r4,zero
 8000ed8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8000edc:	01400204 	movi	r5,8
 8000ee0:	0009883a 	mov	r4,zero
 8000ee4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8000ee8:	0140b404 	movi	r5,720
 8000eec:	0009883a 	mov	r4,zero
 8000ef0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8000ef4:	01400044 	movi	r5,1
 8000ef8:	0009883a 	mov	r4,zero
 8000efc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000f00:	014004c4 	movi	r5,19
 8000f04:	0009883a 	mov	r4,zero
 8000f08:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8000f0c:	01414504 	movi	r5,1300
 8000f10:	0009883a 	mov	r4,zero
 8000f14:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8000f18:	01428844 	movi	r5,2593
 8000f1c:	0009883a 	mov	r4,zero
 8000f20:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8000f24:	000b883a 	mov	r5,zero
 8000f28:	0009883a 	mov	r4,zero
 8000f2c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000f30:	000b883a 	mov	r5,zero
 8000f34:	0009883a 	mov	r4,zero
 8000f38:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000f3c:	000b883a 	mov	r5,zero
 8000f40:	0009883a 	mov	r4,zero
 8000f44:	80003100 	call	8000310 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8000f48:	000b883a 	mov	r5,zero
 8000f4c:	0009883a 	mov	r4,zero
 8000f50:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8000f54:	000b883a 	mov	r5,zero
 8000f58:	0009883a 	mov	r4,zero
 8000f5c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8000f60:	0140a404 	movi	r5,656
 8000f64:	0009883a 	mov	r4,zero
 8000f68:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8000f6c:	01401044 	movi	r5,65
 8000f70:	0009883a 	mov	r4,zero
 8000f74:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8000f78:	014004c4 	movi	r5,19
 8000f7c:	0009883a 	mov	r4,zero
 8000f80:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8000f84:	000b883a 	mov	r5,zero
 8000f88:	0009883a 	mov	r4,zero
 8000f8c:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000f90:	01414004 	movi	r5,1280
 8000f94:	01006c04 	movi	r4,432
 8000f98:	80004480 	call	8000448 <UsbWrite>
}
 8000f9c:	0001883a 	nop
 8000fa0:	e037883a 	mov	sp,fp
 8000fa4:	dfc00117 	ldw	ra,4(sp)
 8000fa8:	df000017 	ldw	fp,0(sp)
 8000fac:	dec00204 	addi	sp,sp,8
 8000fb0:	f800283a 	ret

08000fb4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8000fb4:	defffe04 	addi	sp,sp,-8
 8000fb8:	dfc00115 	stw	ra,4(sp)
 8000fbc:	df000015 	stw	fp,0(sp)
 8000fc0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8000fc4:	01414004 	movi	r5,1280
 8000fc8:	01000084 	movi	r4,2
 8000fcc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8000fd0:	01414304 	movi	r5,1292
 8000fd4:	0009883a 	mov	r4,zero
 8000fd8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8000fdc:	01400204 	movi	r5,8
 8000fe0:	0009883a 	mov	r4,zero
 8000fe4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8000fe8:	0140b404 	movi	r5,720
 8000fec:	0009883a 	mov	r4,zero
 8000ff0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8000ff4:	01400044 	movi	r5,1
 8000ff8:	0009883a 	mov	r4,zero
 8000ffc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001000:	014004c4 	movi	r5,19
 8001004:	0009883a 	mov	r4,zero
 8001008:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 800100c:	01414504 	movi	r5,1300
 8001010:	0009883a 	mov	r4,zero
 8001014:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001018:	0141a044 	movi	r5,1665
 800101c:	0009883a 	mov	r4,zero
 8001020:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001024:	01484004 	movi	r5,8448
 8001028:	0009883a 	mov	r4,zero
 800102c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001030:	000b883a 	mov	r5,zero
 8001034:	0009883a 	mov	r4,zero
 8001038:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 800103c:	01401ec4 	movi	r5,123
 8001040:	0009883a 	mov	r4,zero
 8001044:	80003100 	call	8000310 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001048:	01415104 	movi	r5,1348
 800104c:	0009883a 	mov	r4,zero
 8001050:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001054:	01400204 	movi	r5,8
 8001058:	0009883a 	mov	r4,zero
 800105c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001060:	0140a404 	movi	r5,656
 8001064:	0009883a 	mov	r4,zero
 8001068:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 800106c:	01401044 	movi	r5,65
 8001070:	0009883a 	mov	r4,zero
 8001074:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001078:	014004c4 	movi	r5,19
 800107c:	0009883a 	mov	r4,zero
 8001080:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001084:	01414804 	movi	r5,1312
 8001088:	0009883a 	mov	r4,zero
 800108c:	80003100 	call	8000310 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001090:	000b883a 	mov	r5,zero
 8001094:	0009883a 	mov	r4,zero
 8001098:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800109c:	000b883a 	mov	r5,zero
 80010a0:	0009883a 	mov	r4,zero
 80010a4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 80010a8:	01408404 	movi	r5,528
 80010ac:	0009883a 	mov	r4,zero
 80010b0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 80010b4:	01401044 	movi	r5,65
 80010b8:	0009883a 	mov	r4,zero
 80010bc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80010c0:	014004c4 	movi	r5,19
 80010c4:	0009883a 	mov	r4,zero
 80010c8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 80010cc:	000b883a 	mov	r5,zero
 80010d0:	0009883a 	mov	r4,zero
 80010d4:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80010d8:	01414004 	movi	r5,1280
 80010dc:	01006c04 	movi	r4,432
 80010e0:	80004480 	call	8000448 <UsbWrite>

}
 80010e4:	0001883a 	nop
 80010e8:	e037883a 	mov	sp,fp
 80010ec:	dfc00117 	ldw	ra,4(sp)
 80010f0:	df000017 	ldw	fp,0(sp)
 80010f4:	dec00204 	addi	sp,sp,8
 80010f8:	f800283a 	ret

080010fc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 80010fc:	defffe04 	addi	sp,sp,-8
 8001100:	dfc00115 	stw	ra,4(sp)
 8001104:	df000015 	stw	fp,0(sp)
 8001108:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800110c:	01414004 	movi	r5,1280
 8001110:	01000084 	movi	r4,2
 8001114:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001118:	01414304 	movi	r5,1292
 800111c:	0009883a 	mov	r4,zero
 8001120:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001124:	01400204 	movi	r5,8
 8001128:	0009883a 	mov	r4,zero
 800112c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001130:	0140b404 	movi	r5,720
 8001134:	0009883a 	mov	r4,zero
 8001138:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800113c:	01400044 	movi	r5,1
 8001140:	0009883a 	mov	r4,zero
 8001144:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001148:	014004c4 	movi	r5,19
 800114c:	0009883a 	mov	r4,zero
 8001150:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001154:	01414504 	movi	r5,1300
 8001158:	0009883a 	mov	r4,zero
 800115c:	80003100 	call	8000310 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001160:	0141a044 	movi	r5,1665
 8001164:	0009883a 	mov	r4,zero
 8001168:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 800116c:	01488004 	movi	r5,8704
 8001170:	0009883a 	mov	r4,zero
 8001174:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001178:	000b883a 	mov	r5,zero
 800117c:	0009883a 	mov	r4,zero
 8001180:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001184:	01401ec4 	movi	r5,123
 8001188:	0009883a 	mov	r4,zero
 800118c:	80003100 	call	8000310 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001190:	01416004 	movi	r5,1408
 8001194:	0009883a 	mov	r4,zero
 8001198:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 800119c:	01400204 	movi	r5,8
 80011a0:	0009883a 	mov	r4,zero
 80011a4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80011a8:	0140a404 	movi	r5,656
 80011ac:	0009883a 	mov	r4,zero
 80011b0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80011b4:	01401044 	movi	r5,65
 80011b8:	0009883a 	mov	r4,zero
 80011bc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80011c0:	014004c4 	movi	r5,19
 80011c4:	0009883a 	mov	r4,zero
 80011c8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80011cc:	01414804 	movi	r5,1312
 80011d0:	0009883a 	mov	r4,zero
 80011d4:	80003100 	call	8000310 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 80011d8:	01416204 	movi	r5,1416
 80011dc:	0009883a 	mov	r4,zero
 80011e0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 80011e4:	01400204 	movi	r5,8
 80011e8:	0009883a 	mov	r4,zero
 80011ec:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80011f0:	0140a404 	movi	r5,656
 80011f4:	0009883a 	mov	r4,zero
 80011f8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 80011fc:	01400044 	movi	r5,1
 8001200:	0009883a 	mov	r4,zero
 8001204:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001208:	014004c4 	movi	r5,19
 800120c:	0009883a 	mov	r4,zero
 8001210:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001214:	01414b04 	movi	r5,1324
 8001218:	0009883a 	mov	r4,zero
 800121c:	80003100 	call	8000310 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8001220:	01416404 	movi	r5,1424
 8001224:	0009883a 	mov	r4,zero
 8001228:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800122c:	01400204 	movi	r5,8
 8001230:	0009883a 	mov	r4,zero
 8001234:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001238:	0140a404 	movi	r5,656
 800123c:	0009883a 	mov	r4,zero
 8001240:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001244:	01401044 	movi	r5,65
 8001248:	0009883a 	mov	r4,zero
 800124c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001250:	014004c4 	movi	r5,19
 8001254:	0009883a 	mov	r4,zero
 8001258:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 800125c:	01414e04 	movi	r5,1336
 8001260:	0009883a 	mov	r4,zero
 8001264:	80003100 	call	8000310 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8001268:	01416604 	movi	r5,1432
 800126c:	0009883a 	mov	r4,zero
 8001270:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001274:	01400204 	movi	r5,8
 8001278:	0009883a 	mov	r4,zero
 800127c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001280:	0140a404 	movi	r5,656
 8001284:	0009883a 	mov	r4,zero
 8001288:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 800128c:	01400044 	movi	r5,1
 8001290:	0009883a 	mov	r4,zero
 8001294:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001298:	014004c4 	movi	r5,19
 800129c:	0009883a 	mov	r4,zero
 80012a0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 80012a4:	01415104 	movi	r5,1348
 80012a8:	0009883a 	mov	r4,zero
 80012ac:	80003100 	call	8000310 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 80012b0:	01416804 	movi	r5,1440
 80012b4:	0009883a 	mov	r4,zero
 80012b8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80012bc:	01400204 	movi	r5,8
 80012c0:	0009883a 	mov	r4,zero
 80012c4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80012c8:	0140a404 	movi	r5,656
 80012cc:	0009883a 	mov	r4,zero
 80012d0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 80012d4:	01401044 	movi	r5,65
 80012d8:	0009883a 	mov	r4,zero
 80012dc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80012e0:	014004c4 	movi	r5,19
 80012e4:	0009883a 	mov	r4,zero
 80012e8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 80012ec:	01415404 	movi	r5,1360
 80012f0:	0009883a 	mov	r4,zero
 80012f4:	80003100 	call	8000310 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 80012f8:	01416a04 	movi	r5,1448
 80012fc:	0009883a 	mov	r4,zero
 8001300:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001304:	01400204 	movi	r5,8
 8001308:	0009883a 	mov	r4,zero
 800130c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001310:	0140a404 	movi	r5,656
 8001314:	0009883a 	mov	r4,zero
 8001318:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800131c:	01400044 	movi	r5,1
 8001320:	0009883a 	mov	r4,zero
 8001324:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001328:	014004c4 	movi	r5,19
 800132c:	0009883a 	mov	r4,zero
 8001330:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8001334:	01415704 	movi	r5,1372
 8001338:	0009883a 	mov	r4,zero
 800133c:	80003100 	call	8000310 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8001340:	01416c04 	movi	r5,1456
 8001344:	0009883a 	mov	r4,zero
 8001348:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800134c:	01400204 	movi	r5,8
 8001350:	0009883a 	mov	r4,zero
 8001354:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8001358:	0140a404 	movi	r5,656
 800135c:	0009883a 	mov	r4,zero
 8001360:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8001364:	01401044 	movi	r5,65
 8001368:	0009883a 	mov	r4,zero
 800136c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001370:	014004c4 	movi	r5,19
 8001374:	0009883a 	mov	r4,zero
 8001378:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 800137c:	01415a04 	movi	r5,1384
 8001380:	0009883a 	mov	r4,zero
 8001384:	80003100 	call	8000310 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 8001388:	01416e04 	movi	r5,1464
 800138c:	0009883a 	mov	r4,zero
 8001390:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 8001394:	014000c4 	movi	r5,3
 8001398:	0009883a 	mov	r4,zero
 800139c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 80013a0:	0140a404 	movi	r5,656
 80013a4:	0009883a 	mov	r4,zero
 80013a8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 80013ac:	01400044 	movi	r5,1
 80013b0:	0009883a 	mov	r4,zero
 80013b4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 80013b8:	014004c4 	movi	r5,19
 80013bc:	0009883a 	mov	r4,zero
 80013c0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 80013c4:	01415d04 	movi	r5,1396
 80013c8:	0009883a 	mov	r4,zero
 80013cc:	80003100 	call	8000310 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 80013d0:	000b883a 	mov	r5,zero
 80013d4:	0009883a 	mov	r4,zero
 80013d8:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 80013dc:	000b883a 	mov	r5,zero
 80013e0:	0009883a 	mov	r4,zero
 80013e4:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 80013e8:	01408404 	movi	r5,528
 80013ec:	0009883a 	mov	r4,zero
 80013f0:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80013f4:	01401044 	movi	r5,65
 80013f8:	0009883a 	mov	r4,zero
 80013fc:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001400:	014004c4 	movi	r5,19
 8001404:	0009883a 	mov	r4,zero
 8001408:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800140c:	000b883a 	mov	r5,zero
 8001410:	0009883a 	mov	r4,zero
 8001414:	80003100 	call	8000310 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001418:	01414004 	movi	r5,1280
 800141c:	01006c04 	movi	r4,432
 8001420:	80004480 	call	8000448 <UsbWrite>

}
 8001424:	0001883a 	nop
 8001428:	e037883a 	mov	sp,fp
 800142c:	dfc00117 	ldw	ra,4(sp)
 8001430:	df000017 	ldw	fp,0(sp)
 8001434:	dec00204 	addi	sp,sp,8
 8001438:	f800283a 	ret

0800143c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 800143c:	defffd04 	addi	sp,sp,-12
 8001440:	dfc00215 	stw	ra,8(sp)
 8001444:	df000115 	stw	fp,4(sp)
 8001448:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 800144c:	01005104 	movi	r4,324
 8001450:	80004a40 	call	80004a4 <UsbRead>
 8001454:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001458:	000b883a 	mov	r5,zero
 800145c:	01005104 	movi	r4,324
 8001460:	80004480 	call	8000448 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8001464:	00000d06 	br	800149c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8001468:	e0bfff8b 	ldhu	r2,-2(fp)
 800146c:	10000526 	beq	r2,zero,8001484 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 8001470:	e0bfff8b 	ldhu	r2,-2(fp)
 8001474:	100b883a 	mov	r5,r2
 8001478:	01020074 	movhi	r4,2049
 800147c:	2107ab04 	addi	r4,r4,7852
 8001480:	80023c80 	call	80023c8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8001484:	01005104 	movi	r4,324
 8001488:	80004a40 	call	80004a4 <UsbRead>
 800148c:	e0bfff8d 	sth	r2,-2(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8001490:	000b883a 	mov	r5,zero
 8001494:	01005104 	movi	r4,324
 8001498:	80004480 	call	8000448 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 800149c:	e0bfff8b 	ldhu	r2,-2(fp)
 80014a0:	10840018 	cmpnei	r2,r2,4096
 80014a4:	103ff01e 	bne	r2,zero,8001468 <UsbWaitTDListDone+0x2c>
	}

	return usb_ctl_val;
 80014a8:	e0bfff8b 	ldhu	r2,-2(fp)
}
 80014ac:	e037883a 	mov	sp,fp
 80014b0:	dfc00117 	ldw	ra,4(sp)
 80014b4:	df000017 	ldw	fp,0(sp)
 80014b8:	dec00204 	addi	sp,sp,8
 80014bc:	f800283a 	ret

080014c0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 80014c0:	defffd04 	addi	sp,sp,-12
 80014c4:	dfc00215 	stw	ra,8(sp)
 80014c8:	df000115 	stw	fp,4(sp)
 80014cc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 80014d0:	010000c4 	movi	r4,3
 80014d4:	800039c0 	call	800039c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 80014d8:	01005104 	movi	r4,324
 80014dc:	80004a40 	call	80004a4 <UsbRead>
 80014e0:	10bfffcc 	andi	r2,r2,65535
 80014e4:	10840018 	cmpnei	r2,r2,4096
 80014e8:	1000091e 	bne	r2,zero,8001510 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80014ec:	000b883a 	mov	r5,zero
 80014f0:	01005104 	movi	r4,324
 80014f4:	80004480 	call	8000448 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80014f8:	0001883a 	nop
 80014fc:	010000c4 	movi	r4,3
 8001500:	800039c0 	call	800039c <IO_read>
 8001504:	10bfffcc 	andi	r2,r2,65535
 8001508:	1080040c 	andi	r2,r2,16
 800150c:	103ffb26 	beq	r2,zero,80014fc <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 8001510:	01414204 	movi	r5,1288
 8001514:	01000084 	movi	r4,2
 8001518:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800151c:	0009883a 	mov	r4,zero
 8001520:	800039c0 	call	800039c <IO_read>
 8001524:	e0bfff8d 	sth	r2,-2(fp)

	return usb_ctl_val;
 8001528:	e0bfff8b 	ldhu	r2,-2(fp)
}
 800152c:	e037883a 	mov	sp,fp
 8001530:	dfc00117 	ldw	ra,4(sp)
 8001534:	df000017 	ldw	fp,0(sp)
 8001538:	dec00204 	addi	sp,sp,8
 800153c:	f800283a 	ret

08001540 <UsbPrintMem>:


void UsbPrintMem()
{
 8001540:	defffc04 	addi	sp,sp,-16
 8001544:	dfc00315 	stw	ra,12(sp)
 8001548:	df000215 	stw	fp,8(sp)
 800154c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 8001550:	01414004 	movi	r5,1280
 8001554:	01000084 	movi	r4,2
 8001558:	80003100 	call	8000310 <IO_write>
	for (i = 0; i <= 200; i += 2)
 800155c:	e03fff15 	stw	zero,-4(fp)
 8001560:	00000e06 	br	800159c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 8001564:	0009883a 	mov	r4,zero
 8001568:	800039c0 	call	800039c <IO_read>
 800156c:	10bfffcc 	andi	r2,r2,65535
 8001570:	e0bffe15 	stw	r2,-8(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8001574:	e0bfff17 	ldw	r2,-4(fp)
 8001578:	10814004 	addi	r2,r2,1280
 800157c:	e1bffe17 	ldw	r6,-8(fp)
 8001580:	100b883a 	mov	r5,r2
 8001584:	01020074 	movhi	r4,2049
 8001588:	2107b304 	addi	r4,r4,7884
 800158c:	80023c80 	call	80023c8 <printf>
	for (i = 0; i <= 200; i += 2)
 8001590:	e0bfff17 	ldw	r2,-4(fp)
 8001594:	10800084 	addi	r2,r2,2
 8001598:	e0bfff15 	stw	r2,-4(fp)
 800159c:	e0bfff17 	ldw	r2,-4(fp)
 80015a0:	10803250 	cmplti	r2,r2,201
 80015a4:	103fef1e 	bne	r2,zero,8001564 <UsbPrintMem+0x24>
	}
}
 80015a8:	0001883a 	nop
 80015ac:	0001883a 	nop
 80015b0:	e037883a 	mov	sp,fp
 80015b4:	dfc00117 	ldw	ra,4(sp)
 80015b8:	df000017 	ldw	fp,0(sp)
 80015bc:	dec00204 	addi	sp,sp,8
 80015c0:	f800283a 	ret

080015c4 <usb_init>:
//
//                                USB Main function
//
//----------------------------------------------------------------------------------------//
int usb_init(void)
{
 80015c4:	defff704 	addi	sp,sp,-36
 80015c8:	dfc00815 	stw	ra,32(sp)
 80015cc:	df000715 	stw	fp,28(sp)
 80015d0:	df000704 	addi	fp,sp,28
	IO_init();
 80015d4:	80002600 	call	8000260 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 80015d8:	e03ffe8d 	sth	zero,-6(fp)
	//!-----------------------Read More Keys-----------------------------------------//
	int keycode1 = 0;		// store the key read from address
 80015dc:	e03ffd15 	stw	zero,-12(fp)
	int keycode2 = 0;
 80015e0:	e03ffc15 	stw	zero,-16(fp)
	int keycode3 = 0;
 80015e4:	e03ffb15 	stw	zero,-20(fp)
	// int keycode4 = 0;
	//!-------------------------------End--------------------------------------------//
	alt_u8 toggle = 0;
 80015e8:	e03fff45 	stb	zero,-3(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 80015ec:	01020074 	movhi	r4,2049
 80015f0:	2107b804 	addi	r4,r4,7904
 80015f4:	80024cc0 	call	80024cc <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 80015f8:	80004e80 	call	80004e8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 80015fc:	000b883a 	mov	r5,zero
 8001600:	01005104 	movi	r4,324
 8001604:	80004480 	call	8000448 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8001608:	017fffd4 	movui	r5,65535
 800160c:	01302414 	movui	r4,49296
 8001610:	80004480 	call	8000448 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 8001614:	01409604 	movi	r5,600
 8001618:	01006d04 	movi	r4,436
 800161c:	80004480 	call	8000448 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 8001620:	00811004 	movi	r2,1088
 8001624:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 8001628:	e0bfff8b 	ldhu	r2,-2(fp)
 800162c:	100b883a 	mov	r5,r2
 8001630:	01005084 	movi	r4,322
 8001634:	80004480 	call	8000448 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 8001638:	00808404 	movi	r2,528
 800163c:	e0bffa8d 	sth	r2,-22(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 8001640:	e0bffa8b 	ldhu	r2,-22(fp)
 8001644:	100b883a 	mov	r5,r2
 8001648:	01302314 	movui	r4,49292
 800164c:	80004480 	call	8000448 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 8001650:	000b883a 	mov	r5,zero
 8001654:	01007104 	movi	r4,452
 8001658:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 800165c:	000b883a 	mov	r5,zero
 8001660:	01007184 	movi	r4,454
 8001664:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8001668:	000b883a 	mov	r5,zero
 800166c:	01007204 	movi	r4,456
 8001670:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8001674:	000b883a 	mov	r5,zero
 8001678:	01007284 	movi	r4,458
 800167c:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 8001680:	000b883a 	mov	r5,zero
 8001684:	01007304 	movi	r4,460
 8001688:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 800168c:	000b883a 	mov	r5,zero
 8001690:	01007384 	movi	r4,462
 8001694:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8001698:	000b883a 	mov	r5,zero
 800169c:	01007404 	movi	r4,464
 80016a0:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80016a4:	000b883a 	mov	r5,zero
 80016a8:	01007484 	movi	r4,466
 80016ac:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80016b0:	000b883a 	mov	r5,zero
 80016b4:	01007504 	movi	r4,468
 80016b8:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80016bc:	000b883a 	mov	r5,zero
 80016c0:	01007584 	movi	r4,470
 80016c4:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80016c8:	000b883a 	mov	r5,zero
 80016cc:	01007604 	movi	r4,472
 80016d0:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 80016d4:	000b883a 	mov	r5,zero
 80016d8:	01007684 	movi	r4,474
 80016dc:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 80016e0:	000b883a 	mov	r5,zero
 80016e4:	01007704 	movi	r4,476
 80016e8:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 80016ec:	000b883a 	mov	r5,zero
 80016f0:	01007784 	movi	r4,478
 80016f4:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 80016f8:	01401c84 	movi	r5,114
 80016fc:	01007084 	movi	r4,450
 8001700:	80004480 	call	8000448 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8001704:	01738054 	movui	r5,52737
 8001708:	01000044 	movi	r4,1
 800170c:	80003100 	call	8000310 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 8001710:	0001883a 	nop
 8001714:	010000c4 	movi	r4,3
 8001718:	800039c0 	call	800039c <IO_read>
 800171c:	10bfffcc 	andi	r2,r2,65535
 8001720:	103ffc26 	beq	r2,zero,8001714 <usb_init+0x150>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8001724:	00000806 	br	8001748 <usb_init+0x184>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8001728:	01000044 	movi	r4,1
 800172c:	800039c0 	call	800039c <IO_read>
 8001730:	10bfffcc 	andi	r2,r2,65535
 8001734:	100b883a 	mov	r5,r2
 8001738:	01020074 	movhi	r4,2049
 800173c:	2107be04 	addi	r4,r4,7928
 8001740:	80023c80 	call	80023c8 <printf>
		goto USB_HOT_PLUG;
 8001744:	003fac06 	br	80015f8 <usb_init+0x34>
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8001748:	01000044 	movi	r4,1
 800174c:	800039c0 	call	800039c <IO_read>
 8001750:	10bfffcc 	andi	r2,r2,65535
 8001754:	1083fb58 	cmpnei	r2,r2,4077
 8001758:	103ff31e 	bne	r2,zero,8001728 <usb_init+0x164>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 800175c:	01020074 	movhi	r4,2049
 8001760:	2107c704 	addi	r4,r4,7964
 8001764:	80023c80 	call	80023c8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 8001768:	01401d04 	movi	r5,116
 800176c:	01007084 	movi	r4,450
 8001770:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 8001774:	01400f04 	movi	r5,60
 8001778:	01007104 	movi	r4,452
 800177c:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 8001780:	000b883a 	mov	r5,zero
 8001784:	01007184 	movi	r4,454
 8001788:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 800178c:	000b883a 	mov	r5,zero
 8001790:	01007204 	movi	r4,456
 8001794:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8001798:	000b883a 	mov	r5,zero
 800179c:	01007284 	movi	r4,458
 80017a0:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80017a4:	000b883a 	mov	r5,zero
 80017a8:	01007304 	movi	r4,460
 80017ac:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80017b0:	000b883a 	mov	r5,zero
 80017b4:	01007384 	movi	r4,462
 80017b8:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80017bc:	000b883a 	mov	r5,zero
 80017c0:	01007404 	movi	r4,464
 80017c4:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 80017c8:	000b883a 	mov	r5,zero
 80017cc:	01007484 	movi	r4,466
 80017d0:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 80017d4:	000b883a 	mov	r5,zero
 80017d8:	01007504 	movi	r4,468
 80017dc:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 80017e0:	000b883a 	mov	r5,zero
 80017e4:	01007584 	movi	r4,470
 80017e8:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 80017ec:	000b883a 	mov	r5,zero
 80017f0:	01007604 	movi	r4,472
 80017f4:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 80017f8:	000b883a 	mov	r5,zero
 80017fc:	01007684 	movi	r4,474
 8001800:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8001804:	000b883a 	mov	r5,zero
 8001808:	01007704 	movi	r4,476
 800180c:	80004480 	call	8000448 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8001810:	000b883a 	mov	r5,zero
 8001814:	01007784 	movi	r4,478
 8001818:	80004480 	call	8000448 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 800181c:	01738054 	movui	r5,52737
 8001820:	01000044 	movi	r4,1
 8001824:	80003100 	call	8000310 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8001828:	0001883a 	nop
 800182c:	01000044 	movi	r4,1
 8001830:	800039c0 	call	800039c <IO_read>
 8001834:	10bfffcc 	andi	r2,r2,65535
 8001838:	1083fb58 	cmpnei	r2,r2,4077
 800183c:	10000826 	beq	r2,zero,8001860 <usb_init+0x29c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8001840:	01000044 	movi	r4,1
 8001844:	800039c0 	call	800039c <IO_read>
 8001848:	10bfffcc 	andi	r2,r2,65535
 800184c:	100b883a 	mov	r5,r2
 8001850:	01020074 	movhi	r4,2049
 8001854:	2107be04 	addi	r4,r4,7928
 8001858:	80023c80 	call	80023c8 <printf>
		goto USB_HOT_PLUG;
 800185c:	003f6606 	br	80015f8 <usb_init+0x34>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 8001860:	00b02284 	movi	r2,-16246
 8001864:	d0a7040d 	sth	r2,-25584(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8001868:	008c0004 	movi	r2,12288
 800186c:	d0a7048d 	sth	r2,-25582(gp)
	fs_device = A_DP_STAT;
 8001870:	00880004 	movi	r2,8192
 8001874:	e0bffe8d 	sth	r2,-6(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 8001878:	d0a7040b 	ldhu	r2,-25584(gp)
 800187c:	10bfffcc 	andi	r2,r2,65535
 8001880:	1009883a 	mov	r4,r2
 8001884:	80004a40 	call	80004a4 <UsbRead>
 8001888:	e0bfff8d 	sth	r2,-2(fp)

	if (!(usb_ctl_val & no_device))
 800188c:	d0a7048b 	ldhu	r2,-25582(gp)
 8001890:	e0ffff8b 	ldhu	r3,-2(fp)
 8001894:	1884703a 	and	r2,r3,r2
 8001898:	10bfffcc 	andi	r2,r2,65535
 800189c:	1000351e 	bne	r2,zero,8001974 <usb_init+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80018a0:	e03fff05 	stb	zero,-4(fp)
 80018a4:	00000f06 	br	80018e4 <usb_init+0x320>
		{
			usleep(5*1000);
 80018a8:	0104e204 	movi	r4,5000
 80018ac:	800ffcc0 	call	800ffcc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 80018b0:	d0a7040b 	ldhu	r2,-25584(gp)
 80018b4:	10bfffcc 	andi	r2,r2,65535
 80018b8:	1009883a 	mov	r4,r2
 80018bc:	80004a40 	call	80004a4 <UsbRead>
 80018c0:	e0bfff8d 	sth	r2,-2(fp)
			if(usb_ctl_val & no_device) break;
 80018c4:	d0a7048b 	ldhu	r2,-25582(gp)
 80018c8:	e0ffff8b 	ldhu	r3,-2(fp)
 80018cc:	1884703a 	and	r2,r3,r2
 80018d0:	10bfffcc 	andi	r2,r2,65535
 80018d4:	1000071e 	bne	r2,zero,80018f4 <usb_init+0x330>
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80018d8:	e0bfff03 	ldbu	r2,-4(fp)
 80018dc:	10800044 	addi	r2,r2,1
 80018e0:	e0bfff05 	stb	r2,-4(fp)
 80018e4:	e0bfff03 	ldbu	r2,-4(fp)
 80018e8:	10800170 	cmpltui	r2,r2,5
 80018ec:	103fee1e 	bne	r2,zero,80018a8 <usb_init+0x2e4>
 80018f0:	00000106 	br	80018f8 <usb_init+0x334>
			if(usb_ctl_val & no_device) break;
 80018f4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 80018f8:	d0a7048b 	ldhu	r2,-25582(gp)
 80018fc:	e0ffff8b 	ldhu	r3,-2(fp)
 8001900:	1884703a 	and	r2,r3,r2
 8001904:	10bfffcc 	andi	r2,r2,65535
 8001908:	1000261e 	bne	r2,zero,80019a4 <usb_init+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 800190c:	01020074 	movhi	r4,2049
 8001910:	2107cb04 	addi	r4,r4,7980
 8001914:	80024cc0 	call	80024cc <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 8001918:	01020074 	movhi	r4,2049
 800191c:	2107d504 	addi	r4,r4,8020
 8001920:	80024cc0 	call	80024cc <puts>
			while (!(usb_ctl_val & no_device))
 8001924:	00000d06 	br	800195c <usb_init+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 8001928:	d0a7040b 	ldhu	r2,-25584(gp)
 800192c:	10bfffcc 	andi	r2,r2,65535
 8001930:	1009883a 	mov	r4,r2
 8001934:	80004a40 	call	80004a4 <UsbRead>
 8001938:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device)
 800193c:	d0a7048b 	ldhu	r2,-25582(gp)
 8001940:	e0ffff8b 	ldhu	r3,-2(fp)
 8001944:	1884703a 	and	r2,r3,r2
 8001948:	10bfffcc 	andi	r2,r2,65535
 800194c:	10000126 	beq	r2,zero,8001954 <usb_init+0x390>
					goto USB_HOT_PLUG;
 8001950:	003f2906 	br	80015f8 <usb_init+0x34>

				usleep(2000);
 8001954:	0101f404 	movi	r4,2000
 8001958:	800ffcc0 	call	800ffcc <usleep>
			while (!(usb_ctl_val & no_device))
 800195c:	d0a7048b 	ldhu	r2,-25582(gp)
 8001960:	e0ffff8b 	ldhu	r3,-2(fp)
 8001964:	1884703a 	and	r2,r3,r2
 8001968:	10bfffcc 	andi	r2,r2,65535
 800196c:	103fee26 	beq	r2,zero,8001928 <usb_init+0x364>
 8001970:	00000c06 	br	80019a4 <usb_init+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 8001974:	e0ffff8b 	ldhu	r3,-2(fp)
 8001978:	e0bffe8b 	ldhu	r2,-6(fp)
 800197c:	1884703a 	and	r2,r3,r2
 8001980:	10bfffcc 	andi	r2,r2,65535
 8001984:	10000426 	beq	r2,zero,8001998 <usb_init+0x3d4>
		{
			printf("[INFO]: full speed device\n");
 8001988:	01020074 	movhi	r4,2049
 800198c:	2107e104 	addi	r4,r4,8068
 8001990:	80024cc0 	call	80024cc <puts>
 8001994:	00000306 	br	80019a4 <usb_init+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 8001998:	01020074 	movhi	r4,2049
 800199c:	2107e804 	addi	r4,r4,8096
 80019a0:	80024cc0 	call	80024cc <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80019a4:	800059c0 	call	800059c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80019a8:	00000306 	br	80019b8 <usb_init+0x3f4>
	{
		UsbSetAddress();
 80019ac:	800059c0 	call	800059c <UsbSetAddress>
		usleep(10*1000);
 80019b0:	0109c404 	movi	r4,10000
 80019b4:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80019b8:	010000c4 	movi	r4,3
 80019bc:	800039c0 	call	800039c <IO_read>
 80019c0:	10bfffcc 	andi	r2,r2,65535
 80019c4:	1080040c 	andi	r2,r2,16
 80019c8:	103ff826 	beq	r2,zero,80019ac <usb_init+0x3e8>
	}

	UsbWaitTDListDone();
 80019cc:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 80019d0:	01414184 	movi	r5,1286
 80019d4:	01000084 	movi	r4,2
 80019d8:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80019dc:	0009883a 	mov	r4,zero
 80019e0:	800039c0 	call	800039c <IO_read>
 80019e4:	10bfffcc 	andi	r2,r2,65535
 80019e8:	100b883a 	mov	r5,r2
 80019ec:	01020074 	movhi	r4,2049
 80019f0:	2107ef04 	addi	r4,r4,8124
 80019f4:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 80019f8:	01414204 	movi	r5,1288
 80019fc:	01000084 	movi	r4,2
 8001a00:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001a04:	0009883a 	mov	r4,zero
 8001a08:	800039c0 	call	800039c <IO_read>
 8001a0c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 8001a10:	e0bfff8b 	ldhu	r2,-2(fp)
 8001a14:	100b883a 	mov	r5,r2
 8001a18:	01020074 	movhi	r4,2049
 8001a1c:	2107fa04 	addi	r4,r4,8168
 8001a20:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 8001a24:	e0bfff8b 	ldhu	r2,-2(fp)
 8001a28:	108000e0 	cmpeqi	r2,r2,3
 8001a2c:	1000031e 	bne	r2,zero,8001a3c <usb_init+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001a30:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001a34:	e0bfff8d 	sth	r2,-2(fp)

		goto USB_HOT_PLUG;
 8001a38:	003eef06 	br	80015f8 <usb_init+0x34>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8001a3c:	01020074 	movhi	r4,2049
 8001a40:	21080604 	addi	r4,r4,8216
 8001a44:	80024cc0 	call	80024cc <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 8001a48:	800069c0 	call	800069c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001a4c:	00000306 	br	8001a5c <usb_init+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 8001a50:	800069c0 	call	800069c <UsbGetDeviceDesc1>
		usleep(10*1000);
 8001a54:	0109c404 	movi	r4,10000
 8001a58:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001a5c:	010000c4 	movi	r4,3
 8001a60:	800039c0 	call	800039c <IO_read>
 8001a64:	10bfffcc 	andi	r2,r2,65535
 8001a68:	1080040c 	andi	r2,r2,16
 8001a6c:	103ff826 	beq	r2,zero,8001a50 <usb_init+0x48c>
	}

	UsbWaitTDListDone();
 8001a70:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001a74:	01414184 	movi	r5,1286
 8001a78:	01000084 	movi	r4,2
 8001a7c:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001a80:	0009883a 	mov	r4,zero
 8001a84:	800039c0 	call	800039c <IO_read>
 8001a88:	10bfffcc 	andi	r2,r2,65535
 8001a8c:	100b883a 	mov	r5,r2
 8001a90:	01020074 	movhi	r4,2049
 8001a94:	21081504 	addi	r4,r4,8276
 8001a98:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001a9c:	01414204 	movi	r5,1288
 8001aa0:	01000084 	movi	r4,2
 8001aa4:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001aa8:	0009883a 	mov	r4,zero
 8001aac:	800039c0 	call	800039c <IO_read>
 8001ab0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8001ab4:	e0bfff8b 	ldhu	r2,-2(fp)
 8001ab8:	100b883a 	mov	r5,r2
 8001abc:	01020074 	movhi	r4,2049
 8001ac0:	21082004 	addi	r4,r4,8320
 8001ac4:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001ac8:	00000206 	br	8001ad4 <usb_init+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001acc:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001ad0:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001ad4:	e0bfff8b 	ldhu	r2,-2(fp)
 8001ad8:	108000d8 	cmpnei	r2,r2,3
 8001adc:	103ffb1e 	bne	r2,zero,8001acc <usb_init+0x508>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8001ae0:	01020074 	movhi	r4,2049
 8001ae4:	21082c04 	addi	r4,r4,8368
 8001ae8:	80024cc0 	call	80024cc <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 8001aec:	80007e40 	call	80007e4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001af0:	00000306 	br	8001b00 <usb_init+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 8001af4:	80007e40 	call	80007e4 <UsbGetDeviceDesc2>
		usleep(10*1000);
 8001af8:	0109c404 	movi	r4,10000
 8001afc:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001b00:	010000c4 	movi	r4,3
 8001b04:	800039c0 	call	800039c <IO_read>
 8001b08:	10bfffcc 	andi	r2,r2,65535
 8001b0c:	1080040c 	andi	r2,r2,16
 8001b10:	103ff826 	beq	r2,zero,8001af4 <usb_init+0x530>
	}

	UsbWaitTDListDone();
 8001b14:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001b18:	01414184 	movi	r5,1286
 8001b1c:	01000084 	movi	r4,2
 8001b20:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001b24:	0009883a 	mov	r4,zero
 8001b28:	800039c0 	call	800039c <IO_read>
 8001b2c:	10bfffcc 	andi	r2,r2,65535
 8001b30:	100b883a 	mov	r5,r2
 8001b34:	01020074 	movhi	r4,2049
 8001b38:	21081504 	addi	r4,r4,8276
 8001b3c:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001b40:	01414204 	movi	r5,1288
 8001b44:	01000084 	movi	r4,2
 8001b48:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001b4c:	0009883a 	mov	r4,zero
 8001b50:	800039c0 	call	800039c <IO_read>
 8001b54:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 8001b58:	e0bfff8b 	ldhu	r2,-2(fp)
 8001b5c:	100b883a 	mov	r5,r2
 8001b60:	01020074 	movhi	r4,2049
 8001b64:	21082004 	addi	r4,r4,8320
 8001b68:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001b6c:	00000206 	br	8001b78 <usb_init+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001b70:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001b74:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001b78:	e0bfff8b 	ldhu	r2,-2(fp)
 8001b7c:	108000d8 	cmpnei	r2,r2,3
 8001b80:	103ffb1e 	bne	r2,zero,8001b70 <usb_init+0x5ac>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 8001b84:	01020074 	movhi	r4,2049
 8001b88:	21084004 	addi	r4,r4,8448
 8001b8c:	80024cc0 	call	80024cc <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 8001b90:	80009bc0 	call	80009bc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001b94:	00000306 	br	8001ba4 <usb_init+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 8001b98:	80009bc0 	call	80009bc <UsbGetConfigDesc1>
		usleep(10*1000);
 8001b9c:	0109c404 	movi	r4,10000
 8001ba0:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001ba4:	010000c4 	movi	r4,3
 8001ba8:	800039c0 	call	800039c <IO_read>
 8001bac:	10bfffcc 	andi	r2,r2,65535
 8001bb0:	1080040c 	andi	r2,r2,16
 8001bb4:	103ff826 	beq	r2,zero,8001b98 <usb_init+0x5d4>
	}

	UsbWaitTDListDone();
 8001bb8:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001bbc:	01414184 	movi	r5,1286
 8001bc0:	01000084 	movi	r4,2
 8001bc4:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001bc8:	0009883a 	mov	r4,zero
 8001bcc:	800039c0 	call	800039c <IO_read>
 8001bd0:	10bfffcc 	andi	r2,r2,65535
 8001bd4:	100b883a 	mov	r5,r2
 8001bd8:	01020074 	movhi	r4,2049
 8001bdc:	21085204 	addi	r4,r4,8520
 8001be0:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001be4:	01414204 	movi	r5,1288
 8001be8:	01000084 	movi	r4,2
 8001bec:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001bf0:	0009883a 	mov	r4,zero
 8001bf4:	800039c0 	call	800039c <IO_read>
 8001bf8:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8001bfc:	e0bfff8b 	ldhu	r2,-2(fp)
 8001c00:	100b883a 	mov	r5,r2
 8001c04:	01020074 	movhi	r4,2049
 8001c08:	21085d04 	addi	r4,r4,8564
 8001c0c:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001c10:	00000206 	br	8001c1c <usb_init+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001c14:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001c18:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001c1c:	e0bfff8b 	ldhu	r2,-2(fp)
 8001c20:	108000d8 	cmpnei	r2,r2,3
 8001c24:	103ffb1e 	bne	r2,zero,8001c14 <usb_init+0x650>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8001c28:	01020074 	movhi	r4,2049
 8001c2c:	21086904 	addi	r4,r4,8612
 8001c30:	80024cc0 	call	80024cc <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 8001c34:	8000b4c0 	call	8000b4c <UsbGetConfigDesc2>

	usleep(100*1000);
 8001c38:	010000b4 	movhi	r4,2
 8001c3c:	2121a804 	addi	r4,r4,-31072
 8001c40:	800ffcc0 	call	800ffcc <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001c44:	00000306 	br	8001c54 <usb_init+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 8001c48:	8000b4c0 	call	8000b4c <UsbGetConfigDesc2>
		usleep(10*1000);
 8001c4c:	0109c404 	movi	r4,10000
 8001c50:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001c54:	010000c4 	movi	r4,3
 8001c58:	800039c0 	call	800039c <IO_read>
 8001c5c:	10bfffcc 	andi	r2,r2,65535
 8001c60:	1080040c 	andi	r2,r2,16
 8001c64:	103ff826 	beq	r2,zero,8001c48 <usb_init+0x684>
	}

	UsbWaitTDListDone();
 8001c68:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001c6c:	01414184 	movi	r5,1286
 8001c70:	01000084 	movi	r4,2
 8001c74:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001c78:	0009883a 	mov	r4,zero
 8001c7c:	800039c0 	call	800039c <IO_read>
 8001c80:	10bfffcc 	andi	r2,r2,65535
 8001c84:	100b883a 	mov	r5,r2
 8001c88:	01020074 	movhi	r4,2049
 8001c8c:	21087c04 	addi	r4,r4,8688
 8001c90:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001c94:	01414204 	movi	r5,1288
 8001c98:	01000084 	movi	r4,2
 8001c9c:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001ca0:	0009883a 	mov	r4,zero
 8001ca4:	800039c0 	call	800039c <IO_read>
 8001ca8:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8001cac:	e0bfff8b 	ldhu	r2,-2(fp)
 8001cb0:	100b883a 	mov	r5,r2
 8001cb4:	01020074 	movhi	r4,2049
 8001cb8:	21088704 	addi	r4,r4,8732
 8001cbc:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001cc0:	00000206 	br	8001ccc <usb_init+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001cc4:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001cc8:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001ccc:	e0bfff8b 	ldhu	r2,-2(fp)
 8001cd0:	108000d8 	cmpnei	r2,r2,3
 8001cd4:	103ffb1e 	bne	r2,zero,8001cc4 <usb_init+0x700>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8001cd8:	01020074 	movhi	r4,2049
 8001cdc:	21089304 	addi	r4,r4,8780
 8001ce0:	80024cc0 	call	80024cc <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8001ce4:	01415b04 	movi	r5,1388
 8001ce8:	01000084 	movi	r4,2
 8001cec:	80003100 	call	8000310 <IO_write>
	code = IO_read(HPI_DATA);
 8001cf0:	0009883a 	mov	r4,zero
 8001cf4:	800039c0 	call	800039c <IO_read>
 8001cf8:	e0bffa0d 	sth	r2,-24(fp)
	code = code & 0x003;
 8001cfc:	e0bffa0b 	ldhu	r2,-24(fp)
 8001d00:	108000cc 	andi	r2,r2,3
 8001d04:	e0bffa0d 	sth	r2,-24(fp)
	printf("\ncode = %x\n", code);
 8001d08:	e0bffa0b 	ldhu	r2,-24(fp)
 8001d0c:	100b883a 	mov	r5,r2
 8001d10:	01020074 	movhi	r4,2049
 8001d14:	2108a604 	addi	r4,r4,8856
 8001d18:	80023c80 	call	80023c8 <printf>

	if (code == 0x01)
 8001d1c:	e0bffa0b 	ldhu	r2,-24(fp)
 8001d20:	10800058 	cmpnei	r2,r2,1
 8001d24:	1000041e 	bne	r2,zero,8001d38 <usb_init+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8001d28:	01020074 	movhi	r4,2049
 8001d2c:	2108a904 	addi	r4,r4,8868
 8001d30:	80024cc0 	call	80024cc <puts>
 8001d34:	00000306 	br	8001d44 <usb_init+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8001d38:	01020074 	movhi	r4,2049
 8001d3c:	2108b804 	addi	r4,r4,8928
 8001d40:	80024cc0 	call	80024cc <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8001d44:	01415d84 	movi	r5,1398
 8001d48:	01000084 	movi	r4,2
 8001d4c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x073F);
 8001d50:	0141cfc4 	movi	r5,1855
 8001d54:	0009883a 	mov	r4,zero
 8001d58:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x8105);
 8001d5c:	01604154 	movui	r5,33029
 8001d60:	0009883a 	mov	r4,zero
 8001d64:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0003);
 8001d68:	014000c4 	movi	r5,3
 8001d6c:	0009883a 	mov	r4,zero
 8001d70:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8001d74:	01400204 	movi	r5,8
 8001d78:	0009883a 	mov	r4,zero
 8001d7c:	80003100 	call	8000310 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8001d80:	016b0294 	movui	r5,44042
 8001d84:	0009883a 	mov	r4,zero
 8001d88:	80003100 	call	8000310 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8001d8c:	01415d84 	movi	r5,1398
 8001d90:	01006c04 	movi	r4,432
 8001d94:	80004480 	call	8000448 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8001d98:	01415f04 	movi	r5,1404
 8001d9c:	01000084 	movi	r4,2
 8001da0:	80003100 	call	8000310 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8001da4:	0009883a 	mov	r4,zero
 8001da8:	800039c0 	call	800039c <IO_read>
 8001dac:	e0bff9c5 	stb	r2,-25(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8001db0:	e0bff9c3 	ldbu	r2,-25(fp)
 8001db4:	100b883a 	mov	r5,r2
 8001db8:	01020074 	movhi	r4,2049
 8001dbc:	2108c104 	addi	r4,r4,8964
 8001dc0:	80023c80 	call	80023c8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8001dc4:	8000db40 	call	8000db4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001dc8:	00000306 	br	8001dd8 <usb_init+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8001dcc:	8000db40 	call	8000db4 <UsbSetConfig>
		usleep(10*1000);
 8001dd0:	0109c404 	movi	r4,10000
 8001dd4:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001dd8:	010000c4 	movi	r4,3
 8001ddc:	800039c0 	call	800039c <IO_read>
 8001de0:	10bfffcc 	andi	r2,r2,65535
 8001de4:	1080040c 	andi	r2,r2,16
 8001de8:	103ff826 	beq	r2,zero,8001dcc <usb_init+0x808>
	}

	UsbWaitTDListDone();
 8001dec:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001df0:	01414184 	movi	r5,1286
 8001df4:	01000084 	movi	r4,2
 8001df8:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001dfc:	0009883a 	mov	r4,zero
 8001e00:	800039c0 	call	800039c <IO_read>
 8001e04:	10bfffcc 	andi	r2,r2,65535
 8001e08:	100b883a 	mov	r5,r2
 8001e0c:	01020074 	movhi	r4,2049
 8001e10:	2108cb04 	addi	r4,r4,9004
 8001e14:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001e18:	01414204 	movi	r5,1288
 8001e1c:	01000084 	movi	r4,2
 8001e20:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001e24:	0009883a 	mov	r4,zero
 8001e28:	800039c0 	call	800039c <IO_read>
 8001e2c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8001e30:	e0bfff8b 	ldhu	r2,-2(fp)
 8001e34:	100b883a 	mov	r5,r2
 8001e38:	01020074 	movhi	r4,2049
 8001e3c:	2108d604 	addi	r4,r4,9048
 8001e40:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001e44:	00000206 	br	8001e50 <usb_init+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001e48:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001e4c:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001e50:	e0bfff8b 	ldhu	r2,-2(fp)
 8001e54:	108000d8 	cmpnei	r2,r2,3
 8001e58:	103ffb1e 	bne	r2,zero,8001e48 <usb_init+0x884>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8001e5c:	01020074 	movhi	r4,2049
 8001e60:	2108e204 	addi	r4,r4,9096
 8001e64:	80024cc0 	call	80024cc <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8001e68:	8000eb40 	call	8000eb4 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001e6c:	00000306 	br	8001e7c <usb_init+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8001e70:	8000eb40 	call	8000eb4 <UsbClassRequest>
		usleep(10*1000);
 8001e74:	0109c404 	movi	r4,10000
 8001e78:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001e7c:	010000c4 	movi	r4,3
 8001e80:	800039c0 	call	800039c <IO_read>
 8001e84:	10bfffcc 	andi	r2,r2,65535
 8001e88:	1080040c 	andi	r2,r2,16
 8001e8c:	103ff826 	beq	r2,zero,8001e70 <usb_init+0x8ac>
	}

	UsbWaitTDListDone();
 8001e90:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001e94:	01414184 	movi	r5,1286
 8001e98:	01000084 	movi	r4,2
 8001e9c:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001ea0:	0009883a 	mov	r4,zero
 8001ea4:	800039c0 	call	800039c <IO_read>
 8001ea8:	10bfffcc 	andi	r2,r2,65535
 8001eac:	100b883a 	mov	r5,r2
 8001eb0:	01020074 	movhi	r4,2049
 8001eb4:	2108f404 	addi	r4,r4,9168
 8001eb8:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001ebc:	01414204 	movi	r5,1288
 8001ec0:	01000084 	movi	r4,2
 8001ec4:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001ec8:	0009883a 	mov	r4,zero
 8001ecc:	800039c0 	call	800039c <IO_read>
 8001ed0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8001ed4:	e0bfff8b 	ldhu	r2,-2(fp)
 8001ed8:	100b883a 	mov	r5,r2
 8001edc:	01020074 	movhi	r4,2049
 8001ee0:	2108ff04 	addi	r4,r4,9212
 8001ee4:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001ee8:	00000206 	br	8001ef4 <usb_init+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001eec:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001ef0:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001ef4:	e0bfff8b 	ldhu	r2,-2(fp)
 8001ef8:	108000d8 	cmpnei	r2,r2,3
 8001efc:	103ffb1e 	bne	r2,zero,8001eec <usb_init+0x928>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8001f00:	01020074 	movhi	r4,2049
 8001f04:	21090b04 	addi	r4,r4,9260
 8001f08:	80024cc0 	call	80024cc <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8001f0c:	8000fb40 	call	8000fb4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001f10:	00000306 	br	8001f20 <usb_init+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8001f14:	8000fb40 	call	8000fb4 <UsbGetHidDesc>
		usleep(10*1000);
 8001f18:	0109c404 	movi	r4,10000
 8001f1c:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001f20:	010000c4 	movi	r4,3
 8001f24:	800039c0 	call	800039c <IO_read>
 8001f28:	10bfffcc 	andi	r2,r2,65535
 8001f2c:	1080040c 	andi	r2,r2,16
 8001f30:	103ff826 	beq	r2,zero,8001f14 <usb_init+0x950>
	}

	UsbWaitTDListDone();
 8001f34:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001f38:	01414184 	movi	r5,1286
 8001f3c:	01000084 	movi	r4,2
 8001f40:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001f44:	0009883a 	mov	r4,zero
 8001f48:	800039c0 	call	800039c <IO_read>
 8001f4c:	10bfffcc 	andi	r2,r2,65535
 8001f50:	100b883a 	mov	r5,r2
 8001f54:	01020074 	movhi	r4,2049
 8001f58:	2108f404 	addi	r4,r4,9168
 8001f5c:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8001f60:	01414204 	movi	r5,1288
 8001f64:	01000084 	movi	r4,2
 8001f68:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8001f6c:	0009883a 	mov	r4,zero
 8001f70:	800039c0 	call	800039c <IO_read>
 8001f74:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8001f78:	e0bfff8b 	ldhu	r2,-2(fp)
 8001f7c:	100b883a 	mov	r5,r2
 8001f80:	01020074 	movhi	r4,2049
 8001f84:	2108ff04 	addi	r4,r4,9212
 8001f88:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8001f8c:	00000206 	br	8001f98 <usb_init+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8001f90:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8001f94:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 8001f98:	e0bfff8b 	ldhu	r2,-2(fp)
 8001f9c:	108000d8 	cmpnei	r2,r2,3
 8001fa0:	103ffb1e 	bne	r2,zero,8001f90 <usb_init+0x9cc>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8001fa4:	01020074 	movhi	r4,2049
 8001fa8:	21091d04 	addi	r4,r4,9332
 8001fac:	80024cc0 	call	80024cc <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8001fb0:	80010fc0 	call	80010fc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001fb4:	00000306 	br	8001fc4 <usb_init+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8001fb8:	80010fc0 	call	80010fc <UsbGetReportDesc>
		usleep(10*1000);
 8001fbc:	0109c404 	movi	r4,10000
 8001fc0:	800ffcc0 	call	800ffcc <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8001fc4:	010000c4 	movi	r4,3
 8001fc8:	800039c0 	call	800039c <IO_read>
 8001fcc:	10bfffcc 	andi	r2,r2,65535
 8001fd0:	1080040c 	andi	r2,r2,16
 8001fd4:	103ff826 	beq	r2,zero,8001fb8 <usb_init+0x9f4>
	}

	UsbWaitTDListDone();
 8001fd8:	800143c0 	call	800143c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8001fdc:	01414184 	movi	r5,1286
 8001fe0:	01000084 	movi	r4,2
 8001fe4:	80003100 	call	8000310 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8001fe8:	0009883a 	mov	r4,zero
 8001fec:	800039c0 	call	800039c <IO_read>
 8001ff0:	10bfffcc 	andi	r2,r2,65535
 8001ff4:	100b883a 	mov	r5,r2
 8001ff8:	01020074 	movhi	r4,2049
 8001ffc:	21093104 	addi	r4,r4,9412
 8002000:	80023c80 	call	80023c8 <printf>

	IO_write(HPI_ADDR,0x0508);
 8002004:	01414204 	movi	r5,1288
 8002008:	01000084 	movi	r4,2
 800200c:	80003100 	call	8000310 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8002010:	0009883a 	mov	r4,zero
 8002014:	800039c0 	call	800039c <IO_read>
 8002018:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 800201c:	e0bfff8b 	ldhu	r2,-2(fp)
 8002020:	100b883a 	mov	r5,r2
 8002024:	01020074 	movhi	r4,2049
 8002028:	21093d04 	addi	r4,r4,9460
 800202c:	80023c80 	call	80023c8 <printf>
	while (usb_ctl_val != 0x03)
 8002030:	00000206 	br	800203c <usb_init+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8002034:	80014c00 	call	80014c0 <UsbGetRetryCnt>
 8002038:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
 800203c:	e0bfff8b 	ldhu	r2,-2(fp)
 8002040:	108000d8 	cmpnei	r2,r2,3
 8002044:	103ffb1e 	bne	r2,zero,8002034 <usb_init+0xa70>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8002048:	01020074 	movhi	r4,2049
 800204c:	21094904 	addi	r4,r4,9508
 8002050:	80024cc0 	call	80024cc <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8002054:	0109c404 	movi	r4,10000
 8002058:	800ffcc0 	call	800ffcc <usleep>
	while(1)
	{
		toggle++;
 800205c:	e0bfff43 	ldbu	r2,-3(fp)
 8002060:	10800044 	addi	r2,r2,1
 8002064:	e0bfff45 	stb	r2,-3(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8002068:	01414004 	movi	r5,1280
 800206c:	01000084 	movi	r4,2
 8002070:	80003100 	call	8000310 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8002074:	01414704 	movi	r5,1308
 8002078:	0009883a 	mov	r4,zero
 800207c:	80003100 	call	8000310 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8002080:	e0bff9c3 	ldbu	r2,-25(fp)
 8002084:	108003cc 	andi	r2,r2,15
 8002088:	100b883a 	mov	r5,r2
 800208c:	0009883a 	mov	r4,zero
 8002090:	80003100 	call	8000310 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8002094:	0140a444 	movi	r5,657
 8002098:	0009883a 	mov	r4,zero
 800209c:	80003100 	call	8000310 <IO_write>
		if(toggle%2)
 80020a0:	e0bfff43 	ldbu	r2,-3(fp)
 80020a4:	1080004c 	andi	r2,r2,1
 80020a8:	10803fcc 	andi	r2,r2,255
 80020ac:	10000426 	beq	r2,zero,80020c0 <usb_init+0xafc>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 80020b0:	01400044 	movi	r5,1
 80020b4:	0009883a 	mov	r4,zero
 80020b8:	80003100 	call	8000310 <IO_write>
 80020bc:	00000306 	br	80020cc <usb_init+0xb08>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 80020c0:	01401044 	movi	r5,65
 80020c4:	0009883a 	mov	r4,zero
 80020c8:	80003100 	call	8000310 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 80020cc:	014004c4 	movi	r5,19
 80020d0:	0009883a 	mov	r4,zero
 80020d4:	80003100 	call	8000310 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 80020d8:	000b883a 	mov	r5,zero
 80020dc:	0009883a 	mov	r4,zero
 80020e0:	80003100 	call	8000310 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80020e4:	01414004 	movi	r5,1280
 80020e8:	01006c04 	movi	r4,432
 80020ec:	80004480 	call	8000448 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80020f0:	00002406 	br	8002184 <usb_init+0xbc0>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 80020f4:	01414004 	movi	r5,1280
 80020f8:	01000084 	movi	r4,2
 80020fc:	80003100 	call	8000310 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8002100:	01414704 	movi	r5,1308
 8002104:	0009883a 	mov	r4,zero
 8002108:	80003100 	call	8000310 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 800210c:	e0bff9c3 	ldbu	r2,-25(fp)
 8002110:	108003cc 	andi	r2,r2,15
 8002114:	100b883a 	mov	r5,r2
 8002118:	0009883a 	mov	r4,zero
 800211c:	80003100 	call	8000310 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8002120:	0140a444 	movi	r5,657
 8002124:	0009883a 	mov	r4,zero
 8002128:	80003100 	call	8000310 <IO_write>
			if(toggle%2)
 800212c:	e0bfff43 	ldbu	r2,-3(fp)
 8002130:	1080004c 	andi	r2,r2,1
 8002134:	10803fcc 	andi	r2,r2,255
 8002138:	10000426 	beq	r2,zero,800214c <usb_init+0xb88>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 800213c:	01400044 	movi	r5,1
 8002140:	0009883a 	mov	r4,zero
 8002144:	80003100 	call	8000310 <IO_write>
 8002148:	00000306 	br	8002158 <usb_init+0xb94>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 800214c:	01401044 	movi	r5,65
 8002150:	0009883a 	mov	r4,zero
 8002154:	80003100 	call	8000310 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 8002158:	014004c4 	movi	r5,19
 800215c:	0009883a 	mov	r4,zero
 8002160:	80003100 	call	8000310 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8002164:	000b883a 	mov	r5,zero
 8002168:	0009883a 	mov	r4,zero
 800216c:	80003100 	call	8000310 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8002170:	01414004 	movi	r5,1280
 8002174:	01006c04 	movi	r4,432
 8002178:	80004480 	call	8000448 <UsbWrite>
			usleep(10*1000);
 800217c:	0109c404 	movi	r4,10000
 8002180:	800ffcc0 	call	800ffcc <usleep>
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8002184:	010000c4 	movi	r4,3
 8002188:	800039c0 	call	800039c <IO_read>
 800218c:	10bfffcc 	andi	r2,r2,65535
 8002190:	1080040c 	andi	r2,r2,16
 8002194:	103fd726 	beq	r2,zero,80020f4 <usb_init+0xb30>
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 8002198:	800143c0 	call	800143c <UsbWaitTDListDone>
 800219c:	e0bfff8d 	sth	r2,-2(fp)
		//! We can add UsbRead() here if we want to get more information about more keys
		// For example, code below reads 6 keys with 3 UsbRead(), each UsbRead() reads 16-bits = 2 char.
	
		// keycode = UsbRead(0x051e);
		// *keycode_base = keycode & 0xff; 
		keycode1 = UsbRead(0x051e);
 80021a0:	01014784 	movi	r4,1310
 80021a4:	80004a40 	call	80004a4 <UsbRead>
 80021a8:	10bfffcc 	andi	r2,r2,65535
 80021ac:	e0bffd15 	stw	r2,-12(fp)
		keycode2 = UsbRead(0x0520);
 80021b0:	01014804 	movi	r4,1312
 80021b4:	80004a40 	call	80004a4 <UsbRead>
 80021b8:	10bfffcc 	andi	r2,r2,65535
 80021bc:	e0bffc15 	stw	r2,-16(fp)
		keycode3 = UsbRead(0x0522);
 80021c0:	01014884 	movi	r4,1314
 80021c4:	80004a40 	call	80004a4 <UsbRead>
 80021c8:	10bfffcc 	andi	r2,r2,65535
 80021cc:	e0bffb15 	stw	r2,-20(fp)
		// keycode4 = UsbRead(0x0524);
		*keycode0_base = keycode1 & 0xff;	// only read 2 of 4 Hex as a keycode
 80021d0:	00840034 	movhi	r2,4096
 80021d4:	10845804 	addi	r2,r2,4448
 80021d8:	e0fffd17 	ldw	r3,-12(fp)
 80021dc:	10c00005 	stb	r3,0(r2)
		*keycode1_base = keycode1 >> 8;		// for second keycode, shift 8 bit
 80021e0:	e0bffd17 	ldw	r2,-12(fp)
 80021e4:	1007d23a 	srai	r3,r2,8
 80021e8:	00840034 	movhi	r2,4096
 80021ec:	10845404 	addi	r2,r2,4432
 80021f0:	10c00005 	stb	r3,0(r2)
		*keycode2_base = keycode2 & 0xff;
 80021f4:	00840034 	movhi	r2,4096
 80021f8:	10845004 	addi	r2,r2,4416
 80021fc:	e0fffc17 	ldw	r3,-16(fp)
 8002200:	10c00005 	stb	r3,0(r2)
		*keycode3_base = keycode2 >> 8;
 8002204:	e0bffc17 	ldw	r2,-16(fp)
 8002208:	1007d23a 	srai	r3,r2,8
 800220c:	00840034 	movhi	r2,4096
 8002210:	10844c04 	addi	r2,r2,4400
 8002214:	10c00005 	stb	r3,0(r2)
		*keycode4_base = keycode3 & 0xff;
 8002218:	00840034 	movhi	r2,4096
 800221c:	10844804 	addi	r2,r2,4384
 8002220:	e0fffb17 	ldw	r3,-20(fp)
 8002224:	10c00005 	stb	r3,0(r2)
		*keycode5_base = keycode3 >> 8;
 8002228:	e0bffb17 	ldw	r2,-20(fp)
 800222c:	1007d23a 	srai	r3,r2,8
 8002230:	00840034 	movhi	r2,4096
 8002234:	10844404 	addi	r2,r2,4368
 8002238:	10c00005 	stb	r3,0(r2)
		printf("%x %x %x\n",keycode1, keycode2, keycode3);
 800223c:	e1fffb17 	ldw	r7,-20(fp)
 8002240:	e1bffc17 	ldw	r6,-16(fp)
 8002244:	e17ffd17 	ldw	r5,-12(fp)
 8002248:	01020074 	movhi	r4,2049
 800224c:	21095d04 	addi	r4,r4,9588
 8002250:	80023c80 	call	80023c8 <printf>

		// printf("\nfirst two keycode values are %04x\n",keycode);
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		//!-------------------------------End------------------------//
		usleep(200);//usleep(5000);
 8002254:	01003204 	movi	r4,200
 8002258:	800ffcc0 	call	800ffcc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 800225c:	d0a7040b 	ldhu	r2,-25584(gp)
 8002260:	10bfffcc 	andi	r2,r2,65535
 8002264:	1009883a 	mov	r4,r2
 8002268:	80004a40 	call	80004a4 <UsbRead>
 800226c:	e0bfff8d 	sth	r2,-2(fp)

		if(!(usb_ctl_val & no_device))
 8002270:	d0a7048b 	ldhu	r2,-25582(gp)
 8002274:	e0ffff8b 	ldhu	r3,-2(fp)
 8002278:	1884703a 	and	r2,r3,r2
 800227c:	10bfffcc 	andi	r2,r2,65535
 8002280:	10003f1e 	bne	r2,zero,8002380 <usb_init+0xdbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8002284:	e03fff05 	stb	zero,-4(fp)
 8002288:	00000f06 	br	80022c8 <usb_init+0xd04>
			{
				usleep(5*1000);
 800228c:	0104e204 	movi	r4,5000
 8002290:	800ffcc0 	call	800ffcc <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8002294:	d0a7040b 	ldhu	r2,-25584(gp)
 8002298:	10bfffcc 	andi	r2,r2,65535
 800229c:	1009883a 	mov	r4,r2
 80022a0:	80004a40 	call	80004a4 <UsbRead>
 80022a4:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device) break;
 80022a8:	d0a7048b 	ldhu	r2,-25582(gp)
 80022ac:	e0ffff8b 	ldhu	r3,-2(fp)
 80022b0:	1884703a 	and	r2,r3,r2
 80022b4:	10bfffcc 	andi	r2,r2,65535
 80022b8:	1000071e 	bne	r2,zero,80022d8 <usb_init+0xd14>
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 80022bc:	e0bfff03 	ldbu	r2,-4(fp)
 80022c0:	10800044 	addi	r2,r2,1
 80022c4:	e0bfff05 	stb	r2,-4(fp)
 80022c8:	e0bfff03 	ldbu	r2,-4(fp)
 80022cc:	108001f0 	cmpltui	r2,r2,7
 80022d0:	103fee1e 	bne	r2,zero,800228c <usb_init+0xcc8>
 80022d4:	00000106 	br	80022dc <usb_init+0xd18>
				if(usb_ctl_val & no_device) break;
 80022d8:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 80022dc:	d0a7048b 	ldhu	r2,-25582(gp)
 80022e0:	e0ffff8b 	ldhu	r3,-2(fp)
 80022e4:	1884703a 	and	r2,r3,r2
 80022e8:	10bfffcc 	andi	r2,r2,65535
 80022ec:	1000241e 	bne	r2,zero,8002380 <usb_init+0xdbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 80022f0:	01020074 	movhi	r4,2049
 80022f4:	21096004 	addi	r4,r4,9600
 80022f8:	80024cc0 	call	80024cc <puts>
				printf("[INFO]: please insert again!!! \n");
 80022fc:	01020074 	movhi	r4,2049
 8002300:	21096b04 	addi	r4,r4,9644
 8002304:	80024cc0 	call	80024cc <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 8002308:	00001d06 	br	8002380 <usb_init+0xdbc>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 800230c:	d0a7040b 	ldhu	r2,-25584(gp)
 8002310:	10bfffcc 	andi	r2,r2,65535
 8002314:	1009883a 	mov	r4,r2
 8002318:	80004a40 	call	80004a4 <UsbRead>
 800231c:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
 8002320:	0104e204 	movi	r4,5000
 8002324:	800ffcc0 	call	800ffcc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8002328:	d0a7040b 	ldhu	r2,-25584(gp)
 800232c:	10bfffcc 	andi	r2,r2,65535
 8002330:	1009883a 	mov	r4,r2
 8002334:	80004a40 	call	80004a4 <UsbRead>
 8002338:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
 800233c:	0104e204 	movi	r4,5000
 8002340:	800ffcc0 	call	800ffcc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8002344:	d0a7040b 	ldhu	r2,-25584(gp)
 8002348:	10bfffcc 	andi	r2,r2,65535
 800234c:	1009883a 	mov	r4,r2
 8002350:	80004a40 	call	80004a4 <UsbRead>
 8002354:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
 8002358:	0104e204 	movi	r4,5000
 800235c:	800ffcc0 	call	800ffcc <usleep>

			if(usb_ctl_val & no_device)
 8002360:	d0a7048b 	ldhu	r2,-25582(gp)
 8002364:	e0ffff8b 	ldhu	r3,-2(fp)
 8002368:	1884703a 	and	r2,r3,r2
 800236c:	10bfffcc 	andi	r2,r2,65535
 8002370:	10000126 	beq	r2,zero,8002378 <usb_init+0xdb4>
				goto USB_HOT_PLUG;
 8002374:	003ca006 	br	80015f8 <usb_init+0x34>

			usleep(200);
 8002378:	01003204 	movi	r4,200
 800237c:	800ffcc0 	call	800ffcc <usleep>
		while (!(usb_ctl_val & no_device))
 8002380:	d0a7048b 	ldhu	r2,-25582(gp)
 8002384:	e0ffff8b 	ldhu	r3,-2(fp)
 8002388:	1884703a 	and	r2,r3,r2
 800238c:	10bfffcc 	andi	r2,r2,65535
 8002390:	103fde26 	beq	r2,zero,800230c <usb_init+0xd48>
		toggle++;
 8002394:	003f3106 	br	800205c <usb_init+0xa98>

08002398 <_printf_r>:
 8002398:	defffd04 	addi	sp,sp,-12
 800239c:	2805883a 	mov	r2,r5
 80023a0:	dfc00015 	stw	ra,0(sp)
 80023a4:	d9800115 	stw	r6,4(sp)
 80023a8:	d9c00215 	stw	r7,8(sp)
 80023ac:	21400217 	ldw	r5,8(r4)
 80023b0:	d9c00104 	addi	r7,sp,4
 80023b4:	100d883a 	mov	r6,r2
 80023b8:	80025740 	call	8002574 <___vfprintf_internal_r>
 80023bc:	dfc00017 	ldw	ra,0(sp)
 80023c0:	dec00304 	addi	sp,sp,12
 80023c4:	f800283a 	ret

080023c8 <printf>:
 80023c8:	defffc04 	addi	sp,sp,-16
 80023cc:	dfc00015 	stw	ra,0(sp)
 80023d0:	d9400115 	stw	r5,4(sp)
 80023d4:	d9800215 	stw	r6,8(sp)
 80023d8:	d9c00315 	stw	r7,12(sp)
 80023dc:	00820074 	movhi	r2,2049
 80023e0:	1091f217 	ldw	r2,18376(r2)
 80023e4:	200b883a 	mov	r5,r4
 80023e8:	d9800104 	addi	r6,sp,4
 80023ec:	11000217 	ldw	r4,8(r2)
 80023f0:	80046780 	call	8004678 <__vfprintf_internal>
 80023f4:	dfc00017 	ldw	ra,0(sp)
 80023f8:	dec00404 	addi	sp,sp,16
 80023fc:	f800283a 	ret

08002400 <_puts_r>:
 8002400:	defff504 	addi	sp,sp,-44
 8002404:	dc000815 	stw	r16,32(sp)
 8002408:	2021883a 	mov	r16,r4
 800240c:	2809883a 	mov	r4,r5
 8002410:	dc400915 	stw	r17,36(sp)
 8002414:	dfc00a15 	stw	ra,40(sp)
 8002418:	2823883a 	mov	r17,r5
 800241c:	80024dc0 	call	80024dc <strlen>
 8002420:	11000044 	addi	r4,r2,1
 8002424:	d8800515 	stw	r2,20(sp)
 8002428:	00800044 	movi	r2,1
 800242c:	00c20074 	movhi	r3,2049
 8002430:	d8800715 	stw	r2,28(sp)
 8002434:	d8800404 	addi	r2,sp,16
 8002438:	18c97304 	addi	r3,r3,9676
 800243c:	d8800115 	stw	r2,4(sp)
 8002440:	00800084 	movi	r2,2
 8002444:	dc400415 	stw	r17,16(sp)
 8002448:	d8c00615 	stw	r3,24(sp)
 800244c:	d9000315 	stw	r4,12(sp)
 8002450:	d8800215 	stw	r2,8(sp)
 8002454:	81400217 	ldw	r5,8(r16)
 8002458:	80000226 	beq	r16,zero,8002464 <_puts_r+0x64>
 800245c:	80800e17 	ldw	r2,56(r16)
 8002460:	10001326 	beq	r2,zero,80024b0 <_puts_r+0xb0>
 8002464:	2880030b 	ldhu	r2,12(r5)
 8002468:	10c8000c 	andi	r3,r2,8192
 800246c:	1800061e 	bne	r3,zero,8002488 <_puts_r+0x88>
 8002470:	28c01917 	ldw	r3,100(r5)
 8002474:	0137ffc4 	movi	r4,-8193
 8002478:	10880014 	ori	r2,r2,8192
 800247c:	1906703a 	and	r3,r3,r4
 8002480:	2880030d 	sth	r2,12(r5)
 8002484:	28c01915 	stw	r3,100(r5)
 8002488:	d9800104 	addi	r6,sp,4
 800248c:	8009883a 	mov	r4,r16
 8002490:	8006cf00 	call	8006cf0 <__sfvwrite_r>
 8002494:	10000b1e 	bne	r2,zero,80024c4 <_puts_r+0xc4>
 8002498:	00800284 	movi	r2,10
 800249c:	dfc00a17 	ldw	ra,40(sp)
 80024a0:	dc400917 	ldw	r17,36(sp)
 80024a4:	dc000817 	ldw	r16,32(sp)
 80024a8:	dec00b04 	addi	sp,sp,44
 80024ac:	f800283a 	ret
 80024b0:	8009883a 	mov	r4,r16
 80024b4:	d9400015 	stw	r5,0(sp)
 80024b8:	80068900 	call	8006890 <__sinit>
 80024bc:	d9400017 	ldw	r5,0(sp)
 80024c0:	003fe806 	br	8002464 <_puts_r+0x64>
 80024c4:	00bfffc4 	movi	r2,-1
 80024c8:	003ff406 	br	800249c <_puts_r+0x9c>

080024cc <puts>:
 80024cc:	00820074 	movhi	r2,2049
 80024d0:	200b883a 	mov	r5,r4
 80024d4:	1111f217 	ldw	r4,18376(r2)
 80024d8:	80024001 	jmpi	8002400 <_puts_r>

080024dc <strlen>:
 80024dc:	208000cc 	andi	r2,r4,3
 80024e0:	10000926 	beq	r2,zero,8002508 <strlen+0x2c>
 80024e4:	2005883a 	mov	r2,r4
 80024e8:	00000306 	br	80024f8 <strlen+0x1c>
 80024ec:	10800044 	addi	r2,r2,1
 80024f0:	10c000cc 	andi	r3,r2,3
 80024f4:	18000526 	beq	r3,zero,800250c <strlen+0x30>
 80024f8:	10c00007 	ldb	r3,0(r2)
 80024fc:	183ffb1e 	bne	r3,zero,80024ec <strlen+0x10>
 8002500:	1105c83a 	sub	r2,r2,r4
 8002504:	f800283a 	ret
 8002508:	2005883a 	mov	r2,r4
 800250c:	11400017 	ldw	r5,0(r2)
 8002510:	01ffbff4 	movhi	r7,65279
 8002514:	39ffbfc4 	addi	r7,r7,-257
 8002518:	29c7883a 	add	r3,r5,r7
 800251c:	01a02074 	movhi	r6,32897
 8002520:	014a303a 	nor	r5,zero,r5
 8002524:	1946703a 	and	r3,r3,r5
 8002528:	31a02004 	addi	r6,r6,-32640
 800252c:	1986703a 	and	r3,r3,r6
 8002530:	1800071e 	bne	r3,zero,8002550 <strlen+0x74>
 8002534:	11400117 	ldw	r5,4(r2)
 8002538:	10800104 	addi	r2,r2,4
 800253c:	29c7883a 	add	r3,r5,r7
 8002540:	014a303a 	nor	r5,zero,r5
 8002544:	1946703a 	and	r3,r3,r5
 8002548:	1986703a 	and	r3,r3,r6
 800254c:	183ff926 	beq	r3,zero,8002534 <strlen+0x58>
 8002550:	10c00007 	ldb	r3,0(r2)
 8002554:	183fea26 	beq	r3,zero,8002500 <strlen+0x24>
 8002558:	10c00047 	ldb	r3,1(r2)
 800255c:	10800044 	addi	r2,r2,1
 8002560:	183fe726 	beq	r3,zero,8002500 <strlen+0x24>
 8002564:	10c00047 	ldb	r3,1(r2)
 8002568:	10800044 	addi	r2,r2,1
 800256c:	183ffa1e 	bne	r3,zero,8002558 <strlen+0x7c>
 8002570:	003fe306 	br	8002500 <strlen+0x24>

08002574 <___vfprintf_internal_r>:
 8002574:	deffbf04 	addi	sp,sp,-260
 8002578:	dfc04015 	stw	ra,256(sp)
 800257c:	dd803d15 	stw	r22,244(sp)
 8002580:	dcc03a15 	stw	r19,232(sp)
 8002584:	dc803915 	stw	r18,228(sp)
 8002588:	2027883a 	mov	r19,r4
 800258c:	2825883a 	mov	r18,r5
 8002590:	302d883a 	mov	r22,r6
 8002594:	d9c00615 	stw	r7,24(sp)
 8002598:	df003f15 	stw	fp,252(sp)
 800259c:	ddc03e15 	stw	r23,248(sp)
 80025a0:	dd403c15 	stw	r21,240(sp)
 80025a4:	dd003b15 	stw	r20,236(sp)
 80025a8:	dc403815 	stw	r17,224(sp)
 80025ac:	dc003715 	stw	r16,220(sp)
 80025b0:	80073000 	call	8007300 <_localeconv_r>
 80025b4:	10800017 	ldw	r2,0(r2)
 80025b8:	1009883a 	mov	r4,r2
 80025bc:	d8800d15 	stw	r2,52(sp)
 80025c0:	80024dc0 	call	80024dc <strlen>
 80025c4:	d8800b15 	stw	r2,44(sp)
 80025c8:	98000226 	beq	r19,zero,80025d4 <___vfprintf_internal_r+0x60>
 80025cc:	98800e17 	ldw	r2,56(r19)
 80025d0:	1001e026 	beq	r2,zero,8002d54 <___vfprintf_internal_r+0x7e0>
 80025d4:	9080030b 	ldhu	r2,12(r18)
 80025d8:	10c8000c 	andi	r3,r2,8192
 80025dc:	1800061e 	bne	r3,zero,80025f8 <___vfprintf_internal_r+0x84>
 80025e0:	90c01917 	ldw	r3,100(r18)
 80025e4:	0137ffc4 	movi	r4,-8193
 80025e8:	10880014 	ori	r2,r2,8192
 80025ec:	1906703a 	and	r3,r3,r4
 80025f0:	9080030d 	sth	r2,12(r18)
 80025f4:	90c01915 	stw	r3,100(r18)
 80025f8:	10c0020c 	andi	r3,r2,8
 80025fc:	1800fc26 	beq	r3,zero,80029f0 <___vfprintf_internal_r+0x47c>
 8002600:	90c00417 	ldw	r3,16(r18)
 8002604:	1800fa26 	beq	r3,zero,80029f0 <___vfprintf_internal_r+0x47c>
 8002608:	1080068c 	andi	r2,r2,26
 800260c:	10800298 	cmpnei	r2,r2,10
 8002610:	1000ff26 	beq	r2,zero,8002a10 <___vfprintf_internal_r+0x49c>
 8002614:	d8802704 	addi	r2,sp,156
 8002618:	b02f883a 	mov	r23,r22
 800261c:	d8801a15 	stw	r2,104(sp)
 8002620:	d8001c15 	stw	zero,112(sp)
 8002624:	d8001b15 	stw	zero,108(sp)
 8002628:	d8000815 	stw	zero,32(sp)
 800262c:	d8000915 	stw	zero,36(sp)
 8002630:	d8000a15 	stw	zero,40(sp)
 8002634:	d8000c15 	stw	zero,48(sp)
 8002638:	d8001015 	stw	zero,64(sp)
 800263c:	d8000515 	stw	zero,20(sp)
 8002640:	102d883a 	mov	r22,r2
 8002644:	b8800007 	ldb	r2,0(r23)
 8002648:	1000d726 	beq	r2,zero,80029a8 <___vfprintf_internal_r+0x434>
 800264c:	b821883a 	mov	r16,r23
 8002650:	00000306 	br	8002660 <___vfprintf_internal_r+0xec>
 8002654:	80800047 	ldb	r2,1(r16)
 8002658:	84000044 	addi	r16,r16,1
 800265c:	10012226 	beq	r2,zero,8002ae8 <___vfprintf_internal_r+0x574>
 8002660:	10800958 	cmpnei	r2,r2,37
 8002664:	103ffb1e 	bne	r2,zero,8002654 <___vfprintf_internal_r+0xe0>
 8002668:	85e3c83a 	sub	r17,r16,r23
 800266c:	85c1201e 	bne	r16,r23,8002af0 <___vfprintf_internal_r+0x57c>
 8002670:	80800003 	ldbu	r2,0(r16)
 8002674:	10803fcc 	andi	r2,r2,255
 8002678:	1080201c 	xori	r2,r2,128
 800267c:	10bfe004 	addi	r2,r2,-128
 8002680:	1000c926 	beq	r2,zero,80029a8 <___vfprintf_internal_r+0x434>
 8002684:	82c00047 	ldb	r11,1(r16)
 8002688:	85c00044 	addi	r23,r16,1
 800268c:	d8001345 	stb	zero,77(sp)
 8002690:	0009883a 	mov	r4,zero
 8002694:	000b883a 	mov	r5,zero
 8002698:	023fffc4 	movi	r8,-1
 800269c:	0021883a 	mov	r16,zero
 80026a0:	0019883a 	mov	r12,zero
 80026a4:	bdc00044 	addi	r23,r23,1
 80026a8:	5839883a 	mov	fp,r11
 80026ac:	e0bff804 	addi	r2,fp,-32
 80026b0:	10c01668 	cmpgeui	r3,r2,89
 80026b4:	18006c1e 	bne	r3,zero,8002868 <___vfprintf_internal_r+0x2f4>
 80026b8:	100490ba 	slli	r2,r2,2
 80026bc:	00c20034 	movhi	r3,2048
 80026c0:	10c7883a 	add	r3,r2,r3
 80026c4:	1889b317 	ldw	r2,9932(r3)
 80026c8:	1000683a 	jmp	r2
 80026cc:	0800301c 	xori	zero,at,192
 80026d0:	08002868 	cmpgeui	zero,at,161
 80026d4:	08002868 	cmpgeui	zero,at,161
 80026d8:	08003010 	cmplti	zero,at,192
 80026dc:	08002868 	cmpgeui	zero,at,161
 80026e0:	08002868 	cmpgeui	zero,at,161
 80026e4:	08002868 	cmpgeui	zero,at,161
 80026e8:	08002868 	cmpgeui	zero,at,161
 80026ec:	08002868 	cmpgeui	zero,at,161
 80026f0:	08002868 	cmpgeui	zero,at,161
 80026f4:	08002fe8 	cmpgeui	zero,at,191
 80026f8:	08002fd8 	cmpnei	zero,at,191
 80026fc:	08002868 	cmpgeui	zero,at,161
 8002700:	08002fc0 	call	8002fc <__alt_mem_SDRAM-0x77ffd04>
 8002704:	08002f74 	orhi	zero,at,189
 8002708:	08002868 	cmpgeui	zero,at,161
 800270c:	08002f68 	cmpgeui	zero,at,189
 8002710:	08002830 	cmpltui	zero,at,160
 8002714:	08002830 	cmpltui	zero,at,160
 8002718:	08002830 	cmpltui	zero,at,160
 800271c:	08002830 	cmpltui	zero,at,160
 8002720:	08002830 	cmpltui	zero,at,160
 8002724:	08002830 	cmpltui	zero,at,160
 8002728:	08002830 	cmpltui	zero,at,160
 800272c:	08002830 	cmpltui	zero,at,160
 8002730:	08002830 	cmpltui	zero,at,160
 8002734:	08002868 	cmpgeui	zero,at,161
 8002738:	08002868 	cmpgeui	zero,at,161
 800273c:	08002868 	cmpgeui	zero,at,161
 8002740:	08002868 	cmpgeui	zero,at,161
 8002744:	08002868 	cmpgeui	zero,at,161
 8002748:	08002868 	cmpgeui	zero,at,161
 800274c:	08002868 	cmpgeui	zero,at,161
 8002750:	08002868 	cmpgeui	zero,at,161
 8002754:	08002868 	cmpgeui	zero,at,161
 8002758:	08002868 	cmpgeui	zero,at,161
 800275c:	08002e80 	call	8002e8 <__alt_mem_SDRAM-0x77ffd18>
 8002760:	08002b4c 	andi	zero,at,173
 8002764:	08002868 	cmpgeui	zero,at,161
 8002768:	08002b4c 	andi	zero,at,173
 800276c:	08002868 	cmpgeui	zero,at,161
 8002770:	08002868 	cmpgeui	zero,at,161
 8002774:	08002868 	cmpgeui	zero,at,161
 8002778:	08002868 	cmpgeui	zero,at,161
 800277c:	08002e74 	orhi	zero,at,185
 8002780:	08002868 	cmpgeui	zero,at,161
 8002784:	08002868 	cmpgeui	zero,at,161
 8002788:	08002a80 	call	8002a8 <__alt_mem_SDRAM-0x77ffd58>
 800278c:	08002868 	cmpgeui	zero,at,161
 8002790:	08002868 	cmpgeui	zero,at,161
 8002794:	08002868 	cmpgeui	zero,at,161
 8002798:	08002868 	cmpgeui	zero,at,161
 800279c:	08002868 	cmpgeui	zero,at,161
 80027a0:	08002a58 	cmpnei	zero,at,169
 80027a4:	08002868 	cmpgeui	zero,at,161
 80027a8:	08002868 	cmpgeui	zero,at,161
 80027ac:	08002e2c 	andhi	zero,at,184
 80027b0:	08002868 	cmpgeui	zero,at,161
 80027b4:	08002868 	cmpgeui	zero,at,161
 80027b8:	08002868 	cmpgeui	zero,at,161
 80027bc:	08002868 	cmpgeui	zero,at,161
 80027c0:	08002868 	cmpgeui	zero,at,161
 80027c4:	08002868 	cmpgeui	zero,at,161
 80027c8:	08002868 	cmpgeui	zero,at,161
 80027cc:	08002868 	cmpgeui	zero,at,161
 80027d0:	08002868 	cmpgeui	zero,at,161
 80027d4:	08002868 	cmpgeui	zero,at,161
 80027d8:	08002e04 	addi	zero,at,184
 80027dc:	08002d60 	cmpeqi	zero,at,181
 80027e0:	08002b4c 	andi	zero,at,173
 80027e4:	08002b4c 	andi	zero,at,173
 80027e8:	08002b4c 	andi	zero,at,173
 80027ec:	08002df8 	rdprs	zero,at,183
 80027f0:	08002d60 	cmpeqi	zero,at,181
 80027f4:	08002868 	cmpgeui	zero,at,161
 80027f8:	08002868 	cmpgeui	zero,at,161
 80027fc:	08003170 	cmpltui	zero,at,197
 8002800:	08002868 	cmpgeui	zero,at,161
 8002804:	08003134 	orhi	zero,at,196
 8002808:	08002a84 	addi	zero,at,170
 800280c:	080030f4 	orhi	zero,at,195
 8002810:	080030e8 	cmpgeui	zero,at,195
 8002814:	08002868 	cmpgeui	zero,at,161
 8002818:	08003090 	cmplti	zero,at,194
 800281c:	08002868 	cmpgeui	zero,at,161
 8002820:	08002a5c 	xori	zero,at,169
 8002824:	08002868 	cmpgeui	zero,at,161
 8002828:	08002868 	cmpgeui	zero,at,161
 800282c:	08003048 	cmpgei	zero,at,193
 8002830:	0021883a 	mov	r16,zero
 8002834:	e0fff404 	addi	r3,fp,-48
 8002838:	800490ba 	slli	r2,r16,2
 800283c:	bf000007 	ldb	fp,0(r23)
 8002840:	bdc00044 	addi	r23,r23,1
 8002844:	1421883a 	add	r16,r2,r16
 8002848:	8421883a 	add	r16,r16,r16
 800284c:	1c21883a 	add	r16,r3,r16
 8002850:	e0fff404 	addi	r3,fp,-48
 8002854:	188002b0 	cmpltui	r2,r3,10
 8002858:	103ff71e 	bne	r2,zero,8002838 <___vfprintf_internal_r+0x2c4>
 800285c:	e0bff804 	addi	r2,fp,-32
 8002860:	10c01668 	cmpgeui	r3,r2,89
 8002864:	183f9426 	beq	r3,zero,80026b8 <___vfprintf_internal_r+0x144>
 8002868:	21003fcc 	andi	r4,r4,255
 800286c:	2006871e 	bne	r4,zero,800428c <___vfprintf_internal_r+0x1d18>
 8002870:	e0004d26 	beq	fp,zero,80029a8 <___vfprintf_internal_r+0x434>
 8002874:	df001d05 	stb	fp,116(sp)
 8002878:	d8001345 	stb	zero,77(sp)
 800287c:	05000044 	movi	r20,1
 8002880:	05400044 	movi	r21,1
 8002884:	dc401d04 	addi	r17,sp,116
 8002888:	db000415 	stw	r12,16(sp)
 800288c:	0011883a 	mov	r8,zero
 8002890:	d8000715 	stw	zero,28(sp)
 8002894:	d8800417 	ldw	r2,16(sp)
 8002898:	1380008c 	andi	r14,r2,2
 800289c:	70000126 	beq	r14,zero,80028a4 <___vfprintf_internal_r+0x330>
 80028a0:	a5000084 	addi	r20,r20,2
 80028a4:	d8800417 	ldw	r2,16(sp)
 80028a8:	d8c01c17 	ldw	r3,112(sp)
 80028ac:	1340210c 	andi	r13,r2,132
 80028b0:	6800021e 	bne	r13,zero,80028bc <___vfprintf_internal_r+0x348>
 80028b4:	850fc83a 	sub	r7,r16,r20
 80028b8:	01c34516 	blt	zero,r7,80035d0 <___vfprintf_internal_r+0x105c>
 80028bc:	d8801347 	ldb	r2,77(sp)
 80028c0:	10000c26 	beq	r2,zero,80028f4 <___vfprintf_internal_r+0x380>
 80028c4:	d8801b17 	ldw	r2,108(sp)
 80028c8:	d9001344 	addi	r4,sp,77
 80028cc:	18c00044 	addi	r3,r3,1
 80028d0:	10800044 	addi	r2,r2,1
 80028d4:	b1000015 	stw	r4,0(r22)
 80028d8:	01000044 	movi	r4,1
 80028dc:	d8801b15 	stw	r2,108(sp)
 80028e0:	b1000115 	stw	r4,4(r22)
 80028e4:	d8c01c15 	stw	r3,112(sp)
 80028e8:	10800208 	cmpgei	r2,r2,8
 80028ec:	1003791e 	bne	r2,zero,80036d4 <___vfprintf_internal_r+0x1160>
 80028f0:	b5800204 	addi	r22,r22,8
 80028f4:	70000c26 	beq	r14,zero,8002928 <___vfprintf_internal_r+0x3b4>
 80028f8:	d8801b17 	ldw	r2,108(sp)
 80028fc:	d9001384 	addi	r4,sp,78
 8002900:	18c00084 	addi	r3,r3,2
 8002904:	10800044 	addi	r2,r2,1
 8002908:	b1000015 	stw	r4,0(r22)
 800290c:	01000084 	movi	r4,2
 8002910:	d8801b15 	stw	r2,108(sp)
 8002914:	b1000115 	stw	r4,4(r22)
 8002918:	d8c01c15 	stw	r3,112(sp)
 800291c:	10800208 	cmpgei	r2,r2,8
 8002920:	10037a1e 	bne	r2,zero,800370c <___vfprintf_internal_r+0x1198>
 8002924:	b5800204 	addi	r22,r22,8
 8002928:	6b402018 	cmpnei	r13,r13,128
 800292c:	68025b26 	beq	r13,zero,800329c <___vfprintf_internal_r+0xd28>
 8002930:	4551c83a 	sub	r8,r8,r21
 8002934:	02029316 	blt	zero,r8,8003384 <___vfprintf_internal_r+0xe10>
 8002938:	d8800417 	ldw	r2,16(sp)
 800293c:	1080400c 	andi	r2,r2,256
 8002940:	1002101e 	bne	r2,zero,8003184 <___vfprintf_internal_r+0xc10>
 8002944:	d8801b17 	ldw	r2,108(sp)
 8002948:	1d47883a 	add	r3,r3,r21
 800294c:	b4400015 	stw	r17,0(r22)
 8002950:	10800044 	addi	r2,r2,1
 8002954:	b5400115 	stw	r21,4(r22)
 8002958:	d8801b15 	stw	r2,108(sp)
 800295c:	d8c01c15 	stw	r3,112(sp)
 8002960:	10800208 	cmpgei	r2,r2,8
 8002964:	1003101e 	bne	r2,zero,80035a8 <___vfprintf_internal_r+0x1034>
 8002968:	b5800204 	addi	r22,r22,8
 800296c:	d8800417 	ldw	r2,16(sp)
 8002970:	1440010c 	andi	r17,r2,4
 8002974:	88000226 	beq	r17,zero,8002980 <___vfprintf_internal_r+0x40c>
 8002978:	8523c83a 	sub	r17,r16,r20
 800297c:	0440c616 	blt	zero,r17,8002c98 <___vfprintf_internal_r+0x724>
 8002980:	8500010e 	bge	r16,r20,8002988 <___vfprintf_internal_r+0x414>
 8002984:	a021883a 	mov	r16,r20
 8002988:	d8800517 	ldw	r2,20(sp)
 800298c:	1405883a 	add	r2,r2,r16
 8002990:	d8800515 	stw	r2,20(sp)
 8002994:	1802c21e 	bne	r3,zero,80034a0 <___vfprintf_internal_r+0xf2c>
 8002998:	b8800007 	ldb	r2,0(r23)
 800299c:	d8001b15 	stw	zero,108(sp)
 80029a0:	dd802704 	addi	r22,sp,156
 80029a4:	103f291e 	bne	r2,zero,800264c <___vfprintf_internal_r+0xd8>
 80029a8:	d8801c17 	ldw	r2,112(sp)
 80029ac:	1006391e 	bne	r2,zero,8004294 <___vfprintf_internal_r+0x1d20>
 80029b0:	9080030b 	ldhu	r2,12(r18)
 80029b4:	1080100c 	andi	r2,r2,64
 80029b8:	1006cf1e 	bne	r2,zero,80044f8 <___vfprintf_internal_r+0x1f84>
 80029bc:	d8800517 	ldw	r2,20(sp)
 80029c0:	dfc04017 	ldw	ra,256(sp)
 80029c4:	df003f17 	ldw	fp,252(sp)
 80029c8:	ddc03e17 	ldw	r23,248(sp)
 80029cc:	dd803d17 	ldw	r22,244(sp)
 80029d0:	dd403c17 	ldw	r21,240(sp)
 80029d4:	dd003b17 	ldw	r20,236(sp)
 80029d8:	dcc03a17 	ldw	r19,232(sp)
 80029dc:	dc803917 	ldw	r18,228(sp)
 80029e0:	dc403817 	ldw	r17,224(sp)
 80029e4:	dc003717 	ldw	r16,220(sp)
 80029e8:	dec04104 	addi	sp,sp,260
 80029ec:	f800283a 	ret
 80029f0:	900b883a 	mov	r5,r18
 80029f4:	9809883a 	mov	r4,r19
 80029f8:	80047540 	call	8004754 <__swsetup_r>
 80029fc:	1006be1e 	bne	r2,zero,80044f8 <___vfprintf_internal_r+0x1f84>
 8002a00:	9080030b 	ldhu	r2,12(r18)
 8002a04:	1080068c 	andi	r2,r2,26
 8002a08:	10800298 	cmpnei	r2,r2,10
 8002a0c:	103f011e 	bne	r2,zero,8002614 <___vfprintf_internal_r+0xa0>
 8002a10:	9080038f 	ldh	r2,14(r18)
 8002a14:	103eff16 	blt	r2,zero,8002614 <___vfprintf_internal_r+0xa0>
 8002a18:	d9c00617 	ldw	r7,24(sp)
 8002a1c:	b00d883a 	mov	r6,r22
 8002a20:	900b883a 	mov	r5,r18
 8002a24:	9809883a 	mov	r4,r19
 8002a28:	dfc04017 	ldw	ra,256(sp)
 8002a2c:	df003f17 	ldw	fp,252(sp)
 8002a30:	ddc03e17 	ldw	r23,248(sp)
 8002a34:	dd803d17 	ldw	r22,244(sp)
 8002a38:	dd403c17 	ldw	r21,240(sp)
 8002a3c:	dd003b17 	ldw	r20,236(sp)
 8002a40:	dcc03a17 	ldw	r19,232(sp)
 8002a44:	dc803917 	ldw	r18,228(sp)
 8002a48:	dc403817 	ldw	r17,224(sp)
 8002a4c:	dc003717 	ldw	r16,220(sp)
 8002a50:	dec04104 	addi	sp,sp,260
 8002a54:	80046941 	jmpi	8004694 <__sbprintf>
 8002a58:	63000414 	ori	r12,r12,16
 8002a5c:	6080080c 	andi	r2,r12,32
 8002a60:	10008126 	beq	r2,zero,8002c68 <___vfprintf_internal_r+0x6f4>
 8002a64:	d8c00617 	ldw	r3,24(sp)
 8002a68:	00800044 	movi	r2,1
 8002a6c:	1d000017 	ldw	r20,0(r3)
 8002a70:	1d400117 	ldw	r21,4(r3)
 8002a74:	18c00204 	addi	r3,r3,8
 8002a78:	d8c00615 	stw	r3,24(sp)
 8002a7c:	00000906 	br	8002aa4 <___vfprintf_internal_r+0x530>
 8002a80:	63000414 	ori	r12,r12,16
 8002a84:	6080080c 	andi	r2,r12,32
 8002a88:	10006b26 	beq	r2,zero,8002c38 <___vfprintf_internal_r+0x6c4>
 8002a8c:	d8c00617 	ldw	r3,24(sp)
 8002a90:	0005883a 	mov	r2,zero
 8002a94:	1d000017 	ldw	r20,0(r3)
 8002a98:	1d400117 	ldw	r21,4(r3)
 8002a9c:	18c00204 	addi	r3,r3,8
 8002aa0:	d8c00615 	stw	r3,24(sp)
 8002aa4:	d8001345 	stb	zero,77(sp)
 8002aa8:	40ffffe0 	cmpeqi	r3,r8,-1
 8002aac:	001b883a 	mov	r13,zero
 8002ab0:	18010e1e 	bne	r3,zero,8002eec <___vfprintf_internal_r+0x978>
 8002ab4:	047fdfc4 	movi	r17,-129
 8002ab8:	6448703a 	and	r4,r12,r17
 8002abc:	a546b03a 	or	r3,r20,r21
 8002ac0:	d9000415 	stw	r4,16(sp)
 8002ac4:	1802c01e 	bne	r3,zero,80035c8 <___vfprintf_internal_r+0x1054>
 8002ac8:	40025f1e 	bne	r8,zero,8003448 <___vfprintf_internal_r+0xed4>
 8002acc:	1003751e 	bne	r2,zero,80038a4 <___vfprintf_internal_r+0x1330>
 8002ad0:	6540004c 	andi	r21,r12,1
 8002ad4:	a803b026 	beq	r21,zero,8003998 <___vfprintf_internal_r+0x1424>
 8002ad8:	00800c04 	movi	r2,48
 8002adc:	d88026c5 	stb	r2,155(sp)
 8002ae0:	dc4026c4 	addi	r17,sp,155
 8002ae4:	0000ba06 	br	8002dd0 <___vfprintf_internal_r+0x85c>
 8002ae8:	85e3c83a 	sub	r17,r16,r23
 8002aec:	85ffae26 	beq	r16,r23,80029a8 <___vfprintf_internal_r+0x434>
 8002af0:	d8c01c17 	ldw	r3,112(sp)
 8002af4:	d8801b17 	ldw	r2,108(sp)
 8002af8:	b5c00015 	stw	r23,0(r22)
 8002afc:	1c47883a 	add	r3,r3,r17
 8002b00:	10800044 	addi	r2,r2,1
 8002b04:	d8801b15 	stw	r2,108(sp)
 8002b08:	b4400115 	stw	r17,4(r22)
 8002b0c:	d8c01c15 	stw	r3,112(sp)
 8002b10:	10800208 	cmpgei	r2,r2,8
 8002b14:	1000061e 	bne	r2,zero,8002b30 <___vfprintf_internal_r+0x5bc>
 8002b18:	b5800204 	addi	r22,r22,8
 8002b1c:	d8c00517 	ldw	r3,20(sp)
 8002b20:	80800003 	ldbu	r2,0(r16)
 8002b24:	1c47883a 	add	r3,r3,r17
 8002b28:	d8c00515 	stw	r3,20(sp)
 8002b2c:	003ed106 	br	8002674 <___vfprintf_internal_r+0x100>
 8002b30:	d9801a04 	addi	r6,sp,104
 8002b34:	900b883a 	mov	r5,r18
 8002b38:	9809883a 	mov	r4,r19
 8002b3c:	8009b0c0 	call	8009b0c <__sprint_r>
 8002b40:	103f9b1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8002b44:	dd802704 	addi	r22,sp,156
 8002b48:	003ff406 	br	8002b1c <___vfprintf_internal_r+0x5a8>
 8002b4c:	21003fcc 	andi	r4,r4,255
 8002b50:	2006671e 	bne	r4,zero,80044f0 <___vfprintf_internal_r+0x1f7c>
 8002b54:	d8c00617 	ldw	r3,24(sp)
 8002b58:	6080020c 	andi	r2,r12,8
 8002b5c:	19000204 	addi	r4,r3,8
 8002b60:	d9000e15 	stw	r4,56(sp)
 8002b64:	1003a71e 	bne	r2,zero,8003a04 <___vfprintf_internal_r+0x1490>
 8002b68:	d8800617 	ldw	r2,24(sp)
 8002b6c:	10c00017 	ldw	r3,0(r2)
 8002b70:	10800117 	ldw	r2,4(r2)
 8002b74:	d8c00915 	stw	r3,36(sp)
 8002b78:	d8800a15 	stw	r2,40(sp)
 8002b7c:	dd400a17 	ldw	r21,40(sp)
 8002b80:	dd000917 	ldw	r20,36(sp)
 8002b84:	00a00034 	movhi	r2,32768
 8002b88:	10bfffc4 	addi	r2,r2,-1
 8002b8c:	a8a2703a 	and	r17,r21,r2
 8002b90:	01dffc34 	movhi	r7,32752
 8002b94:	01bfffc4 	movi	r6,-1
 8002b98:	39ffffc4 	addi	r7,r7,-1
 8002b9c:	a009883a 	mov	r4,r20
 8002ba0:	880b883a 	mov	r5,r17
 8002ba4:	da000615 	stw	r8,24(sp)
 8002ba8:	db000415 	stw	r12,16(sp)
 8002bac:	800f33c0 	call	800f33c <__unorddf2>
 8002bb0:	db000417 	ldw	r12,16(sp)
 8002bb4:	da000617 	ldw	r8,24(sp)
 8002bb8:	1004641e 	bne	r2,zero,8003d4c <___vfprintf_internal_r+0x17d8>
 8002bbc:	01dffc34 	movhi	r7,32752
 8002bc0:	01bfffc4 	movi	r6,-1
 8002bc4:	39ffffc4 	addi	r7,r7,-1
 8002bc8:	a009883a 	mov	r4,r20
 8002bcc:	880b883a 	mov	r5,r17
 8002bd0:	800e1f40 	call	800e1f4 <__ledf2>
 8002bd4:	db000417 	ldw	r12,16(sp)
 8002bd8:	da000617 	ldw	r8,24(sp)
 8002bdc:	00845b0e 	bge	zero,r2,8003d4c <___vfprintf_internal_r+0x17d8>
 8002be0:	000d883a 	mov	r6,zero
 8002be4:	000f883a 	mov	r7,zero
 8002be8:	a009883a 	mov	r4,r20
 8002bec:	a80b883a 	mov	r5,r21
 8002bf0:	800e1f40 	call	800e1f4 <__ledf2>
 8002bf4:	db000417 	ldw	r12,16(sp)
 8002bf8:	10059116 	blt	r2,zero,8004240 <___vfprintf_internal_r+0x1ccc>
 8002bfc:	db401343 	ldbu	r13,77(sp)
 8002c00:	e0801210 	cmplti	r2,fp,72
 8002c04:	1005391e 	bne	r2,zero,80040ec <___vfprintf_internal_r+0x1b78>
 8002c08:	04420074 	movhi	r17,2049
 8002c0c:	8c497504 	addi	r17,r17,9684
 8002c10:	00bfdfc4 	movi	r2,-129
 8002c14:	6084703a 	and	r2,r12,r2
 8002c18:	d8800415 	stw	r2,16(sp)
 8002c1c:	d8800e17 	ldw	r2,56(sp)
 8002c20:	050000c4 	movi	r20,3
 8002c24:	054000c4 	movi	r21,3
 8002c28:	d8800615 	stw	r2,24(sp)
 8002c2c:	0011883a 	mov	r8,zero
 8002c30:	d8000715 	stw	zero,28(sp)
 8002c34:	00006a06 	br	8002de0 <___vfprintf_internal_r+0x86c>
 8002c38:	d9000617 	ldw	r4,24(sp)
 8002c3c:	6080040c 	andi	r2,r12,16
 8002c40:	20c00104 	addi	r3,r4,4
 8002c44:	10036a1e 	bne	r2,zero,80039f0 <___vfprintf_internal_r+0x147c>
 8002c48:	6080100c 	andi	r2,r12,64
 8002c4c:	10052126 	beq	r2,zero,80040d4 <___vfprintf_internal_r+0x1b60>
 8002c50:	d8800617 	ldw	r2,24(sp)
 8002c54:	002b883a 	mov	r21,zero
 8002c58:	d8c00615 	stw	r3,24(sp)
 8002c5c:	1500000b 	ldhu	r20,0(r2)
 8002c60:	0005883a 	mov	r2,zero
 8002c64:	003f8f06 	br	8002aa4 <___vfprintf_internal_r+0x530>
 8002c68:	d9000617 	ldw	r4,24(sp)
 8002c6c:	6080040c 	andi	r2,r12,16
 8002c70:	20c00104 	addi	r3,r4,4
 8002c74:	1003501e 	bne	r2,zero,80039b8 <___vfprintf_internal_r+0x1444>
 8002c78:	6080100c 	andi	r2,r12,64
 8002c7c:	10055926 	beq	r2,zero,80041e4 <___vfprintf_internal_r+0x1c70>
 8002c80:	d8800617 	ldw	r2,24(sp)
 8002c84:	002b883a 	mov	r21,zero
 8002c88:	d8c00615 	stw	r3,24(sp)
 8002c8c:	1500000b 	ldhu	r20,0(r2)
 8002c90:	00800044 	movi	r2,1
 8002c94:	003f8306 	br	8002aa4 <___vfprintf_internal_r+0x530>
 8002c98:	03020074 	movhi	r12,2049
 8002c9c:	89000450 	cmplti	r4,r17,17
 8002ca0:	d8801b17 	ldw	r2,108(sp)
 8002ca4:	63098904 	addi	r12,r12,9764
 8002ca8:	20001b1e 	bne	r4,zero,8002d18 <___vfprintf_internal_r+0x7a4>
 8002cac:	05400404 	movi	r21,16
 8002cb0:	6039883a 	mov	fp,r12
 8002cb4:	00000406 	br	8002cc8 <___vfprintf_internal_r+0x754>
 8002cb8:	8c7ffc04 	addi	r17,r17,-16
 8002cbc:	89000448 	cmpgei	r4,r17,17
 8002cc0:	b5800204 	addi	r22,r22,8
 8002cc4:	20001326 	beq	r4,zero,8002d14 <___vfprintf_internal_r+0x7a0>
 8002cc8:	10800044 	addi	r2,r2,1
 8002ccc:	18c00404 	addi	r3,r3,16
 8002cd0:	b7000015 	stw	fp,0(r22)
 8002cd4:	b5400115 	stw	r21,4(r22)
 8002cd8:	d8c01c15 	stw	r3,112(sp)
 8002cdc:	d8801b15 	stw	r2,108(sp)
 8002ce0:	11000208 	cmpgei	r4,r2,8
 8002ce4:	203ff426 	beq	r4,zero,8002cb8 <___vfprintf_internal_r+0x744>
 8002ce8:	d9801a04 	addi	r6,sp,104
 8002cec:	900b883a 	mov	r5,r18
 8002cf0:	9809883a 	mov	r4,r19
 8002cf4:	8009b0c0 	call	8009b0c <__sprint_r>
 8002cf8:	103f2d1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8002cfc:	8c7ffc04 	addi	r17,r17,-16
 8002d00:	89000448 	cmpgei	r4,r17,17
 8002d04:	d8c01c17 	ldw	r3,112(sp)
 8002d08:	d8801b17 	ldw	r2,108(sp)
 8002d0c:	dd802704 	addi	r22,sp,156
 8002d10:	203fed1e 	bne	r4,zero,8002cc8 <___vfprintf_internal_r+0x754>
 8002d14:	e019883a 	mov	r12,fp
 8002d18:	10800044 	addi	r2,r2,1
 8002d1c:	1c47883a 	add	r3,r3,r17
 8002d20:	d8801b15 	stw	r2,108(sp)
 8002d24:	b3000015 	stw	r12,0(r22)
 8002d28:	b4400115 	stw	r17,4(r22)
 8002d2c:	d8c01c15 	stw	r3,112(sp)
 8002d30:	10800210 	cmplti	r2,r2,8
 8002d34:	103f121e 	bne	r2,zero,8002980 <___vfprintf_internal_r+0x40c>
 8002d38:	d9801a04 	addi	r6,sp,104
 8002d3c:	900b883a 	mov	r5,r18
 8002d40:	9809883a 	mov	r4,r19
 8002d44:	8009b0c0 	call	8009b0c <__sprint_r>
 8002d48:	103f191e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8002d4c:	d8c01c17 	ldw	r3,112(sp)
 8002d50:	003f0b06 	br	8002980 <___vfprintf_internal_r+0x40c>
 8002d54:	9809883a 	mov	r4,r19
 8002d58:	80068900 	call	8006890 <__sinit>
 8002d5c:	003e1d06 	br	80025d4 <___vfprintf_internal_r+0x60>
 8002d60:	21003fcc 	andi	r4,r4,255
 8002d64:	2005de1e 	bne	r4,zero,80044e0 <___vfprintf_internal_r+0x1f6c>
 8002d68:	6080080c 	andi	r2,r12,32
 8002d6c:	10004926 	beq	r2,zero,8002e94 <___vfprintf_internal_r+0x920>
 8002d70:	d8c00617 	ldw	r3,24(sp)
 8002d74:	18800117 	ldw	r2,4(r3)
 8002d78:	1d000017 	ldw	r20,0(r3)
 8002d7c:	18c00204 	addi	r3,r3,8
 8002d80:	d8c00615 	stw	r3,24(sp)
 8002d84:	102b883a 	mov	r21,r2
 8002d88:	10004e16 	blt	r2,zero,8002ec4 <___vfprintf_internal_r+0x950>
 8002d8c:	40bfffd8 	cmpnei	r2,r8,-1
 8002d90:	db401343 	ldbu	r13,77(sp)
 8002d94:	10000626 	beq	r2,zero,8002db0 <___vfprintf_internal_r+0x83c>
 8002d98:	047fdfc4 	movi	r17,-129
 8002d9c:	6446703a 	and	r3,r12,r17
 8002da0:	a544b03a 	or	r2,r20,r21
 8002da4:	d8c00415 	stw	r3,16(sp)
 8002da8:	1002bd26 	beq	r2,zero,80038a0 <___vfprintf_internal_r+0x132c>
 8002dac:	db000417 	ldw	r12,16(sp)
 8002db0:	a803701e 	bne	r21,zero,8003b74 <___vfprintf_internal_r+0x1600>
 8002db4:	a08002a8 	cmpgeui	r2,r20,10
 8002db8:	10036e1e 	bne	r2,zero,8003b74 <___vfprintf_internal_r+0x1600>
 8002dbc:	a5000c04 	addi	r20,r20,48
 8002dc0:	dd0026c5 	stb	r20,155(sp)
 8002dc4:	db000415 	stw	r12,16(sp)
 8002dc8:	05400044 	movi	r21,1
 8002dcc:	dc4026c4 	addi	r17,sp,155
 8002dd0:	4029883a 	mov	r20,r8
 8002dd4:	4540010e 	bge	r8,r21,8002ddc <___vfprintf_internal_r+0x868>
 8002dd8:	a829883a 	mov	r20,r21
 8002ddc:	d8000715 	stw	zero,28(sp)
 8002de0:	6b403fcc 	andi	r13,r13,255
 8002de4:	6b40201c 	xori	r13,r13,128
 8002de8:	6b7fe004 	addi	r13,r13,-128
 8002dec:	683ea926 	beq	r13,zero,8002894 <___vfprintf_internal_r+0x320>
 8002df0:	a5000044 	addi	r20,r20,1
 8002df4:	003ea706 	br	8002894 <___vfprintf_internal_r+0x320>
 8002df8:	bac00007 	ldb	r11,0(r23)
 8002dfc:	63001014 	ori	r12,r12,64
 8002e00:	003e2806 	br	80026a4 <___vfprintf_internal_r+0x130>
 8002e04:	d8c00617 	ldw	r3,24(sp)
 8002e08:	d8001345 	stb	zero,77(sp)
 8002e0c:	05000044 	movi	r20,1
 8002e10:	18800017 	ldw	r2,0(r3)
 8002e14:	18c00104 	addi	r3,r3,4
 8002e18:	d8c00615 	stw	r3,24(sp)
 8002e1c:	d8801d05 	stb	r2,116(sp)
 8002e20:	05400044 	movi	r21,1
 8002e24:	dc401d04 	addi	r17,sp,116
 8002e28:	003e9706 	br	8002888 <___vfprintf_internal_r+0x314>
 8002e2c:	21003fcc 	andi	r4,r4,255
 8002e30:	2005a71e 	bne	r4,zero,80044d0 <___vfprintf_internal_r+0x1f5c>
 8002e34:	00820074 	movhi	r2,2049
 8002e38:	10897d04 	addi	r2,r2,9716
 8002e3c:	d8800c15 	stw	r2,48(sp)
 8002e40:	6080080c 	andi	r2,r12,32
 8002e44:	10008726 	beq	r2,zero,8003064 <___vfprintf_internal_r+0xaf0>
 8002e48:	d8800617 	ldw	r2,24(sp)
 8002e4c:	15000017 	ldw	r20,0(r2)
 8002e50:	15400117 	ldw	r21,4(r2)
 8002e54:	10800204 	addi	r2,r2,8
 8002e58:	d8800615 	stw	r2,24(sp)
 8002e5c:	6080004c 	andi	r2,r12,1
 8002e60:	10000226 	beq	r2,zero,8002e6c <___vfprintf_internal_r+0x8f8>
 8002e64:	a544b03a 	or	r2,r20,r21
 8002e68:	1002cd1e 	bne	r2,zero,80039a0 <___vfprintf_internal_r+0x142c>
 8002e6c:	00800084 	movi	r2,2
 8002e70:	003f0c06 	br	8002aa4 <___vfprintf_internal_r+0x530>
 8002e74:	bac00007 	ldb	r11,0(r23)
 8002e78:	63000214 	ori	r12,r12,8
 8002e7c:	003e0906 	br	80026a4 <___vfprintf_internal_r+0x130>
 8002e80:	21003fcc 	andi	r4,r4,255
 8002e84:	2005981e 	bne	r4,zero,80044e8 <___vfprintf_internal_r+0x1f74>
 8002e88:	63000414 	ori	r12,r12,16
 8002e8c:	6080080c 	andi	r2,r12,32
 8002e90:	103fb71e 	bne	r2,zero,8002d70 <___vfprintf_internal_r+0x7fc>
 8002e94:	d9000617 	ldw	r4,24(sp)
 8002e98:	6080040c 	andi	r2,r12,16
 8002e9c:	20c00104 	addi	r3,r4,4
 8002ea0:	1002dd1e 	bne	r2,zero,8003a18 <___vfprintf_internal_r+0x14a4>
 8002ea4:	6080100c 	andi	r2,r12,64
 8002ea8:	10048426 	beq	r2,zero,80040bc <___vfprintf_internal_r+0x1b48>
 8002eac:	d8800617 	ldw	r2,24(sp)
 8002eb0:	d8c00615 	stw	r3,24(sp)
 8002eb4:	1500000f 	ldh	r20,0(r2)
 8002eb8:	a02bd7fa 	srai	r21,r20,31
 8002ebc:	a805883a 	mov	r2,r21
 8002ec0:	103fb20e 	bge	r2,zero,8002d8c <___vfprintf_internal_r+0x818>
 8002ec4:	a004c03a 	cmpne	r2,r20,zero
 8002ec8:	056bc83a 	sub	r21,zero,r21
 8002ecc:	a8abc83a 	sub	r21,r21,r2
 8002ed0:	00800b44 	movi	r2,45
 8002ed4:	d8801345 	stb	r2,77(sp)
 8002ed8:	40ffffe0 	cmpeqi	r3,r8,-1
 8002edc:	0529c83a 	sub	r20,zero,r20
 8002ee0:	03400b44 	movi	r13,45
 8002ee4:	00800044 	movi	r2,1
 8002ee8:	183ef226 	beq	r3,zero,8002ab4 <___vfprintf_internal_r+0x540>
 8002eec:	10c00060 	cmpeqi	r3,r2,1
 8002ef0:	183faf1e 	bne	r3,zero,8002db0 <___vfprintf_internal_r+0x83c>
 8002ef4:	108000a0 	cmpeqi	r2,r2,2
 8002ef8:	1001581e 	bne	r2,zero,800345c <___vfprintf_internal_r+0xee8>
 8002efc:	dc402704 	addi	r17,sp,156
 8002f00:	a006d0fa 	srli	r3,r20,3
 8002f04:	a808977a 	slli	r4,r21,29
 8002f08:	a82ad0fa 	srli	r21,r21,3
 8002f0c:	a50001cc 	andi	r20,r20,7
 8002f10:	a0800c04 	addi	r2,r20,48
 8002f14:	20e8b03a 	or	r20,r4,r3
 8002f18:	88bfffc5 	stb	r2,-1(r17)
 8002f1c:	a546b03a 	or	r3,r20,r21
 8002f20:	880b883a 	mov	r5,r17
 8002f24:	8c7fffc4 	addi	r17,r17,-1
 8002f28:	183ff51e 	bne	r3,zero,8002f00 <___vfprintf_internal_r+0x98c>
 8002f2c:	60c0004c 	andi	r3,r12,1
 8002f30:	18015726 	beq	r3,zero,8003490 <___vfprintf_internal_r+0xf1c>
 8002f34:	10803fcc 	andi	r2,r2,255
 8002f38:	1080201c 	xori	r2,r2,128
 8002f3c:	10bfe004 	addi	r2,r2,-128
 8002f40:	10800c18 	cmpnei	r2,r2,48
 8002f44:	10015226 	beq	r2,zero,8003490 <___vfprintf_internal_r+0xf1c>
 8002f48:	00800c04 	movi	r2,48
 8002f4c:	297fff84 	addi	r5,r5,-2
 8002f50:	88bfffc5 	stb	r2,-1(r17)
 8002f54:	d8802704 	addi	r2,sp,156
 8002f58:	116bc83a 	sub	r21,r2,r5
 8002f5c:	db000415 	stw	r12,16(sp)
 8002f60:	2823883a 	mov	r17,r5
 8002f64:	003f9a06 	br	8002dd0 <___vfprintf_internal_r+0x85c>
 8002f68:	bac00007 	ldb	r11,0(r23)
 8002f6c:	63002014 	ori	r12,r12,128
 8002f70:	003dcc06 	br	80026a4 <___vfprintf_internal_r+0x130>
 8002f74:	bf000007 	ldb	fp,0(r23)
 8002f78:	b8800044 	addi	r2,r23,1
 8002f7c:	e0c00aa0 	cmpeqi	r3,fp,42
 8002f80:	1805b11e 	bne	r3,zero,8004648 <___vfprintf_internal_r+0x20d4>
 8002f84:	e0fff404 	addi	r3,fp,-48
 8002f88:	198002b0 	cmpltui	r6,r3,10
 8002f8c:	102f883a 	mov	r23,r2
 8002f90:	0011883a 	mov	r8,zero
 8002f94:	303dc526 	beq	r6,zero,80026ac <___vfprintf_internal_r+0x138>
 8002f98:	400490ba 	slli	r2,r8,2
 8002f9c:	bf000007 	ldb	fp,0(r23)
 8002fa0:	bdc00044 	addi	r23,r23,1
 8002fa4:	1211883a 	add	r8,r2,r8
 8002fa8:	4211883a 	add	r8,r8,r8
 8002fac:	40d1883a 	add	r8,r8,r3
 8002fb0:	e0fff404 	addi	r3,fp,-48
 8002fb4:	188002b0 	cmpltui	r2,r3,10
 8002fb8:	103ff71e 	bne	r2,zero,8002f98 <___vfprintf_internal_r+0xa24>
 8002fbc:	003dbb06 	br	80026ac <___vfprintf_internal_r+0x138>
 8002fc0:	bf000003 	ldbu	fp,0(r23)
 8002fc4:	e2c03fcc 	andi	r11,fp,255
 8002fc8:	5ac0201c 	xori	r11,r11,128
 8002fcc:	63000114 	ori	r12,r12,4
 8002fd0:	5affe004 	addi	r11,r11,-128
 8002fd4:	003db306 	br	80026a4 <___vfprintf_internal_r+0x130>
 8002fd8:	bac00007 	ldb	r11,0(r23)
 8002fdc:	01000044 	movi	r4,1
 8002fe0:	01400ac4 	movi	r5,43
 8002fe4:	003daf06 	br	80026a4 <___vfprintf_internal_r+0x130>
 8002fe8:	d8800617 	ldw	r2,24(sp)
 8002fec:	bf000003 	ldbu	fp,0(r23)
 8002ff0:	14000017 	ldw	r16,0(r2)
 8002ff4:	10800104 	addi	r2,r2,4
 8002ff8:	80028c16 	blt	r16,zero,8003a2c <___vfprintf_internal_r+0x14b8>
 8002ffc:	d8800615 	stw	r2,24(sp)
 8003000:	e2c03fcc 	andi	r11,fp,255
 8003004:	5ac0201c 	xori	r11,r11,128
 8003008:	5affe004 	addi	r11,r11,-128
 800300c:	003da506 	br	80026a4 <___vfprintf_internal_r+0x130>
 8003010:	bac00007 	ldb	r11,0(r23)
 8003014:	63000054 	ori	r12,r12,1
 8003018:	003da206 	br	80026a4 <___vfprintf_internal_r+0x130>
 800301c:	28803fcc 	andi	r2,r5,255
 8003020:	1080201c 	xori	r2,r2,128
 8003024:	10bfe004 	addi	r2,r2,-128
 8003028:	bf000003 	ldbu	fp,0(r23)
 800302c:	103ff41e 	bne	r2,zero,8003000 <___vfprintf_internal_r+0xa8c>
 8003030:	e2c03fcc 	andi	r11,fp,255
 8003034:	5ac0201c 	xori	r11,r11,128
 8003038:	01000044 	movi	r4,1
 800303c:	01400804 	movi	r5,32
 8003040:	5affe004 	addi	r11,r11,-128
 8003044:	003d9706 	br	80026a4 <___vfprintf_internal_r+0x130>
 8003048:	21003fcc 	andi	r4,r4,255
 800304c:	20051e1e 	bne	r4,zero,80044c8 <___vfprintf_internal_r+0x1f54>
 8003050:	00820074 	movhi	r2,2049
 8003054:	10897804 	addi	r2,r2,9696
 8003058:	d8800c15 	stw	r2,48(sp)
 800305c:	6080080c 	andi	r2,r12,32
 8003060:	103f791e 	bne	r2,zero,8002e48 <___vfprintf_internal_r+0x8d4>
 8003064:	d9000617 	ldw	r4,24(sp)
 8003068:	6080040c 	andi	r2,r12,16
 800306c:	20c00104 	addi	r3,r4,4
 8003070:	10025b1e 	bne	r2,zero,80039e0 <___vfprintf_internal_r+0x146c>
 8003074:	6080100c 	andi	r2,r12,64
 8003078:	10046026 	beq	r2,zero,80041fc <___vfprintf_internal_r+0x1c88>
 800307c:	d8800617 	ldw	r2,24(sp)
 8003080:	002b883a 	mov	r21,zero
 8003084:	d8c00615 	stw	r3,24(sp)
 8003088:	1500000b 	ldhu	r20,0(r2)
 800308c:	003f7306 	br	8002e5c <___vfprintf_internal_r+0x8e8>
 8003090:	d8800617 	ldw	r2,24(sp)
 8003094:	d8001345 	stb	zero,77(sp)
 8003098:	14400017 	ldw	r17,0(r2)
 800309c:	10c00104 	addi	r3,r2,4
 80030a0:	88028e26 	beq	r17,zero,8003adc <___vfprintf_internal_r+0x1568>
 80030a4:	40bfffe0 	cmpeqi	r2,r8,-1
 80030a8:	1003c01e 	bne	r2,zero,8003fac <___vfprintf_internal_r+0x1a38>
 80030ac:	400d883a 	mov	r6,r8
 80030b0:	000b883a 	mov	r5,zero
 80030b4:	8809883a 	mov	r4,r17
 80030b8:	d8c00715 	stw	r3,28(sp)
 80030bc:	db000615 	stw	r12,24(sp)
 80030c0:	da000415 	stw	r8,16(sp)
 80030c4:	8007d400 	call	8007d40 <memchr>
 80030c8:	da000417 	ldw	r8,16(sp)
 80030cc:	db000617 	ldw	r12,24(sp)
 80030d0:	d8c00717 	ldw	r3,28(sp)
 80030d4:	1004ec26 	beq	r2,zero,8004488 <___vfprintf_internal_r+0x1f14>
 80030d8:	146bc83a 	sub	r21,r2,r17
 80030dc:	a829883a 	mov	r20,r21
 80030e0:	d8c00615 	stw	r3,24(sp)
 80030e4:	003de806 	br	8002888 <___vfprintf_internal_r+0x314>
 80030e8:	bac00007 	ldb	r11,0(r23)
 80030ec:	63000814 	ori	r12,r12,32
 80030f0:	003d6c06 	br	80026a4 <___vfprintf_internal_r+0x130>
 80030f4:	d8c00617 	ldw	r3,24(sp)
 80030f8:	00800c04 	movi	r2,48
 80030fc:	d8801385 	stb	r2,78(sp)
 8003100:	00801e04 	movi	r2,120
 8003104:	01020074 	movhi	r4,2049
 8003108:	d88013c5 	stb	r2,79(sp)
 800310c:	18800104 	addi	r2,r3,4
 8003110:	d8800615 	stw	r2,24(sp)
 8003114:	20897804 	addi	r2,r4,9696
 8003118:	d8800c15 	stw	r2,48(sp)
 800311c:	1d000017 	ldw	r20,0(r3)
 8003120:	002b883a 	mov	r21,zero
 8003124:	63000094 	ori	r12,r12,2
 8003128:	00800084 	movi	r2,2
 800312c:	07001e04 	movi	fp,120
 8003130:	003e5c06 	br	8002aa4 <___vfprintf_internal_r+0x530>
 8003134:	21003fcc 	andi	r4,r4,255
 8003138:	2004e71e 	bne	r4,zero,80044d8 <___vfprintf_internal_r+0x1f64>
 800313c:	d9000617 	ldw	r4,24(sp)
 8003140:	6080080c 	andi	r2,r12,32
 8003144:	20c00017 	ldw	r3,0(r4)
 8003148:	21000104 	addi	r4,r4,4
 800314c:	d9000615 	stw	r4,24(sp)
 8003150:	10021e1e 	bne	r2,zero,80039cc <___vfprintf_internal_r+0x1458>
 8003154:	6080040c 	andi	r2,r12,16
 8003158:	1002ae1e 	bne	r2,zero,8003c14 <___vfprintf_internal_r+0x16a0>
 800315c:	6300100c 	andi	r12,r12,64
 8003160:	6002ac26 	beq	r12,zero,8003c14 <___vfprintf_internal_r+0x16a0>
 8003164:	d8800517 	ldw	r2,20(sp)
 8003168:	1880000d 	sth	r2,0(r3)
 800316c:	003d3506 	br	8002644 <___vfprintf_internal_r+0xd0>
 8003170:	bac00007 	ldb	r11,0(r23)
 8003174:	58801b18 	cmpnei	r2,r11,108
 8003178:	10024926 	beq	r2,zero,8003aa0 <___vfprintf_internal_r+0x152c>
 800317c:	63000414 	ori	r12,r12,16
 8003180:	003d4806 	br	80026a4 <___vfprintf_internal_r+0x130>
 8003184:	e2c01990 	cmplti	r11,fp,102
 8003188:	5800cb1e 	bne	r11,zero,80034b8 <___vfprintf_internal_r+0xf44>
 800318c:	d9000917 	ldw	r4,36(sp)
 8003190:	d9400a17 	ldw	r5,40(sp)
 8003194:	000d883a 	mov	r6,zero
 8003198:	000f883a 	mov	r7,zero
 800319c:	d8c00e15 	stw	r3,56(sp)
 80031a0:	800e08c0 	call	800e08c <__eqdf2>
 80031a4:	d8c00e17 	ldw	r3,56(sp)
 80031a8:	1001641e 	bne	r2,zero,800373c <___vfprintf_internal_r+0x11c8>
 80031ac:	d8801b17 	ldw	r2,108(sp)
 80031b0:	01020074 	movhi	r4,2049
 80031b4:	21098404 	addi	r4,r4,9744
 80031b8:	10800044 	addi	r2,r2,1
 80031bc:	18c00044 	addi	r3,r3,1
 80031c0:	b1000015 	stw	r4,0(r22)
 80031c4:	01000044 	movi	r4,1
 80031c8:	d8801b15 	stw	r2,108(sp)
 80031cc:	b1000115 	stw	r4,4(r22)
 80031d0:	d8c01c15 	stw	r3,112(sp)
 80031d4:	10800208 	cmpgei	r2,r2,8
 80031d8:	1003621e 	bne	r2,zero,8003f64 <___vfprintf_internal_r+0x19f0>
 80031dc:	b5800204 	addi	r22,r22,8
 80031e0:	d8801417 	ldw	r2,80(sp)
 80031e4:	d9000817 	ldw	r4,32(sp)
 80031e8:	1101e70e 	bge	r2,r4,8003988 <___vfprintf_internal_r+0x1414>
 80031ec:	d8800d17 	ldw	r2,52(sp)
 80031f0:	d9000b17 	ldw	r4,44(sp)
 80031f4:	b0800015 	stw	r2,0(r22)
 80031f8:	d8801b17 	ldw	r2,108(sp)
 80031fc:	1907883a 	add	r3,r3,r4
 8003200:	b1000115 	stw	r4,4(r22)
 8003204:	10800044 	addi	r2,r2,1
 8003208:	d8801b15 	stw	r2,108(sp)
 800320c:	d8c01c15 	stw	r3,112(sp)
 8003210:	10800208 	cmpgei	r2,r2,8
 8003214:	1002291e 	bne	r2,zero,8003abc <___vfprintf_internal_r+0x1548>
 8003218:	b5800204 	addi	r22,r22,8
 800321c:	d8800817 	ldw	r2,32(sp)
 8003220:	157fffc4 	addi	r21,r2,-1
 8003224:	057dd10e 	bge	zero,r21,800296c <___vfprintf_internal_r+0x3f8>
 8003228:	01c20074 	movhi	r7,2049
 800322c:	a9000450 	cmplti	r4,r21,17
 8003230:	d8801b17 	ldw	r2,108(sp)
 8003234:	39c98504 	addi	r7,r7,9748
 8003238:	2003461e 	bne	r4,zero,8003f54 <___vfprintf_internal_r+0x19e0>
 800323c:	07000404 	movi	fp,16
 8003240:	3823883a 	mov	r17,r7
 8003244:	00000406 	br	8003258 <___vfprintf_internal_r+0xce4>
 8003248:	b5800204 	addi	r22,r22,8
 800324c:	ad7ffc04 	addi	r21,r21,-16
 8003250:	a9000448 	cmpgei	r4,r21,17
 8003254:	20033e26 	beq	r4,zero,8003f50 <___vfprintf_internal_r+0x19dc>
 8003258:	10800044 	addi	r2,r2,1
 800325c:	18c00404 	addi	r3,r3,16
 8003260:	b4400015 	stw	r17,0(r22)
 8003264:	b7000115 	stw	fp,4(r22)
 8003268:	d8c01c15 	stw	r3,112(sp)
 800326c:	d8801b15 	stw	r2,108(sp)
 8003270:	11000208 	cmpgei	r4,r2,8
 8003274:	203ff426 	beq	r4,zero,8003248 <___vfprintf_internal_r+0xcd4>
 8003278:	d9801a04 	addi	r6,sp,104
 800327c:	900b883a 	mov	r5,r18
 8003280:	9809883a 	mov	r4,r19
 8003284:	8009b0c0 	call	8009b0c <__sprint_r>
 8003288:	103dc91e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 800328c:	d8c01c17 	ldw	r3,112(sp)
 8003290:	d8801b17 	ldw	r2,108(sp)
 8003294:	dd802704 	addi	r22,sp,156
 8003298:	003fec06 	br	800324c <___vfprintf_internal_r+0xcd8>
 800329c:	8519c83a 	sub	r12,r16,r20
 80032a0:	033da30e 	bge	zero,r12,8002930 <___vfprintf_internal_r+0x3bc>
 80032a4:	01c20074 	movhi	r7,2049
 80032a8:	61000450 	cmplti	r4,r12,17
 80032ac:	d8801b17 	ldw	r2,108(sp)
 80032b0:	39c98504 	addi	r7,r7,9748
 80032b4:	2000281e 	bne	r4,zero,8003358 <___vfprintf_internal_r+0xde4>
 80032b8:	dc400e15 	stw	r17,56(sp)
 80032bc:	dc000f15 	stw	r16,60(sp)
 80032c0:	b009883a 	mov	r4,r22
 80032c4:	03400404 	movi	r13,16
 80032c8:	a02d883a 	mov	r22,r20
 80032cc:	6021883a 	mov	r16,r12
 80032d0:	4029883a 	mov	r20,r8
 80032d4:	3823883a 	mov	r17,r7
 80032d8:	00000406 	br	80032ec <___vfprintf_internal_r+0xd78>
 80032dc:	843ffc04 	addi	r16,r16,-16
 80032e0:	81400448 	cmpgei	r5,r16,17
 80032e4:	21000204 	addi	r4,r4,8
 80032e8:	28001426 	beq	r5,zero,800333c <___vfprintf_internal_r+0xdc8>
 80032ec:	10800044 	addi	r2,r2,1
 80032f0:	18c00404 	addi	r3,r3,16
 80032f4:	24400015 	stw	r17,0(r4)
 80032f8:	23400115 	stw	r13,4(r4)
 80032fc:	d8c01c15 	stw	r3,112(sp)
 8003300:	d8801b15 	stw	r2,108(sp)
 8003304:	11400208 	cmpgei	r5,r2,8
 8003308:	283ff426 	beq	r5,zero,80032dc <___vfprintf_internal_r+0xd68>
 800330c:	d9801a04 	addi	r6,sp,104
 8003310:	900b883a 	mov	r5,r18
 8003314:	9809883a 	mov	r4,r19
 8003318:	8009b0c0 	call	8009b0c <__sprint_r>
 800331c:	103da41e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003320:	843ffc04 	addi	r16,r16,-16
 8003324:	81400448 	cmpgei	r5,r16,17
 8003328:	d8c01c17 	ldw	r3,112(sp)
 800332c:	d8801b17 	ldw	r2,108(sp)
 8003330:	d9002704 	addi	r4,sp,156
 8003334:	03400404 	movi	r13,16
 8003338:	283fec1e 	bne	r5,zero,80032ec <___vfprintf_internal_r+0xd78>
 800333c:	8019883a 	mov	r12,r16
 8003340:	880f883a 	mov	r7,r17
 8003344:	dc000f17 	ldw	r16,60(sp)
 8003348:	dc400e17 	ldw	r17,56(sp)
 800334c:	a011883a 	mov	r8,r20
 8003350:	b029883a 	mov	r20,r22
 8003354:	202d883a 	mov	r22,r4
 8003358:	10800044 	addi	r2,r2,1
 800335c:	1b07883a 	add	r3,r3,r12
 8003360:	d8801b15 	stw	r2,108(sp)
 8003364:	b1c00015 	stw	r7,0(r22)
 8003368:	b3000115 	stw	r12,4(r22)
 800336c:	d8c01c15 	stw	r3,112(sp)
 8003370:	10800208 	cmpgei	r2,r2,8
 8003374:	1003031e 	bne	r2,zero,8003f84 <___vfprintf_internal_r+0x1a10>
 8003378:	4551c83a 	sub	r8,r8,r21
 800337c:	b5800204 	addi	r22,r22,8
 8003380:	023d6d0e 	bge	zero,r8,8002938 <___vfprintf_internal_r+0x3c4>
 8003384:	01c20074 	movhi	r7,2049
 8003388:	41000450 	cmplti	r4,r8,17
 800338c:	d8801b17 	ldw	r2,108(sp)
 8003390:	39c98504 	addi	r7,r7,9748
 8003394:	2000221e 	bne	r4,zero,8003420 <___vfprintf_internal_r+0xeac>
 8003398:	dc400e15 	stw	r17,56(sp)
 800339c:	dc000f15 	stw	r16,60(sp)
 80033a0:	03000404 	movi	r12,16
 80033a4:	4021883a 	mov	r16,r8
 80033a8:	3823883a 	mov	r17,r7
 80033ac:	00000406 	br	80033c0 <___vfprintf_internal_r+0xe4c>
 80033b0:	843ffc04 	addi	r16,r16,-16
 80033b4:	81000448 	cmpgei	r4,r16,17
 80033b8:	b5800204 	addi	r22,r22,8
 80033bc:	20001426 	beq	r4,zero,8003410 <___vfprintf_internal_r+0xe9c>
 80033c0:	10800044 	addi	r2,r2,1
 80033c4:	18c00404 	addi	r3,r3,16
 80033c8:	b4400015 	stw	r17,0(r22)
 80033cc:	b3000115 	stw	r12,4(r22)
 80033d0:	d8c01c15 	stw	r3,112(sp)
 80033d4:	d8801b15 	stw	r2,108(sp)
 80033d8:	11000208 	cmpgei	r4,r2,8
 80033dc:	203ff426 	beq	r4,zero,80033b0 <___vfprintf_internal_r+0xe3c>
 80033e0:	d9801a04 	addi	r6,sp,104
 80033e4:	900b883a 	mov	r5,r18
 80033e8:	9809883a 	mov	r4,r19
 80033ec:	8009b0c0 	call	8009b0c <__sprint_r>
 80033f0:	103d6f1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 80033f4:	843ffc04 	addi	r16,r16,-16
 80033f8:	81000448 	cmpgei	r4,r16,17
 80033fc:	d8c01c17 	ldw	r3,112(sp)
 8003400:	d8801b17 	ldw	r2,108(sp)
 8003404:	dd802704 	addi	r22,sp,156
 8003408:	03000404 	movi	r12,16
 800340c:	203fec1e 	bne	r4,zero,80033c0 <___vfprintf_internal_r+0xe4c>
 8003410:	8011883a 	mov	r8,r16
 8003414:	880f883a 	mov	r7,r17
 8003418:	dc000f17 	ldw	r16,60(sp)
 800341c:	dc400e17 	ldw	r17,56(sp)
 8003420:	10800044 	addi	r2,r2,1
 8003424:	1a07883a 	add	r3,r3,r8
 8003428:	d8801b15 	stw	r2,108(sp)
 800342c:	b1c00015 	stw	r7,0(r22)
 8003430:	b2000115 	stw	r8,4(r22)
 8003434:	d8c01c15 	stw	r3,112(sp)
 8003438:	10800208 	cmpgei	r2,r2,8
 800343c:	10014a1e 	bne	r2,zero,8003968 <___vfprintf_internal_r+0x13f4>
 8003440:	b5800204 	addi	r22,r22,8
 8003444:	003d3c06 	br	8002938 <___vfprintf_internal_r+0x3c4>
 8003448:	10c00060 	cmpeqi	r3,r2,1
 800344c:	1803bc1e 	bne	r3,zero,8004340 <___vfprintf_internal_r+0x1dcc>
 8003450:	108000a0 	cmpeqi	r2,r2,2
 8003454:	db000417 	ldw	r12,16(sp)
 8003458:	103ea826 	beq	r2,zero,8002efc <___vfprintf_internal_r+0x988>
 800345c:	d9000c17 	ldw	r4,48(sp)
 8003460:	dc402704 	addi	r17,sp,156
 8003464:	a08003cc 	andi	r2,r20,15
 8003468:	a806973a 	slli	r3,r21,28
 800346c:	a028d13a 	srli	r20,r20,4
 8003470:	2085883a 	add	r2,r4,r2
 8003474:	10800003 	ldbu	r2,0(r2)
 8003478:	a82ad13a 	srli	r21,r21,4
 800347c:	1d28b03a 	or	r20,r3,r20
 8003480:	88bfffc5 	stb	r2,-1(r17)
 8003484:	a544b03a 	or	r2,r20,r21
 8003488:	8c7fffc4 	addi	r17,r17,-1
 800348c:	103ff51e 	bne	r2,zero,8003464 <___vfprintf_internal_r+0xef0>
 8003490:	d8802704 	addi	r2,sp,156
 8003494:	146bc83a 	sub	r21,r2,r17
 8003498:	db000415 	stw	r12,16(sp)
 800349c:	003e4c06 	br	8002dd0 <___vfprintf_internal_r+0x85c>
 80034a0:	d9801a04 	addi	r6,sp,104
 80034a4:	900b883a 	mov	r5,r18
 80034a8:	9809883a 	mov	r4,r19
 80034ac:	8009b0c0 	call	8009b0c <__sprint_r>
 80034b0:	103d3926 	beq	r2,zero,8002998 <___vfprintf_internal_r+0x424>
 80034b4:	003d3e06 	br	80029b0 <___vfprintf_internal_r+0x43c>
 80034b8:	d8800817 	ldw	r2,32(sp)
 80034bc:	da001b17 	ldw	r8,108(sp)
 80034c0:	18c00044 	addi	r3,r3,1
 80034c4:	10800088 	cmpgei	r2,r2,2
 80034c8:	45400044 	addi	r21,r8,1
 80034cc:	b7000204 	addi	fp,r22,8
 80034d0:	1000f826 	beq	r2,zero,80038b4 <___vfprintf_internal_r+0x1340>
 80034d4:	00800044 	movi	r2,1
 80034d8:	b0800115 	stw	r2,4(r22)
 80034dc:	b4400015 	stw	r17,0(r22)
 80034e0:	d8c01c15 	stw	r3,112(sp)
 80034e4:	dd401b15 	stw	r21,108(sp)
 80034e8:	a8800210 	cmplti	r2,r21,8
 80034ec:	1001cc26 	beq	r2,zero,8003c20 <___vfprintf_internal_r+0x16ac>
 80034f0:	d8800b17 	ldw	r2,44(sp)
 80034f4:	d9000d17 	ldw	r4,52(sp)
 80034f8:	ad400044 	addi	r21,r21,1
 80034fc:	1887883a 	add	r3,r3,r2
 8003500:	e0800115 	stw	r2,4(fp)
 8003504:	e1000015 	stw	r4,0(fp)
 8003508:	d8c01c15 	stw	r3,112(sp)
 800350c:	dd401b15 	stw	r21,108(sp)
 8003510:	a8800208 	cmpgei	r2,r21,8
 8003514:	1001cb1e 	bne	r2,zero,8003c44 <___vfprintf_internal_r+0x16d0>
 8003518:	e7000204 	addi	fp,fp,8
 800351c:	d9000917 	ldw	r4,36(sp)
 8003520:	d9400a17 	ldw	r5,40(sp)
 8003524:	aa000044 	addi	r8,r21,1
 8003528:	000d883a 	mov	r6,zero
 800352c:	000f883a 	mov	r7,zero
 8003530:	d8c00e15 	stw	r3,56(sp)
 8003534:	da000715 	stw	r8,28(sp)
 8003538:	800e08c0 	call	800e08c <__eqdf2>
 800353c:	d8c00817 	ldw	r3,32(sp)
 8003540:	da000717 	ldw	r8,28(sp)
 8003544:	e5800204 	addi	r22,fp,8
 8003548:	1affffc4 	addi	r11,r3,-1
 800354c:	d8c00e17 	ldw	r3,56(sp)
 8003550:	1000e526 	beq	r2,zero,80038e8 <___vfprintf_internal_r+0x1374>
 8003554:	8a400044 	addi	r9,r17,1
 8003558:	1ac7883a 	add	r3,r3,r11
 800355c:	da001b15 	stw	r8,108(sp)
 8003560:	e2400015 	stw	r9,0(fp)
 8003564:	e2c00115 	stw	r11,4(fp)
 8003568:	d8c01c15 	stw	r3,112(sp)
 800356c:	42000208 	cmpgei	r8,r8,8
 8003570:	40013e1e 	bne	r8,zero,8003a6c <___vfprintf_internal_r+0x14f8>
 8003574:	e0800404 	addi	r2,fp,16
 8003578:	aa000084 	addi	r8,r21,2
 800357c:	b039883a 	mov	fp,r22
 8003580:	102d883a 	mov	r22,r2
 8003584:	d9001017 	ldw	r4,64(sp)
 8003588:	d8801644 	addi	r2,sp,89
 800358c:	da001b15 	stw	r8,108(sp)
 8003590:	20c7883a 	add	r3,r4,r3
 8003594:	e0800015 	stw	r2,0(fp)
 8003598:	e1000115 	stw	r4,4(fp)
 800359c:	d8c01c15 	stw	r3,112(sp)
 80035a0:	42000210 	cmplti	r8,r8,8
 80035a4:	403cf11e 	bne	r8,zero,800296c <___vfprintf_internal_r+0x3f8>
 80035a8:	d9801a04 	addi	r6,sp,104
 80035ac:	900b883a 	mov	r5,r18
 80035b0:	9809883a 	mov	r4,r19
 80035b4:	8009b0c0 	call	8009b0c <__sprint_r>
 80035b8:	103cfd1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 80035bc:	d8c01c17 	ldw	r3,112(sp)
 80035c0:	dd802704 	addi	r22,sp,156
 80035c4:	003ce906 	br	800296c <___vfprintf_internal_r+0x3f8>
 80035c8:	db000417 	ldw	r12,16(sp)
 80035cc:	003e4706 	br	8002eec <___vfprintf_internal_r+0x978>
 80035d0:	03020074 	movhi	r12,2049
 80035d4:	39000450 	cmplti	r4,r7,17
 80035d8:	d8801b17 	ldw	r2,108(sp)
 80035dc:	63098904 	addi	r12,r12,9764
 80035e0:	2000321e 	bne	r4,zero,80036ac <___vfprintf_internal_r+0x1138>
 80035e4:	dc401115 	stw	r17,68(sp)
 80035e8:	b009883a 	mov	r4,r22
 80035ec:	9023883a 	mov	r17,r18
 80035f0:	a82d883a 	mov	r22,r21
 80035f4:	ddc01215 	stw	r23,72(sp)
 80035f8:	03c00404 	movi	r15,16
 80035fc:	a02f883a 	mov	r23,r20
 8003600:	db800e15 	stw	r14,56(sp)
 8003604:	8029883a 	mov	r20,r16
 8003608:	db400f15 	stw	r13,60(sp)
 800360c:	402b883a 	mov	r21,r8
 8003610:	3821883a 	mov	r16,r7
 8003614:	6025883a 	mov	r18,r12
 8003618:	00000406 	br	800362c <___vfprintf_internal_r+0x10b8>
 800361c:	843ffc04 	addi	r16,r16,-16
 8003620:	81800448 	cmpgei	r6,r16,17
 8003624:	21000204 	addi	r4,r4,8
 8003628:	30001426 	beq	r6,zero,800367c <___vfprintf_internal_r+0x1108>
 800362c:	10800044 	addi	r2,r2,1
 8003630:	18c00404 	addi	r3,r3,16
 8003634:	24800015 	stw	r18,0(r4)
 8003638:	23c00115 	stw	r15,4(r4)
 800363c:	d8c01c15 	stw	r3,112(sp)
 8003640:	d8801b15 	stw	r2,108(sp)
 8003644:	11800208 	cmpgei	r6,r2,8
 8003648:	303ff426 	beq	r6,zero,800361c <___vfprintf_internal_r+0x10a8>
 800364c:	d9801a04 	addi	r6,sp,104
 8003650:	880b883a 	mov	r5,r17
 8003654:	9809883a 	mov	r4,r19
 8003658:	8009b0c0 	call	8009b0c <__sprint_r>
 800365c:	1001b91e 	bne	r2,zero,8003d44 <___vfprintf_internal_r+0x17d0>
 8003660:	843ffc04 	addi	r16,r16,-16
 8003664:	81800448 	cmpgei	r6,r16,17
 8003668:	d8c01c17 	ldw	r3,112(sp)
 800366c:	d8801b17 	ldw	r2,108(sp)
 8003670:	d9002704 	addi	r4,sp,156
 8003674:	03c00404 	movi	r15,16
 8003678:	303fec1e 	bne	r6,zero,800362c <___vfprintf_internal_r+0x10b8>
 800367c:	800f883a 	mov	r7,r16
 8003680:	9019883a 	mov	r12,r18
 8003684:	a021883a 	mov	r16,r20
 8003688:	8825883a 	mov	r18,r17
 800368c:	b829883a 	mov	r20,r23
 8003690:	db800e17 	ldw	r14,56(sp)
 8003694:	db400f17 	ldw	r13,60(sp)
 8003698:	ddc01217 	ldw	r23,72(sp)
 800369c:	dc401117 	ldw	r17,68(sp)
 80036a0:	a811883a 	mov	r8,r21
 80036a4:	b02b883a 	mov	r21,r22
 80036a8:	202d883a 	mov	r22,r4
 80036ac:	10800044 	addi	r2,r2,1
 80036b0:	19c7883a 	add	r3,r3,r7
 80036b4:	d8801b15 	stw	r2,108(sp)
 80036b8:	b3000015 	stw	r12,0(r22)
 80036bc:	b1c00115 	stw	r7,4(r22)
 80036c0:	d8c01c15 	stw	r3,112(sp)
 80036c4:	10800208 	cmpgei	r2,r2,8
 80036c8:	1001671e 	bne	r2,zero,8003c68 <___vfprintf_internal_r+0x16f4>
 80036cc:	b5800204 	addi	r22,r22,8
 80036d0:	003c7a06 	br	80028bc <___vfprintf_internal_r+0x348>
 80036d4:	d9801a04 	addi	r6,sp,104
 80036d8:	900b883a 	mov	r5,r18
 80036dc:	9809883a 	mov	r4,r19
 80036e0:	da001115 	stw	r8,68(sp)
 80036e4:	db400f15 	stw	r13,60(sp)
 80036e8:	db800e15 	stw	r14,56(sp)
 80036ec:	8009b0c0 	call	8009b0c <__sprint_r>
 80036f0:	103caf1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 80036f4:	d8c01c17 	ldw	r3,112(sp)
 80036f8:	da001117 	ldw	r8,68(sp)
 80036fc:	db400f17 	ldw	r13,60(sp)
 8003700:	db800e17 	ldw	r14,56(sp)
 8003704:	dd802704 	addi	r22,sp,156
 8003708:	003c7a06 	br	80028f4 <___vfprintf_internal_r+0x380>
 800370c:	d9801a04 	addi	r6,sp,104
 8003710:	900b883a 	mov	r5,r18
 8003714:	9809883a 	mov	r4,r19
 8003718:	da000f15 	stw	r8,60(sp)
 800371c:	db400e15 	stw	r13,56(sp)
 8003720:	8009b0c0 	call	8009b0c <__sprint_r>
 8003724:	103ca21e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003728:	d8c01c17 	ldw	r3,112(sp)
 800372c:	da000f17 	ldw	r8,60(sp)
 8003730:	db400e17 	ldw	r13,56(sp)
 8003734:	dd802704 	addi	r22,sp,156
 8003738:	003c7b06 	br	8002928 <___vfprintf_internal_r+0x3b4>
 800373c:	d9401417 	ldw	r5,80(sp)
 8003740:	0141570e 	bge	zero,r5,8003ca0 <___vfprintf_internal_r+0x172c>
 8003744:	d8800717 	ldw	r2,28(sp)
 8003748:	d9000817 	ldw	r4,32(sp)
 800374c:	102b883a 	mov	r21,r2
 8003750:	2080b916 	blt	r4,r2,8003a38 <___vfprintf_internal_r+0x14c4>
 8003754:	05400a0e 	bge	zero,r21,8003780 <___vfprintf_internal_r+0x120c>
 8003758:	d8801b17 	ldw	r2,108(sp)
 800375c:	1d47883a 	add	r3,r3,r21
 8003760:	b4400015 	stw	r17,0(r22)
 8003764:	10800044 	addi	r2,r2,1
 8003768:	d8801b15 	stw	r2,108(sp)
 800376c:	b5400115 	stw	r21,4(r22)
 8003770:	d8c01c15 	stw	r3,112(sp)
 8003774:	10800208 	cmpgei	r2,r2,8
 8003778:	10032d1e 	bne	r2,zero,8004430 <___vfprintf_internal_r+0x1ebc>
 800377c:	b5800204 	addi	r22,r22,8
 8003780:	a800c516 	blt	r21,zero,8003a98 <___vfprintf_internal_r+0x1524>
 8003784:	d8800717 	ldw	r2,28(sp)
 8003788:	156bc83a 	sub	r21,r2,r21
 800378c:	0540db16 	blt	zero,r21,8003afc <___vfprintf_internal_r+0x1588>
 8003790:	dd401417 	ldw	r21,80(sp)
 8003794:	d8800817 	ldw	r2,32(sp)
 8003798:	a880aa0e 	bge	r21,r2,8003a44 <___vfprintf_internal_r+0x14d0>
 800379c:	d8800d17 	ldw	r2,52(sp)
 80037a0:	d9000b17 	ldw	r4,44(sp)
 80037a4:	b0800015 	stw	r2,0(r22)
 80037a8:	d8801b17 	ldw	r2,108(sp)
 80037ac:	1907883a 	add	r3,r3,r4
 80037b0:	b1000115 	stw	r4,4(r22)
 80037b4:	10800044 	addi	r2,r2,1
 80037b8:	d8801b15 	stw	r2,108(sp)
 80037bc:	d8c01c15 	stw	r3,112(sp)
 80037c0:	10800208 	cmpgei	r2,r2,8
 80037c4:	1003111e 	bne	r2,zero,800440c <___vfprintf_internal_r+0x1e98>
 80037c8:	b5800204 	addi	r22,r22,8
 80037cc:	d9000817 	ldw	r4,32(sp)
 80037d0:	d9400717 	ldw	r5,28(sp)
 80037d4:	2545c83a 	sub	r2,r4,r21
 80037d8:	2149c83a 	sub	r4,r4,r5
 80037dc:	102b883a 	mov	r21,r2
 80037e0:	2080010e 	bge	r4,r2,80037e8 <___vfprintf_internal_r+0x1274>
 80037e4:	202b883a 	mov	r21,r4
 80037e8:	05400c0e 	bge	zero,r21,800381c <___vfprintf_internal_r+0x12a8>
 80037ec:	d9000717 	ldw	r4,28(sp)
 80037f0:	1d47883a 	add	r3,r3,r21
 80037f4:	b5400115 	stw	r21,4(r22)
 80037f8:	8913883a 	add	r9,r17,r4
 80037fc:	d9001b17 	ldw	r4,108(sp)
 8003800:	b2400015 	stw	r9,0(r22)
 8003804:	d8c01c15 	stw	r3,112(sp)
 8003808:	21000044 	addi	r4,r4,1
 800380c:	d9001b15 	stw	r4,108(sp)
 8003810:	21000208 	cmpgei	r4,r4,8
 8003814:	2003111e 	bne	r4,zero,800445c <___vfprintf_internal_r+0x1ee8>
 8003818:	b5800204 	addi	r22,r22,8
 800381c:	a800010e 	bge	r21,zero,8003824 <___vfprintf_internal_r+0x12b0>
 8003820:	002b883a 	mov	r21,zero
 8003824:	156bc83a 	sub	r21,r2,r21
 8003828:	057c500e 	bge	zero,r21,800296c <___vfprintf_internal_r+0x3f8>
 800382c:	01c20074 	movhi	r7,2049
 8003830:	a9000450 	cmplti	r4,r21,17
 8003834:	d8801b17 	ldw	r2,108(sp)
 8003838:	39c98504 	addi	r7,r7,9748
 800383c:	2001c51e 	bne	r4,zero,8003f54 <___vfprintf_internal_r+0x19e0>
 8003840:	07000404 	movi	fp,16
 8003844:	3823883a 	mov	r17,r7
 8003848:	00000406 	br	800385c <___vfprintf_internal_r+0x12e8>
 800384c:	b5800204 	addi	r22,r22,8
 8003850:	ad7ffc04 	addi	r21,r21,-16
 8003854:	a9000448 	cmpgei	r4,r21,17
 8003858:	2001bd26 	beq	r4,zero,8003f50 <___vfprintf_internal_r+0x19dc>
 800385c:	10800044 	addi	r2,r2,1
 8003860:	18c00404 	addi	r3,r3,16
 8003864:	b4400015 	stw	r17,0(r22)
 8003868:	b7000115 	stw	fp,4(r22)
 800386c:	d8c01c15 	stw	r3,112(sp)
 8003870:	d8801b15 	stw	r2,108(sp)
 8003874:	11000208 	cmpgei	r4,r2,8
 8003878:	203ff426 	beq	r4,zero,800384c <___vfprintf_internal_r+0x12d8>
 800387c:	d9801a04 	addi	r6,sp,104
 8003880:	900b883a 	mov	r5,r18
 8003884:	9809883a 	mov	r4,r19
 8003888:	8009b0c0 	call	8009b0c <__sprint_r>
 800388c:	103c481e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003890:	d8c01c17 	ldw	r3,112(sp)
 8003894:	d8801b17 	ldw	r2,108(sp)
 8003898:	dd802704 	addi	r22,sp,156
 800389c:	003fec06 	br	8003850 <___vfprintf_internal_r+0x12dc>
 80038a0:	4002a71e 	bne	r8,zero,8004340 <___vfprintf_internal_r+0x1dcc>
 80038a4:	0011883a 	mov	r8,zero
 80038a8:	002b883a 	mov	r21,zero
 80038ac:	dc402704 	addi	r17,sp,156
 80038b0:	003d4706 	br	8002dd0 <___vfprintf_internal_r+0x85c>
 80038b4:	d8800417 	ldw	r2,16(sp)
 80038b8:	1080004c 	andi	r2,r2,1
 80038bc:	103f051e 	bne	r2,zero,80034d4 <___vfprintf_internal_r+0xf60>
 80038c0:	00800044 	movi	r2,1
 80038c4:	dd401b15 	stw	r21,108(sp)
 80038c8:	b4400015 	stw	r17,0(r22)
 80038cc:	b0800115 	stw	r2,4(r22)
 80038d0:	d8c01c15 	stw	r3,112(sp)
 80038d4:	ad400208 	cmpgei	r21,r21,8
 80038d8:	a800641e 	bne	r21,zero,8003a6c <___vfprintf_internal_r+0x14f8>
 80038dc:	42000084 	addi	r8,r8,2
 80038e0:	b5800404 	addi	r22,r22,16
 80038e4:	003f2706 	br	8003584 <___vfprintf_internal_r+0x1010>
 80038e8:	02ff260e 	bge	zero,r11,8003584 <___vfprintf_internal_r+0x1010>
 80038ec:	58800450 	cmplti	r2,r11,17
 80038f0:	01c20074 	movhi	r7,2049
 80038f4:	10034c1e 	bne	r2,zero,8004628 <___vfprintf_internal_r+0x20b4>
 80038f8:	39c98504 	addi	r7,r7,9748
 80038fc:	dc000715 	stw	r16,28(sp)
 8003900:	05800404 	movi	r22,16
 8003904:	5823883a 	mov	r17,r11
 8003908:	402b883a 	mov	r21,r8
 800390c:	3821883a 	mov	r16,r7
 8003910:	00000506 	br	8003928 <___vfprintf_internal_r+0x13b4>
 8003914:	e7000204 	addi	fp,fp,8
 8003918:	8c7ffc04 	addi	r17,r17,-16
 800391c:	88800448 	cmpgei	r2,r17,17
 8003920:	1001d626 	beq	r2,zero,800407c <___vfprintf_internal_r+0x1b08>
 8003924:	ad400044 	addi	r21,r21,1
 8003928:	18c00404 	addi	r3,r3,16
 800392c:	e4000015 	stw	r16,0(fp)
 8003930:	e5800115 	stw	r22,4(fp)
 8003934:	d8c01c15 	stw	r3,112(sp)
 8003938:	dd401b15 	stw	r21,108(sp)
 800393c:	a8800208 	cmpgei	r2,r21,8
 8003940:	103ff426 	beq	r2,zero,8003914 <___vfprintf_internal_r+0x13a0>
 8003944:	d9801a04 	addi	r6,sp,104
 8003948:	900b883a 	mov	r5,r18
 800394c:	9809883a 	mov	r4,r19
 8003950:	8009b0c0 	call	8009b0c <__sprint_r>
 8003954:	103c161e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003958:	dd401b17 	ldw	r21,108(sp)
 800395c:	d8c01c17 	ldw	r3,112(sp)
 8003960:	df002704 	addi	fp,sp,156
 8003964:	003fec06 	br	8003918 <___vfprintf_internal_r+0x13a4>
 8003968:	d9801a04 	addi	r6,sp,104
 800396c:	900b883a 	mov	r5,r18
 8003970:	9809883a 	mov	r4,r19
 8003974:	8009b0c0 	call	8009b0c <__sprint_r>
 8003978:	103c0d1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 800397c:	d8c01c17 	ldw	r3,112(sp)
 8003980:	dd802704 	addi	r22,sp,156
 8003984:	003bec06 	br	8002938 <___vfprintf_internal_r+0x3c4>
 8003988:	d8800417 	ldw	r2,16(sp)
 800398c:	1080004c 	andi	r2,r2,1
 8003990:	103bf626 	beq	r2,zero,800296c <___vfprintf_internal_r+0x3f8>
 8003994:	003e1506 	br	80031ec <___vfprintf_internal_r+0xc78>
 8003998:	dc402704 	addi	r17,sp,156
 800399c:	003d0c06 	br	8002dd0 <___vfprintf_internal_r+0x85c>
 80039a0:	00800c04 	movi	r2,48
 80039a4:	d8801385 	stb	r2,78(sp)
 80039a8:	df0013c5 	stb	fp,79(sp)
 80039ac:	63000094 	ori	r12,r12,2
 80039b0:	00800084 	movi	r2,2
 80039b4:	003c3b06 	br	8002aa4 <___vfprintf_internal_r+0x530>
 80039b8:	25000017 	ldw	r20,0(r4)
 80039bc:	002b883a 	mov	r21,zero
 80039c0:	d8c00615 	stw	r3,24(sp)
 80039c4:	00800044 	movi	r2,1
 80039c8:	003c3606 	br	8002aa4 <___vfprintf_internal_r+0x530>
 80039cc:	d9000517 	ldw	r4,20(sp)
 80039d0:	2005d7fa 	srai	r2,r4,31
 80039d4:	19000015 	stw	r4,0(r3)
 80039d8:	18800115 	stw	r2,4(r3)
 80039dc:	003b1906 	br	8002644 <___vfprintf_internal_r+0xd0>
 80039e0:	25000017 	ldw	r20,0(r4)
 80039e4:	002b883a 	mov	r21,zero
 80039e8:	d8c00615 	stw	r3,24(sp)
 80039ec:	003d1b06 	br	8002e5c <___vfprintf_internal_r+0x8e8>
 80039f0:	25000017 	ldw	r20,0(r4)
 80039f4:	002b883a 	mov	r21,zero
 80039f8:	d8c00615 	stw	r3,24(sp)
 80039fc:	0005883a 	mov	r2,zero
 8003a00:	003c2806 	br	8002aa4 <___vfprintf_internal_r+0x530>
 8003a04:	18800017 	ldw	r2,0(r3)
 8003a08:	d8800915 	stw	r2,36(sp)
 8003a0c:	18800117 	ldw	r2,4(r3)
 8003a10:	d8800a15 	stw	r2,40(sp)
 8003a14:	003c5906 	br	8002b7c <___vfprintf_internal_r+0x608>
 8003a18:	25000017 	ldw	r20,0(r4)
 8003a1c:	d8c00615 	stw	r3,24(sp)
 8003a20:	a02bd7fa 	srai	r21,r20,31
 8003a24:	a805883a 	mov	r2,r21
 8003a28:	003cd706 	br	8002d88 <___vfprintf_internal_r+0x814>
 8003a2c:	0421c83a 	sub	r16,zero,r16
 8003a30:	d8800615 	stw	r2,24(sp)
 8003a34:	003d6306 	br	8002fc4 <___vfprintf_internal_r+0xa50>
 8003a38:	202b883a 	mov	r21,r4
 8003a3c:	057f4616 	blt	zero,r21,8003758 <___vfprintf_internal_r+0x11e4>
 8003a40:	003f4f06 	br	8003780 <___vfprintf_internal_r+0x120c>
 8003a44:	d8800417 	ldw	r2,16(sp)
 8003a48:	1080004c 	andi	r2,r2,1
 8003a4c:	103f531e 	bne	r2,zero,800379c <___vfprintf_internal_r+0x1228>
 8003a50:	d9000817 	ldw	r4,32(sp)
 8003a54:	d9400717 	ldw	r5,28(sp)
 8003a58:	2545c83a 	sub	r2,r4,r21
 8003a5c:	216bc83a 	sub	r21,r4,r5
 8003a60:	157f6e0e 	bge	r2,r21,800381c <___vfprintf_internal_r+0x12a8>
 8003a64:	102b883a 	mov	r21,r2
 8003a68:	003f6c06 	br	800381c <___vfprintf_internal_r+0x12a8>
 8003a6c:	d9801a04 	addi	r6,sp,104
 8003a70:	900b883a 	mov	r5,r18
 8003a74:	9809883a 	mov	r4,r19
 8003a78:	8009b0c0 	call	8009b0c <__sprint_r>
 8003a7c:	103bcc1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003a80:	da001b17 	ldw	r8,108(sp)
 8003a84:	d8c01c17 	ldw	r3,112(sp)
 8003a88:	dd802904 	addi	r22,sp,164
 8003a8c:	42000044 	addi	r8,r8,1
 8003a90:	df002704 	addi	fp,sp,156
 8003a94:	003ebb06 	br	8003584 <___vfprintf_internal_r+0x1010>
 8003a98:	002b883a 	mov	r21,zero
 8003a9c:	003f3906 	br	8003784 <___vfprintf_internal_r+0x1210>
 8003aa0:	bf000043 	ldbu	fp,1(r23)
 8003aa4:	63000814 	ori	r12,r12,32
 8003aa8:	bdc00044 	addi	r23,r23,1
 8003aac:	e2c03fcc 	andi	r11,fp,255
 8003ab0:	5ac0201c 	xori	r11,r11,128
 8003ab4:	5affe004 	addi	r11,r11,-128
 8003ab8:	003afa06 	br	80026a4 <___vfprintf_internal_r+0x130>
 8003abc:	d9801a04 	addi	r6,sp,104
 8003ac0:	900b883a 	mov	r5,r18
 8003ac4:	9809883a 	mov	r4,r19
 8003ac8:	8009b0c0 	call	8009b0c <__sprint_r>
 8003acc:	103bb81e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003ad0:	d8c01c17 	ldw	r3,112(sp)
 8003ad4:	dd802704 	addi	r22,sp,156
 8003ad8:	003dd006 	br	800321c <___vfprintf_internal_r+0xca8>
 8003adc:	408001f0 	cmpltui	r2,r8,7
 8003ae0:	402b883a 	mov	r21,r8
 8003ae4:	1001e726 	beq	r2,zero,8004284 <___vfprintf_internal_r+0x1d10>
 8003ae8:	04420074 	movhi	r17,2049
 8003aec:	a829883a 	mov	r20,r21
 8003af0:	d8c00615 	stw	r3,24(sp)
 8003af4:	8c498204 	addi	r17,r17,9736
 8003af8:	003b6306 	br	8002888 <___vfprintf_internal_r+0x314>
 8003afc:	01c20074 	movhi	r7,2049
 8003b00:	a9000450 	cmplti	r4,r21,17
 8003b04:	d8801b17 	ldw	r2,108(sp)
 8003b08:	39c98504 	addi	r7,r7,9748
 8003b0c:	2001c21e 	bne	r4,zero,8004218 <___vfprintf_internal_r+0x1ca4>
 8003b10:	dc000e15 	stw	r16,56(sp)
 8003b14:	07000404 	movi	fp,16
 8003b18:	3821883a 	mov	r16,r7
 8003b1c:	00000406 	br	8003b30 <___vfprintf_internal_r+0x15bc>
 8003b20:	b5800204 	addi	r22,r22,8
 8003b24:	ad7ffc04 	addi	r21,r21,-16
 8003b28:	a9000448 	cmpgei	r4,r21,17
 8003b2c:	2001b826 	beq	r4,zero,8004210 <___vfprintf_internal_r+0x1c9c>
 8003b30:	10800044 	addi	r2,r2,1
 8003b34:	18c00404 	addi	r3,r3,16
 8003b38:	b4000015 	stw	r16,0(r22)
 8003b3c:	b7000115 	stw	fp,4(r22)
 8003b40:	d8c01c15 	stw	r3,112(sp)
 8003b44:	d8801b15 	stw	r2,108(sp)
 8003b48:	11000208 	cmpgei	r4,r2,8
 8003b4c:	203ff426 	beq	r4,zero,8003b20 <___vfprintf_internal_r+0x15ac>
 8003b50:	d9801a04 	addi	r6,sp,104
 8003b54:	900b883a 	mov	r5,r18
 8003b58:	9809883a 	mov	r4,r19
 8003b5c:	8009b0c0 	call	8009b0c <__sprint_r>
 8003b60:	103b931e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003b64:	d8c01c17 	ldw	r3,112(sp)
 8003b68:	d8801b17 	ldw	r2,108(sp)
 8003b6c:	dd802704 	addi	r22,sp,156
 8003b70:	003fec06 	br	8003b24 <___vfprintf_internal_r+0x15b0>
 8003b74:	dc402704 	addi	r17,sp,156
 8003b78:	a805883a 	mov	r2,r21
 8003b7c:	dc000715 	stw	r16,28(sp)
 8003b80:	902b883a 	mov	r21,r18
 8003b84:	8821883a 	mov	r16,r17
 8003b88:	db000415 	stw	r12,16(sp)
 8003b8c:	a023883a 	mov	r17,r20
 8003b90:	da000e15 	stw	r8,56(sp)
 8003b94:	9829883a 	mov	r20,r19
 8003b98:	1025883a 	mov	r18,r2
 8003b9c:	6827883a 	mov	r19,r13
 8003ba0:	8809883a 	mov	r4,r17
 8003ba4:	900b883a 	mov	r5,r18
 8003ba8:	01800284 	movi	r6,10
 8003bac:	000f883a 	mov	r7,zero
 8003bb0:	800c6cc0 	call	800c6cc <__umoddi3>
 8003bb4:	10800c04 	addi	r2,r2,48
 8003bb8:	8809883a 	mov	r4,r17
 8003bbc:	900b883a 	mov	r5,r18
 8003bc0:	01800284 	movi	r6,10
 8003bc4:	000f883a 	mov	r7,zero
 8003bc8:	80bfffc5 	stb	r2,-1(r16)
 8003bcc:	800c0ac0 	call	800c0ac <__udivdi3>
 8003bd0:	900d883a 	mov	r6,r18
 8003bd4:	880f883a 	mov	r7,r17
 8003bd8:	843fffc4 	addi	r16,r16,-1
 8003bdc:	1023883a 	mov	r17,r2
 8003be0:	1825883a 	mov	r18,r3
 8003be4:	303fee1e 	bne	r6,zero,8003ba0 <___vfprintf_internal_r+0x162c>
 8003be8:	39c002a8 	cmpgeui	r7,r7,10
 8003bec:	383fec1e 	bne	r7,zero,8003ba0 <___vfprintf_internal_r+0x162c>
 8003bf0:	8023883a 	mov	r17,r16
 8003bf4:	d8802704 	addi	r2,sp,156
 8003bf8:	981b883a 	mov	r13,r19
 8003bfc:	a825883a 	mov	r18,r21
 8003c00:	dc000717 	ldw	r16,28(sp)
 8003c04:	da000e17 	ldw	r8,56(sp)
 8003c08:	a027883a 	mov	r19,r20
 8003c0c:	146bc83a 	sub	r21,r2,r17
 8003c10:	003c6f06 	br	8002dd0 <___vfprintf_internal_r+0x85c>
 8003c14:	d8800517 	ldw	r2,20(sp)
 8003c18:	18800015 	stw	r2,0(r3)
 8003c1c:	003a8906 	br	8002644 <___vfprintf_internal_r+0xd0>
 8003c20:	d9801a04 	addi	r6,sp,104
 8003c24:	900b883a 	mov	r5,r18
 8003c28:	9809883a 	mov	r4,r19
 8003c2c:	8009b0c0 	call	8009b0c <__sprint_r>
 8003c30:	103b5f1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003c34:	d8c01c17 	ldw	r3,112(sp)
 8003c38:	dd401b17 	ldw	r21,108(sp)
 8003c3c:	df002704 	addi	fp,sp,156
 8003c40:	003e2b06 	br	80034f0 <___vfprintf_internal_r+0xf7c>
 8003c44:	d9801a04 	addi	r6,sp,104
 8003c48:	900b883a 	mov	r5,r18
 8003c4c:	9809883a 	mov	r4,r19
 8003c50:	8009b0c0 	call	8009b0c <__sprint_r>
 8003c54:	103b561e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003c58:	d8c01c17 	ldw	r3,112(sp)
 8003c5c:	dd401b17 	ldw	r21,108(sp)
 8003c60:	df002704 	addi	fp,sp,156
 8003c64:	003e2d06 	br	800351c <___vfprintf_internal_r+0xfa8>
 8003c68:	d9801a04 	addi	r6,sp,104
 8003c6c:	900b883a 	mov	r5,r18
 8003c70:	9809883a 	mov	r4,r19
 8003c74:	da001115 	stw	r8,68(sp)
 8003c78:	db400f15 	stw	r13,60(sp)
 8003c7c:	db800e15 	stw	r14,56(sp)
 8003c80:	8009b0c0 	call	8009b0c <__sprint_r>
 8003c84:	103b4a1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003c88:	d8c01c17 	ldw	r3,112(sp)
 8003c8c:	da001117 	ldw	r8,68(sp)
 8003c90:	db400f17 	ldw	r13,60(sp)
 8003c94:	db800e17 	ldw	r14,56(sp)
 8003c98:	dd802704 	addi	r22,sp,156
 8003c9c:	003b0706 	br	80028bc <___vfprintf_internal_r+0x348>
 8003ca0:	d8801b17 	ldw	r2,108(sp)
 8003ca4:	01020074 	movhi	r4,2049
 8003ca8:	21098404 	addi	r4,r4,9744
 8003cac:	10800044 	addi	r2,r2,1
 8003cb0:	18c00044 	addi	r3,r3,1
 8003cb4:	b1000015 	stw	r4,0(r22)
 8003cb8:	01000044 	movi	r4,1
 8003cbc:	d8801b15 	stw	r2,108(sp)
 8003cc0:	b1000115 	stw	r4,4(r22)
 8003cc4:	d8c01c15 	stw	r3,112(sp)
 8003cc8:	10800208 	cmpgei	r2,r2,8
 8003ccc:	1001641e 	bne	r2,zero,8004260 <___vfprintf_internal_r+0x1cec>
 8003cd0:	b5800204 	addi	r22,r22,8
 8003cd4:	2800bd1e 	bne	r5,zero,8003fcc <___vfprintf_internal_r+0x1a58>
 8003cd8:	d8800417 	ldw	r2,16(sp)
 8003cdc:	d9000817 	ldw	r4,32(sp)
 8003ce0:	1080004c 	andi	r2,r2,1
 8003ce4:	1104b03a 	or	r2,r2,r4
 8003ce8:	103b2026 	beq	r2,zero,800296c <___vfprintf_internal_r+0x3f8>
 8003cec:	d8800d17 	ldw	r2,52(sp)
 8003cf0:	d9000b17 	ldw	r4,44(sp)
 8003cf4:	b0800015 	stw	r2,0(r22)
 8003cf8:	d8801b17 	ldw	r2,108(sp)
 8003cfc:	20c7883a 	add	r3,r4,r3
 8003d00:	b1000115 	stw	r4,4(r22)
 8003d04:	10800044 	addi	r2,r2,1
 8003d08:	d8c01c15 	stw	r3,112(sp)
 8003d0c:	d8801b15 	stw	r2,108(sp)
 8003d10:	11000208 	cmpgei	r4,r2,8
 8003d14:	2001771e 	bne	r4,zero,80042f4 <___vfprintf_internal_r+0x1d80>
 8003d18:	b5800204 	addi	r22,r22,8
 8003d1c:	d9000817 	ldw	r4,32(sp)
 8003d20:	10800044 	addi	r2,r2,1
 8003d24:	d8801b15 	stw	r2,108(sp)
 8003d28:	20c7883a 	add	r3,r4,r3
 8003d2c:	b4400015 	stw	r17,0(r22)
 8003d30:	b1000115 	stw	r4,4(r22)
 8003d34:	d8c01c15 	stw	r3,112(sp)
 8003d38:	10800208 	cmpgei	r2,r2,8
 8003d3c:	103b0a26 	beq	r2,zero,8002968 <___vfprintf_internal_r+0x3f4>
 8003d40:	003e1906 	br	80035a8 <___vfprintf_internal_r+0x1034>
 8003d44:	8825883a 	mov	r18,r17
 8003d48:	003b1906 	br	80029b0 <___vfprintf_internal_r+0x43c>
 8003d4c:	d9000917 	ldw	r4,36(sp)
 8003d50:	d9400a17 	ldw	r5,40(sp)
 8003d54:	da000615 	stw	r8,24(sp)
 8003d58:	200d883a 	mov	r6,r4
 8003d5c:	280f883a 	mov	r7,r5
 8003d60:	db000415 	stw	r12,16(sp)
 8003d64:	800f33c0 	call	800f33c <__unorddf2>
 8003d68:	db000417 	ldw	r12,16(sp)
 8003d6c:	da000617 	ldw	r8,24(sp)
 8003d70:	1002061e 	bne	r2,zero,800458c <___vfprintf_internal_r+0x2018>
 8003d74:	057ff7c4 	movi	r21,-33
 8003d78:	40bfffe0 	cmpeqi	r2,r8,-1
 8003d7c:	e56a703a 	and	r21,fp,r21
 8003d80:	1001b41e 	bne	r2,zero,8004454 <___vfprintf_internal_r+0x1ee0>
 8003d84:	a88011d8 	cmpnei	r2,r21,71
 8003d88:	10015726 	beq	r2,zero,80042e8 <___vfprintf_internal_r+0x1d74>
 8003d8c:	60804014 	ori	r2,r12,256
 8003d90:	d8800415 	stw	r2,16(sp)
 8003d94:	d8800a17 	ldw	r2,40(sp)
 8003d98:	10012d16 	blt	r2,zero,8004250 <___vfprintf_internal_r+0x1cdc>
 8003d9c:	dd000a17 	ldw	r20,40(sp)
 8003da0:	d8000605 	stb	zero,24(sp)
 8003da4:	e08019a0 	cmpeqi	r2,fp,102
 8003da8:	d8800f15 	stw	r2,60(sp)
 8003dac:	1000d21e 	bne	r2,zero,80040f8 <___vfprintf_internal_r+0x1b84>
 8003db0:	e08011a0 	cmpeqi	r2,fp,70
 8003db4:	1000d01e 	bne	r2,zero,80040f8 <___vfprintf_internal_r+0x1b84>
 8003db8:	a8801158 	cmpnei	r2,r21,69
 8003dbc:	10016226 	beq	r2,zero,8004348 <___vfprintf_internal_r+0x1dd4>
 8003dc0:	d8801804 	addi	r2,sp,96
 8003dc4:	d8800315 	stw	r2,12(sp)
 8003dc8:	d9400917 	ldw	r5,36(sp)
 8003dcc:	d8801504 	addi	r2,sp,84
 8003dd0:	d8800215 	stw	r2,8(sp)
 8003dd4:	d8801404 	addi	r2,sp,80
 8003dd8:	da000015 	stw	r8,0(sp)
 8003ddc:	9809883a 	mov	r4,r19
 8003de0:	d8800115 	stw	r2,4(sp)
 8003de4:	01c00084 	movi	r7,2
 8003de8:	a00d883a 	mov	r6,r20
 8003dec:	db000815 	stw	r12,32(sp)
 8003df0:	da000715 	stw	r8,28(sp)
 8003df4:	8004ad80 	call	8004ad8 <_dtoa_r>
 8003df8:	da000717 	ldw	r8,28(sp)
 8003dfc:	e10019d8 	cmpnei	r4,fp,103
 8003e00:	db000817 	ldw	r12,32(sp)
 8003e04:	1023883a 	mov	r17,r2
 8003e08:	4007883a 	mov	r3,r8
 8003e0c:	2001621e 	bne	r4,zero,8004398 <___vfprintf_internal_r+0x1e24>
 8003e10:	6080004c 	andi	r2,r12,1
 8003e14:	1001621e 	bne	r2,zero,80043a0 <___vfprintf_internal_r+0x1e2c>
 8003e18:	d8801417 	ldw	r2,80(sp)
 8003e1c:	ad4011e0 	cmpeqi	r21,r21,71
 8003e20:	d8800715 	stw	r2,28(sp)
 8003e24:	d8801817 	ldw	r2,96(sp)
 8003e28:	1445c83a 	sub	r2,r2,r17
 8003e2c:	d8800815 	stw	r2,32(sp)
 8003e30:	a8000526 	beq	r21,zero,8003e48 <___vfprintf_internal_r+0x18d4>
 8003e34:	d8c00717 	ldw	r3,28(sp)
 8003e38:	18bfff50 	cmplti	r2,r3,-3
 8003e3c:	1000011e 	bne	r2,zero,8003e44 <___vfprintf_internal_r+0x18d0>
 8003e40:	40c1670e 	bge	r8,r3,80043e0 <___vfprintf_internal_r+0x1e6c>
 8003e44:	e73fff84 	addi	fp,fp,-2
 8003e48:	d8800717 	ldw	r2,28(sp)
 8003e4c:	df001645 	stb	fp,89(sp)
 8003e50:	157fffc4 	addi	r21,r2,-1
 8003e54:	dd401415 	stw	r21,80(sp)
 8003e58:	a801d416 	blt	r21,zero,80045ac <___vfprintf_internal_r+0x2038>
 8003e5c:	00800ac4 	movi	r2,43
 8003e60:	d8801685 	stb	r2,90(sp)
 8003e64:	a8800290 	cmplti	r2,r21,10
 8003e68:	1001c11e 	bne	r2,zero,8004570 <___vfprintf_internal_r+0x1ffc>
 8003e6c:	d98019c4 	addi	r6,sp,103
 8003e70:	9029883a 	mov	r20,r18
 8003e74:	dc400715 	stw	r17,28(sp)
 8003e78:	8025883a 	mov	r18,r16
 8003e7c:	db000f15 	stw	r12,60(sp)
 8003e80:	3021883a 	mov	r16,r6
 8003e84:	a809883a 	mov	r4,r21
 8003e88:	01400284 	movi	r5,10
 8003e8c:	800cd100 	call	800cd10 <__modsi3>
 8003e90:	10800c04 	addi	r2,r2,48
 8003e94:	a809883a 	mov	r4,r21
 8003e98:	80bfffc5 	stb	r2,-1(r16)
 8003e9c:	01400284 	movi	r5,10
 8003ea0:	800cc900 	call	800cc90 <__divsi3>
 8003ea4:	a9001908 	cmpgei	r4,r21,100
 8003ea8:	8023883a 	mov	r17,r16
 8003eac:	102b883a 	mov	r21,r2
 8003eb0:	843fffc4 	addi	r16,r16,-1
 8003eb4:	203ff31e 	bne	r4,zero,8003e84 <___vfprintf_internal_r+0x1910>
 8003eb8:	800d883a 	mov	r6,r16
 8003ebc:	11000c04 	addi	r4,r2,48
 8003ec0:	9021883a 	mov	r16,r18
 8003ec4:	a025883a 	mov	r18,r20
 8003ec8:	8829883a 	mov	r20,r17
 8003ecc:	a0bfff84 	addi	r2,r20,-2
 8003ed0:	313fffc5 	stb	r4,-1(r6)
 8003ed4:	d8c019c4 	addi	r3,sp,103
 8003ed8:	db000f17 	ldw	r12,60(sp)
 8003edc:	dc400717 	ldw	r17,28(sp)
 8003ee0:	10c1d62e 	bgeu	r2,r3,800463c <___vfprintf_internal_r+0x20c8>
 8003ee4:	d8c016c4 	addi	r3,sp,91
 8003ee8:	00000106 	br	8003ef0 <___vfprintf_internal_r+0x197c>
 8003eec:	11000003 	ldbu	r4,0(r2)
 8003ef0:	19000005 	stb	r4,0(r3)
 8003ef4:	10800044 	addi	r2,r2,1
 8003ef8:	d90019c4 	addi	r4,sp,103
 8003efc:	18c00044 	addi	r3,r3,1
 8003f00:	113ffa1e 	bne	r2,r4,8003eec <___vfprintf_internal_r+0x1978>
 8003f04:	d8801a44 	addi	r2,sp,105
 8003f08:	d8c016c4 	addi	r3,sp,91
 8003f0c:	1505c83a 	sub	r2,r2,r20
 8003f10:	1885883a 	add	r2,r3,r2
 8003f14:	d8c01644 	addi	r3,sp,89
 8003f18:	10c5c83a 	sub	r2,r2,r3
 8003f1c:	d8801015 	stw	r2,64(sp)
 8003f20:	d8c00817 	ldw	r3,32(sp)
 8003f24:	d9001017 	ldw	r4,64(sp)
 8003f28:	18800088 	cmpgei	r2,r3,2
 8003f2c:	192b883a 	add	r21,r3,r4
 8003f30:	1001aa26 	beq	r2,zero,80045dc <___vfprintf_internal_r+0x2068>
 8003f34:	d8800b17 	ldw	r2,44(sp)
 8003f38:	a8ab883a 	add	r21,r21,r2
 8003f3c:	a829883a 	mov	r20,r21
 8003f40:	a800010e 	bge	r21,zero,8003f48 <___vfprintf_internal_r+0x19d4>
 8003f44:	0029883a 	mov	r20,zero
 8003f48:	d8000715 	stw	zero,28(sp)
 8003f4c:	00009d06 	br	80041c4 <___vfprintf_internal_r+0x1c50>
 8003f50:	880f883a 	mov	r7,r17
 8003f54:	10800044 	addi	r2,r2,1
 8003f58:	1d47883a 	add	r3,r3,r21
 8003f5c:	b1c00015 	stw	r7,0(r22)
 8003f60:	003a7c06 	br	8002954 <___vfprintf_internal_r+0x3e0>
 8003f64:	d9801a04 	addi	r6,sp,104
 8003f68:	900b883a 	mov	r5,r18
 8003f6c:	9809883a 	mov	r4,r19
 8003f70:	8009b0c0 	call	8009b0c <__sprint_r>
 8003f74:	103a8e1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003f78:	d8c01c17 	ldw	r3,112(sp)
 8003f7c:	dd802704 	addi	r22,sp,156
 8003f80:	003c9706 	br	80031e0 <___vfprintf_internal_r+0xc6c>
 8003f84:	d9801a04 	addi	r6,sp,104
 8003f88:	900b883a 	mov	r5,r18
 8003f8c:	9809883a 	mov	r4,r19
 8003f90:	da000e15 	stw	r8,56(sp)
 8003f94:	8009b0c0 	call	8009b0c <__sprint_r>
 8003f98:	103a851e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8003f9c:	d8c01c17 	ldw	r3,112(sp)
 8003fa0:	da000e17 	ldw	r8,56(sp)
 8003fa4:	dd802704 	addi	r22,sp,156
 8003fa8:	003a6106 	br	8002930 <___vfprintf_internal_r+0x3bc>
 8003fac:	8809883a 	mov	r4,r17
 8003fb0:	db000415 	stw	r12,16(sp)
 8003fb4:	d8c00615 	stw	r3,24(sp)
 8003fb8:	80024dc0 	call	80024dc <strlen>
 8003fbc:	db000417 	ldw	r12,16(sp)
 8003fc0:	102b883a 	mov	r21,r2
 8003fc4:	1029883a 	mov	r20,r2
 8003fc8:	003a2f06 	br	8002888 <___vfprintf_internal_r+0x314>
 8003fcc:	d8800d17 	ldw	r2,52(sp)
 8003fd0:	d9000b17 	ldw	r4,44(sp)
 8003fd4:	b0800015 	stw	r2,0(r22)
 8003fd8:	d8801b17 	ldw	r2,108(sp)
 8003fdc:	20c7883a 	add	r3,r4,r3
 8003fe0:	b1000115 	stw	r4,4(r22)
 8003fe4:	10800044 	addi	r2,r2,1
 8003fe8:	d8c01c15 	stw	r3,112(sp)
 8003fec:	d8801b15 	stw	r2,108(sp)
 8003ff0:	11000208 	cmpgei	r4,r2,8
 8003ff4:	2000bf1e 	bne	r4,zero,80042f4 <___vfprintf_internal_r+0x1d80>
 8003ff8:	b5800204 	addi	r22,r22,8
 8003ffc:	283f470e 	bge	r5,zero,8003d1c <___vfprintf_internal_r+0x17a8>
 8004000:	01c20074 	movhi	r7,2049
 8004004:	293ffc08 	cmpgei	r4,r5,-16
 8004008:	39c98504 	addi	r7,r7,9748
 800400c:	0179c83a 	sub	fp,zero,r5
 8004010:	20013f1e 	bne	r4,zero,8004510 <___vfprintf_internal_r+0x1f9c>
 8004014:	dc000715 	stw	r16,28(sp)
 8004018:	05400404 	movi	r21,16
 800401c:	9021883a 	mov	r16,r18
 8004020:	3825883a 	mov	r18,r7
 8004024:	00000406 	br	8004038 <___vfprintf_internal_r+0x1ac4>
 8004028:	b5800204 	addi	r22,r22,8
 800402c:	e73ffc04 	addi	fp,fp,-16
 8004030:	e1800448 	cmpgei	r6,fp,17
 8004034:	30013326 	beq	r6,zero,8004504 <___vfprintf_internal_r+0x1f90>
 8004038:	10800044 	addi	r2,r2,1
 800403c:	18c00404 	addi	r3,r3,16
 8004040:	b4800015 	stw	r18,0(r22)
 8004044:	b5400115 	stw	r21,4(r22)
 8004048:	d8c01c15 	stw	r3,112(sp)
 800404c:	d8801b15 	stw	r2,108(sp)
 8004050:	11800208 	cmpgei	r6,r2,8
 8004054:	303ff426 	beq	r6,zero,8004028 <___vfprintf_internal_r+0x1ab4>
 8004058:	d9801a04 	addi	r6,sp,104
 800405c:	800b883a 	mov	r5,r16
 8004060:	9809883a 	mov	r4,r19
 8004064:	8009b0c0 	call	8009b0c <__sprint_r>
 8004068:	1001721e 	bne	r2,zero,8004634 <___vfprintf_internal_r+0x20c0>
 800406c:	d8c01c17 	ldw	r3,112(sp)
 8004070:	d8801b17 	ldw	r2,108(sp)
 8004074:	dd802704 	addi	r22,sp,156
 8004078:	003fec06 	br	800402c <___vfprintf_internal_r+0x1ab8>
 800407c:	800f883a 	mov	r7,r16
 8004080:	dc000717 	ldw	r16,28(sp)
 8004084:	8817883a 	mov	r11,r17
 8004088:	aa000044 	addi	r8,r21,1
 800408c:	e0800204 	addi	r2,fp,8
 8004090:	1ac7883a 	add	r3,r3,r11
 8004094:	e1c00015 	stw	r7,0(fp)
 8004098:	e2c00115 	stw	r11,4(fp)
 800409c:	d8c01c15 	stw	r3,112(sp)
 80040a0:	da001b15 	stw	r8,108(sp)
 80040a4:	41000208 	cmpgei	r4,r8,8
 80040a8:	203e701e 	bne	r4,zero,8003a6c <___vfprintf_internal_r+0x14f8>
 80040ac:	42000044 	addi	r8,r8,1
 80040b0:	15800204 	addi	r22,r2,8
 80040b4:	1039883a 	mov	fp,r2
 80040b8:	003d3206 	br	8003584 <___vfprintf_internal_r+0x1010>
 80040bc:	d8800617 	ldw	r2,24(sp)
 80040c0:	d8c00615 	stw	r3,24(sp)
 80040c4:	15000017 	ldw	r20,0(r2)
 80040c8:	a02bd7fa 	srai	r21,r20,31
 80040cc:	a805883a 	mov	r2,r21
 80040d0:	003b2d06 	br	8002d88 <___vfprintf_internal_r+0x814>
 80040d4:	d8800617 	ldw	r2,24(sp)
 80040d8:	002b883a 	mov	r21,zero
 80040dc:	d8c00615 	stw	r3,24(sp)
 80040e0:	15000017 	ldw	r20,0(r2)
 80040e4:	0005883a 	mov	r2,zero
 80040e8:	003a6e06 	br	8002aa4 <___vfprintf_internal_r+0x530>
 80040ec:	04420074 	movhi	r17,2049
 80040f0:	8c497404 	addi	r17,r17,9680
 80040f4:	003ac606 	br	8002c10 <___vfprintf_internal_r+0x69c>
 80040f8:	d8801804 	addi	r2,sp,96
 80040fc:	d8800315 	stw	r2,12(sp)
 8004100:	d9400917 	ldw	r5,36(sp)
 8004104:	d8801504 	addi	r2,sp,84
 8004108:	d8800215 	stw	r2,8(sp)
 800410c:	d8801404 	addi	r2,sp,80
 8004110:	da000015 	stw	r8,0(sp)
 8004114:	d8800115 	stw	r2,4(sp)
 8004118:	01c000c4 	movi	r7,3
 800411c:	a00d883a 	mov	r6,r20
 8004120:	9809883a 	mov	r4,r19
 8004124:	db000815 	stw	r12,32(sp)
 8004128:	da000715 	stw	r8,28(sp)
 800412c:	8004ad80 	call	8004ad8 <_dtoa_r>
 8004130:	da000717 	ldw	r8,28(sp)
 8004134:	1023883a 	mov	r17,r2
 8004138:	db000817 	ldw	r12,32(sp)
 800413c:	1207883a 	add	r3,r2,r8
 8004140:	88800007 	ldb	r2,0(r17)
 8004144:	10800c20 	cmpeqi	r2,r2,48
 8004148:	1000571e 	bne	r2,zero,80042a8 <___vfprintf_internal_r+0x1d34>
 800414c:	d8801417 	ldw	r2,80(sp)
 8004150:	1893883a 	add	r9,r3,r2
 8004154:	d9000917 	ldw	r4,36(sp)
 8004158:	000d883a 	mov	r6,zero
 800415c:	000f883a 	mov	r7,zero
 8004160:	a00b883a 	mov	r5,r20
 8004164:	da401115 	stw	r9,68(sp)
 8004168:	da000815 	stw	r8,32(sp)
 800416c:	db000715 	stw	r12,28(sp)
 8004170:	800e08c0 	call	800e08c <__eqdf2>
 8004174:	db000717 	ldw	r12,28(sp)
 8004178:	da000817 	ldw	r8,32(sp)
 800417c:	da401117 	ldw	r9,68(sp)
 8004180:	1000891e 	bne	r2,zero,80043a8 <___vfprintf_internal_r+0x1e34>
 8004184:	4805883a 	mov	r2,r9
 8004188:	d8c01417 	ldw	r3,80(sp)
 800418c:	1445c83a 	sub	r2,r2,r17
 8004190:	ad4011d8 	cmpnei	r21,r21,71
 8004194:	d8c00715 	stw	r3,28(sp)
 8004198:	d8800815 	stw	r2,32(sp)
 800419c:	a83f2526 	beq	r21,zero,8003e34 <___vfprintf_internal_r+0x18c0>
 80041a0:	d8800f17 	ldw	r2,60(sp)
 80041a4:	103f2826 	beq	r2,zero,8003e48 <___vfprintf_internal_r+0x18d4>
 80041a8:	d8c00717 	ldw	r3,28(sp)
 80041ac:	6080004c 	andi	r2,r12,1
 80041b0:	1204b03a 	or	r2,r2,r8
 80041b4:	00c1140e 	bge	zero,r3,8004608 <___vfprintf_internal_r+0x2094>
 80041b8:	1001011e 	bne	r2,zero,80045c0 <___vfprintf_internal_r+0x204c>
 80041bc:	dd400717 	ldw	r21,28(sp)
 80041c0:	a829883a 	mov	r20,r21
 80041c4:	d8800607 	ldb	r2,24(sp)
 80041c8:	10008026 	beq	r2,zero,80043cc <___vfprintf_internal_r+0x1e58>
 80041cc:	00800b44 	movi	r2,45
 80041d0:	d8801345 	stb	r2,77(sp)
 80041d4:	d8800e17 	ldw	r2,56(sp)
 80041d8:	0011883a 	mov	r8,zero
 80041dc:	d8800615 	stw	r2,24(sp)
 80041e0:	003b0306 	br	8002df0 <___vfprintf_internal_r+0x87c>
 80041e4:	d8800617 	ldw	r2,24(sp)
 80041e8:	002b883a 	mov	r21,zero
 80041ec:	d8c00615 	stw	r3,24(sp)
 80041f0:	15000017 	ldw	r20,0(r2)
 80041f4:	00800044 	movi	r2,1
 80041f8:	003a2a06 	br	8002aa4 <___vfprintf_internal_r+0x530>
 80041fc:	d8800617 	ldw	r2,24(sp)
 8004200:	002b883a 	mov	r21,zero
 8004204:	d8c00615 	stw	r3,24(sp)
 8004208:	15000017 	ldw	r20,0(r2)
 800420c:	003b1306 	br	8002e5c <___vfprintf_internal_r+0x8e8>
 8004210:	800f883a 	mov	r7,r16
 8004214:	dc000e17 	ldw	r16,56(sp)
 8004218:	10800044 	addi	r2,r2,1
 800421c:	1d47883a 	add	r3,r3,r21
 8004220:	d8801b15 	stw	r2,108(sp)
 8004224:	b1c00015 	stw	r7,0(r22)
 8004228:	b5400115 	stw	r21,4(r22)
 800422c:	d8c01c15 	stw	r3,112(sp)
 8004230:	10800208 	cmpgei	r2,r2,8
 8004234:	10003a1e 	bne	r2,zero,8004320 <___vfprintf_internal_r+0x1dac>
 8004238:	b5800204 	addi	r22,r22,8
 800423c:	003d5406 	br	8003790 <___vfprintf_internal_r+0x121c>
 8004240:	00800b44 	movi	r2,45
 8004244:	d8801345 	stb	r2,77(sp)
 8004248:	03400b44 	movi	r13,45
 800424c:	003a6c06 	br	8002c00 <___vfprintf_internal_r+0x68c>
 8004250:	1520003c 	xorhi	r20,r2,32768
 8004254:	00800b44 	movi	r2,45
 8004258:	d8800605 	stb	r2,24(sp)
 800425c:	003ed106 	br	8003da4 <___vfprintf_internal_r+0x1830>
 8004260:	d9801a04 	addi	r6,sp,104
 8004264:	900b883a 	mov	r5,r18
 8004268:	9809883a 	mov	r4,r19
 800426c:	8009b0c0 	call	8009b0c <__sprint_r>
 8004270:	1039cf1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004274:	d9401417 	ldw	r5,80(sp)
 8004278:	d8c01c17 	ldw	r3,112(sp)
 800427c:	dd802704 	addi	r22,sp,156
 8004280:	003e9406 	br	8003cd4 <___vfprintf_internal_r+0x1760>
 8004284:	05400184 	movi	r21,6
 8004288:	003e1706 	br	8003ae8 <___vfprintf_internal_r+0x1574>
 800428c:	d9401345 	stb	r5,77(sp)
 8004290:	00397706 	br	8002870 <___vfprintf_internal_r+0x2fc>
 8004294:	d9801a04 	addi	r6,sp,104
 8004298:	900b883a 	mov	r5,r18
 800429c:	9809883a 	mov	r4,r19
 80042a0:	8009b0c0 	call	8009b0c <__sprint_r>
 80042a4:	0039c206 	br	80029b0 <___vfprintf_internal_r+0x43c>
 80042a8:	d9000917 	ldw	r4,36(sp)
 80042ac:	000d883a 	mov	r6,zero
 80042b0:	000f883a 	mov	r7,zero
 80042b4:	a00b883a 	mov	r5,r20
 80042b8:	d8c01115 	stw	r3,68(sp)
 80042bc:	da000815 	stw	r8,32(sp)
 80042c0:	db000715 	stw	r12,28(sp)
 80042c4:	800e08c0 	call	800e08c <__eqdf2>
 80042c8:	db000717 	ldw	r12,28(sp)
 80042cc:	da000817 	ldw	r8,32(sp)
 80042d0:	d8c01117 	ldw	r3,68(sp)
 80042d4:	103f9d26 	beq	r2,zero,800414c <___vfprintf_internal_r+0x1bd8>
 80042d8:	00800044 	movi	r2,1
 80042dc:	1205c83a 	sub	r2,r2,r8
 80042e0:	d8801415 	stw	r2,80(sp)
 80042e4:	003f9a06 	br	8004150 <___vfprintf_internal_r+0x1bdc>
 80042e8:	403ea81e 	bne	r8,zero,8003d8c <___vfprintf_internal_r+0x1818>
 80042ec:	02000044 	movi	r8,1
 80042f0:	003ea606 	br	8003d8c <___vfprintf_internal_r+0x1818>
 80042f4:	d9801a04 	addi	r6,sp,104
 80042f8:	900b883a 	mov	r5,r18
 80042fc:	9809883a 	mov	r4,r19
 8004300:	8009b0c0 	call	8009b0c <__sprint_r>
 8004304:	1039aa1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004308:	d9401417 	ldw	r5,80(sp)
 800430c:	d8c01c17 	ldw	r3,112(sp)
 8004310:	d8801b17 	ldw	r2,108(sp)
 8004314:	dd802704 	addi	r22,sp,156
 8004318:	283e800e 	bge	r5,zero,8003d1c <___vfprintf_internal_r+0x17a8>
 800431c:	003f3806 	br	8004000 <___vfprintf_internal_r+0x1a8c>
 8004320:	d9801a04 	addi	r6,sp,104
 8004324:	900b883a 	mov	r5,r18
 8004328:	9809883a 	mov	r4,r19
 800432c:	8009b0c0 	call	8009b0c <__sprint_r>
 8004330:	10399f1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004334:	d8c01c17 	ldw	r3,112(sp)
 8004338:	dd802704 	addi	r22,sp,156
 800433c:	003d1406 	br	8003790 <___vfprintf_internal_r+0x121c>
 8004340:	db000417 	ldw	r12,16(sp)
 8004344:	003a9d06 	br	8002dbc <___vfprintf_internal_r+0x848>
 8004348:	d8801804 	addi	r2,sp,96
 800434c:	d8800315 	stw	r2,12(sp)
 8004350:	d9400917 	ldw	r5,36(sp)
 8004354:	d8801504 	addi	r2,sp,84
 8004358:	40c00044 	addi	r3,r8,1
 800435c:	d8800215 	stw	r2,8(sp)
 8004360:	d8801404 	addi	r2,sp,80
 8004364:	d8c00015 	stw	r3,0(sp)
 8004368:	d8800115 	stw	r2,4(sp)
 800436c:	01c00084 	movi	r7,2
 8004370:	a00d883a 	mov	r6,r20
 8004374:	9809883a 	mov	r4,r19
 8004378:	db001115 	stw	r12,68(sp)
 800437c:	da000815 	stw	r8,32(sp)
 8004380:	d8c00715 	stw	r3,28(sp)
 8004384:	8004ad80 	call	8004ad8 <_dtoa_r>
 8004388:	d8c00717 	ldw	r3,28(sp)
 800438c:	da000817 	ldw	r8,32(sp)
 8004390:	db001117 	ldw	r12,68(sp)
 8004394:	1023883a 	mov	r17,r2
 8004398:	e08011d8 	cmpnei	r2,fp,71
 800439c:	103e9c26 	beq	r2,zero,8003e10 <___vfprintf_internal_r+0x189c>
 80043a0:	88d3883a 	add	r9,r17,r3
 80043a4:	003f6b06 	br	8004154 <___vfprintf_internal_r+0x1be0>
 80043a8:	d8801817 	ldw	r2,96(sp)
 80043ac:	127f762e 	bgeu	r2,r9,8004188 <___vfprintf_internal_r+0x1c14>
 80043b0:	01000c04 	movi	r4,48
 80043b4:	10c00044 	addi	r3,r2,1
 80043b8:	d8c01815 	stw	r3,96(sp)
 80043bc:	11000005 	stb	r4,0(r2)
 80043c0:	d8801817 	ldw	r2,96(sp)
 80043c4:	127ffb36 	bltu	r2,r9,80043b4 <___vfprintf_internal_r+0x1e40>
 80043c8:	003f6f06 	br	8004188 <___vfprintf_internal_r+0x1c14>
 80043cc:	d8800e17 	ldw	r2,56(sp)
 80043d0:	db401343 	ldbu	r13,77(sp)
 80043d4:	0011883a 	mov	r8,zero
 80043d8:	d8800615 	stw	r2,24(sp)
 80043dc:	003a8006 	br	8002de0 <___vfprintf_internal_r+0x86c>
 80043e0:	d8800717 	ldw	r2,28(sp)
 80043e4:	d8c00817 	ldw	r3,32(sp)
 80043e8:	10c02b16 	blt	r2,r3,8004498 <___vfprintf_internal_r+0x1f24>
 80043ec:	6300004c 	andi	r12,r12,1
 80043f0:	6000581e 	bne	r12,zero,8004554 <___vfprintf_internal_r+0x1fe0>
 80043f4:	1029883a 	mov	r20,r2
 80043f8:	1000010e 	bge	r2,zero,8004400 <___vfprintf_internal_r+0x1e8c>
 80043fc:	0029883a 	mov	r20,zero
 8004400:	dd400717 	ldw	r21,28(sp)
 8004404:	070019c4 	movi	fp,103
 8004408:	003f6e06 	br	80041c4 <___vfprintf_internal_r+0x1c50>
 800440c:	d9801a04 	addi	r6,sp,104
 8004410:	900b883a 	mov	r5,r18
 8004414:	9809883a 	mov	r4,r19
 8004418:	8009b0c0 	call	8009b0c <__sprint_r>
 800441c:	1039641e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004420:	dd401417 	ldw	r21,80(sp)
 8004424:	d8c01c17 	ldw	r3,112(sp)
 8004428:	dd802704 	addi	r22,sp,156
 800442c:	003ce706 	br	80037cc <___vfprintf_internal_r+0x1258>
 8004430:	d9801a04 	addi	r6,sp,104
 8004434:	900b883a 	mov	r5,r18
 8004438:	9809883a 	mov	r4,r19
 800443c:	8009b0c0 	call	8009b0c <__sprint_r>
 8004440:	10395b1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004444:	d8c01c17 	ldw	r3,112(sp)
 8004448:	dd802704 	addi	r22,sp,156
 800444c:	a83ccd0e 	bge	r21,zero,8003784 <___vfprintf_internal_r+0x1210>
 8004450:	003d9106 	br	8003a98 <___vfprintf_internal_r+0x1524>
 8004454:	02000184 	movi	r8,6
 8004458:	003e4c06 	br	8003d8c <___vfprintf_internal_r+0x1818>
 800445c:	d9801a04 	addi	r6,sp,104
 8004460:	900b883a 	mov	r5,r18
 8004464:	9809883a 	mov	r4,r19
 8004468:	8009b0c0 	call	8009b0c <__sprint_r>
 800446c:	1039501e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004470:	d8801417 	ldw	r2,80(sp)
 8004474:	d9000817 	ldw	r4,32(sp)
 8004478:	d8c01c17 	ldw	r3,112(sp)
 800447c:	dd802704 	addi	r22,sp,156
 8004480:	2085c83a 	sub	r2,r4,r2
 8004484:	003ce506 	br	800381c <___vfprintf_internal_r+0x12a8>
 8004488:	4029883a 	mov	r20,r8
 800448c:	d8c00615 	stw	r3,24(sp)
 8004490:	402b883a 	mov	r21,r8
 8004494:	0038fc06 	br	8002888 <___vfprintf_internal_r+0x314>
 8004498:	d8800817 	ldw	r2,32(sp)
 800449c:	d8c00b17 	ldw	r3,44(sp)
 80044a0:	10eb883a 	add	r21,r2,r3
 80044a4:	d8800717 	ldw	r2,28(sp)
 80044a8:	00800316 	blt	zero,r2,80044b8 <___vfprintf_internal_r+0x1f44>
 80044ac:	d8800717 	ldw	r2,28(sp)
 80044b0:	a8abc83a 	sub	r21,r21,r2
 80044b4:	ad400044 	addi	r21,r21,1
 80044b8:	a829883a 	mov	r20,r21
 80044bc:	a8002a16 	blt	r21,zero,8004568 <___vfprintf_internal_r+0x1ff4>
 80044c0:	070019c4 	movi	fp,103
 80044c4:	003f3f06 	br	80041c4 <___vfprintf_internal_r+0x1c50>
 80044c8:	d9401345 	stb	r5,77(sp)
 80044cc:	003ae006 	br	8003050 <___vfprintf_internal_r+0xadc>
 80044d0:	d9401345 	stb	r5,77(sp)
 80044d4:	003a5706 	br	8002e34 <___vfprintf_internal_r+0x8c0>
 80044d8:	d9401345 	stb	r5,77(sp)
 80044dc:	003b1706 	br	800313c <___vfprintf_internal_r+0xbc8>
 80044e0:	d9401345 	stb	r5,77(sp)
 80044e4:	003a2006 	br	8002d68 <___vfprintf_internal_r+0x7f4>
 80044e8:	d9401345 	stb	r5,77(sp)
 80044ec:	003a6606 	br	8002e88 <___vfprintf_internal_r+0x914>
 80044f0:	d9401345 	stb	r5,77(sp)
 80044f4:	00399706 	br	8002b54 <___vfprintf_internal_r+0x5e0>
 80044f8:	00bfffc4 	movi	r2,-1
 80044fc:	d8800515 	stw	r2,20(sp)
 8004500:	00392e06 	br	80029bc <___vfprintf_internal_r+0x448>
 8004504:	900f883a 	mov	r7,r18
 8004508:	8025883a 	mov	r18,r16
 800450c:	dc000717 	ldw	r16,28(sp)
 8004510:	10800044 	addi	r2,r2,1
 8004514:	1f07883a 	add	r3,r3,fp
 8004518:	b1c00015 	stw	r7,0(r22)
 800451c:	b7000115 	stw	fp,4(r22)
 8004520:	d8c01c15 	stw	r3,112(sp)
 8004524:	d8801b15 	stw	r2,108(sp)
 8004528:	11000208 	cmpgei	r4,r2,8
 800452c:	203dfa26 	beq	r4,zero,8003d18 <___vfprintf_internal_r+0x17a4>
 8004530:	d9801a04 	addi	r6,sp,104
 8004534:	900b883a 	mov	r5,r18
 8004538:	9809883a 	mov	r4,r19
 800453c:	8009b0c0 	call	8009b0c <__sprint_r>
 8004540:	10391b1e 	bne	r2,zero,80029b0 <___vfprintf_internal_r+0x43c>
 8004544:	d8c01c17 	ldw	r3,112(sp)
 8004548:	d8801b17 	ldw	r2,108(sp)
 800454c:	dd802704 	addi	r22,sp,156
 8004550:	003df206 	br	8003d1c <___vfprintf_internal_r+0x17a8>
 8004554:	d8800717 	ldw	r2,28(sp)
 8004558:	d8c00b17 	ldw	r3,44(sp)
 800455c:	10eb883a 	add	r21,r2,r3
 8004560:	a829883a 	mov	r20,r21
 8004564:	a83fd60e 	bge	r21,zero,80044c0 <___vfprintf_internal_r+0x1f4c>
 8004568:	0029883a 	mov	r20,zero
 800456c:	003fd406 	br	80044c0 <___vfprintf_internal_r+0x1f4c>
 8004570:	00800c04 	movi	r2,48
 8004574:	ad400c04 	addi	r21,r21,48
 8004578:	d88016c5 	stb	r2,91(sp)
 800457c:	00800104 	movi	r2,4
 8004580:	dd401705 	stb	r21,92(sp)
 8004584:	d8801015 	stw	r2,64(sp)
 8004588:	003e6506 	br	8003f20 <___vfprintf_internal_r+0x19ac>
 800458c:	d8800a17 	ldw	r2,40(sp)
 8004590:	10001916 	blt	r2,zero,80045f8 <___vfprintf_internal_r+0x2084>
 8004594:	db401343 	ldbu	r13,77(sp)
 8004598:	e0801210 	cmplti	r2,fp,72
 800459c:	1000131e 	bne	r2,zero,80045ec <___vfprintf_internal_r+0x2078>
 80045a0:	04420074 	movhi	r17,2049
 80045a4:	8c497704 	addi	r17,r17,9692
 80045a8:	00399906 	br	8002c10 <___vfprintf_internal_r+0x69c>
 80045ac:	05400044 	movi	r21,1
 80045b0:	a8abc83a 	sub	r21,r21,r2
 80045b4:	00800b44 	movi	r2,45
 80045b8:	d8801685 	stb	r2,90(sp)
 80045bc:	003e2906 	br	8003e64 <___vfprintf_internal_r+0x18f0>
 80045c0:	d8800b17 	ldw	r2,44(sp)
 80045c4:	18ab883a 	add	r21,r3,r2
 80045c8:	aa2b883a 	add	r21,r21,r8
 80045cc:	a829883a 	mov	r20,r21
 80045d0:	a83efc0e 	bge	r21,zero,80041c4 <___vfprintf_internal_r+0x1c50>
 80045d4:	0029883a 	mov	r20,zero
 80045d8:	003efa06 	br	80041c4 <___vfprintf_internal_r+0x1c50>
 80045dc:	6080004c 	andi	r2,r12,1
 80045e0:	d8800715 	stw	r2,28(sp)
 80045e4:	103e531e 	bne	r2,zero,8003f34 <___vfprintf_internal_r+0x19c0>
 80045e8:	003ff806 	br	80045cc <___vfprintf_internal_r+0x2058>
 80045ec:	04420074 	movhi	r17,2049
 80045f0:	8c497604 	addi	r17,r17,9688
 80045f4:	00398606 	br	8002c10 <___vfprintf_internal_r+0x69c>
 80045f8:	00800b44 	movi	r2,45
 80045fc:	d8801345 	stb	r2,77(sp)
 8004600:	03400b44 	movi	r13,45
 8004604:	003fe406 	br	8004598 <___vfprintf_internal_r+0x2024>
 8004608:	1000031e 	bne	r2,zero,8004618 <___vfprintf_internal_r+0x20a4>
 800460c:	05000044 	movi	r20,1
 8004610:	05400044 	movi	r21,1
 8004614:	003eeb06 	br	80041c4 <___vfprintf_internal_r+0x1c50>
 8004618:	d8800b17 	ldw	r2,44(sp)
 800461c:	15400044 	addi	r21,r2,1
 8004620:	aa2b883a 	add	r21,r21,r8
 8004624:	003fe906 	br	80045cc <___vfprintf_internal_r+0x2058>
 8004628:	b005883a 	mov	r2,r22
 800462c:	39c98504 	addi	r7,r7,9748
 8004630:	003e9706 	br	8004090 <___vfprintf_internal_r+0x1b1c>
 8004634:	8025883a 	mov	r18,r16
 8004638:	0038dd06 	br	80029b0 <___vfprintf_internal_r+0x43c>
 800463c:	00800084 	movi	r2,2
 8004640:	d8801015 	stw	r2,64(sp)
 8004644:	003e3606 	br	8003f20 <___vfprintf_internal_r+0x19ac>
 8004648:	d8c00617 	ldw	r3,24(sp)
 800464c:	1a000017 	ldw	r8,0(r3)
 8004650:	18c00104 	addi	r3,r3,4
 8004654:	4000010e 	bge	r8,zero,800465c <___vfprintf_internal_r+0x20e8>
 8004658:	023fffc4 	movi	r8,-1
 800465c:	bf000043 	ldbu	fp,1(r23)
 8004660:	d8c00615 	stw	r3,24(sp)
 8004664:	102f883a 	mov	r23,r2
 8004668:	e2c03fcc 	andi	r11,fp,255
 800466c:	5ac0201c 	xori	r11,r11,128
 8004670:	5affe004 	addi	r11,r11,-128
 8004674:	00380b06 	br	80026a4 <___vfprintf_internal_r+0x130>

08004678 <__vfprintf_internal>:
 8004678:	00c20074 	movhi	r3,2049
 800467c:	2005883a 	mov	r2,r4
 8004680:	1911f217 	ldw	r4,18376(r3)
 8004684:	300f883a 	mov	r7,r6
 8004688:	280d883a 	mov	r6,r5
 800468c:	100b883a 	mov	r5,r2
 8004690:	80025741 	jmpi	8002574 <___vfprintf_internal_r>

08004694 <__sbprintf>:
 8004694:	2880030b 	ldhu	r2,12(r5)
 8004698:	2b001917 	ldw	r12,100(r5)
 800469c:	2ac0038b 	ldhu	r11,14(r5)
 80046a0:	2a800717 	ldw	r10,28(r5)
 80046a4:	2a400917 	ldw	r9,36(r5)
 80046a8:	defee204 	addi	sp,sp,-1144
 80046ac:	da001a04 	addi	r8,sp,104
 80046b0:	00c10004 	movi	r3,1024
 80046b4:	dc011a15 	stw	r16,1128(sp)
 80046b8:	10bfff4c 	andi	r2,r2,65533
 80046bc:	2821883a 	mov	r16,r5
 80046c0:	d80b883a 	mov	r5,sp
 80046c4:	dc811c15 	stw	r18,1136(sp)
 80046c8:	dc411b15 	stw	r17,1132(sp)
 80046cc:	dfc11d15 	stw	ra,1140(sp)
 80046d0:	2025883a 	mov	r18,r4
 80046d4:	d880030d 	sth	r2,12(sp)
 80046d8:	db001915 	stw	r12,100(sp)
 80046dc:	dac0038d 	sth	r11,14(sp)
 80046e0:	da800715 	stw	r10,28(sp)
 80046e4:	da400915 	stw	r9,36(sp)
 80046e8:	da000015 	stw	r8,0(sp)
 80046ec:	da000415 	stw	r8,16(sp)
 80046f0:	d8c00215 	stw	r3,8(sp)
 80046f4:	d8c00515 	stw	r3,20(sp)
 80046f8:	d8000615 	stw	zero,24(sp)
 80046fc:	80025740 	call	8002574 <___vfprintf_internal_r>
 8004700:	1023883a 	mov	r17,r2
 8004704:	10000d0e 	bge	r2,zero,800473c <__sbprintf+0xa8>
 8004708:	d880030b 	ldhu	r2,12(sp)
 800470c:	1080100c 	andi	r2,r2,64
 8004710:	10000326 	beq	r2,zero,8004720 <__sbprintf+0x8c>
 8004714:	8080030b 	ldhu	r2,12(r16)
 8004718:	10801014 	ori	r2,r2,64
 800471c:	8080030d 	sth	r2,12(r16)
 8004720:	8805883a 	mov	r2,r17
 8004724:	dfc11d17 	ldw	ra,1140(sp)
 8004728:	dc811c17 	ldw	r18,1136(sp)
 800472c:	dc411b17 	ldw	r17,1132(sp)
 8004730:	dc011a17 	ldw	r16,1128(sp)
 8004734:	dec11e04 	addi	sp,sp,1144
 8004738:	f800283a 	ret
 800473c:	d80b883a 	mov	r5,sp
 8004740:	9009883a 	mov	r4,r18
 8004744:	80064480 	call	8006448 <_fflush_r>
 8004748:	103fef26 	beq	r2,zero,8004708 <__sbprintf+0x74>
 800474c:	047fffc4 	movi	r17,-1
 8004750:	003fed06 	br	8004708 <__sbprintf+0x74>

08004754 <__swsetup_r>:
 8004754:	00820074 	movhi	r2,2049
 8004758:	1091f217 	ldw	r2,18376(r2)
 800475c:	defffd04 	addi	sp,sp,-12
 8004760:	dc400115 	stw	r17,4(sp)
 8004764:	dc000015 	stw	r16,0(sp)
 8004768:	dfc00215 	stw	ra,8(sp)
 800476c:	2023883a 	mov	r17,r4
 8004770:	2821883a 	mov	r16,r5
 8004774:	10000226 	beq	r2,zero,8004780 <__swsetup_r+0x2c>
 8004778:	10c00e17 	ldw	r3,56(r2)
 800477c:	18001f26 	beq	r3,zero,80047fc <__swsetup_r+0xa8>
 8004780:	8180030b 	ldhu	r6,12(r16)
 8004784:	30c0020c 	andi	r3,r6,8
 8004788:	3005883a 	mov	r2,r6
 800478c:	18002126 	beq	r3,zero,8004814 <__swsetup_r+0xc0>
 8004790:	80c00417 	ldw	r3,16(r16)
 8004794:	18002826 	beq	r3,zero,8004838 <__swsetup_r+0xe4>
 8004798:	1100004c 	andi	r4,r2,1
 800479c:	20000b1e 	bne	r4,zero,80047cc <__swsetup_r+0x78>
 80047a0:	1100008c 	andi	r4,r2,2
 80047a4:	20002e1e 	bne	r4,zero,8004860 <__swsetup_r+0x10c>
 80047a8:	81000517 	ldw	r4,20(r16)
 80047ac:	81000215 	stw	r4,8(r16)
 80047b0:	18000b26 	beq	r3,zero,80047e0 <__swsetup_r+0x8c>
 80047b4:	0005883a 	mov	r2,zero
 80047b8:	dfc00217 	ldw	ra,8(sp)
 80047bc:	dc400117 	ldw	r17,4(sp)
 80047c0:	dc000017 	ldw	r16,0(sp)
 80047c4:	dec00304 	addi	sp,sp,12
 80047c8:	f800283a 	ret
 80047cc:	81000517 	ldw	r4,20(r16)
 80047d0:	80000215 	stw	zero,8(r16)
 80047d4:	0109c83a 	sub	r4,zero,r4
 80047d8:	81000615 	stw	r4,24(r16)
 80047dc:	183ff51e 	bne	r3,zero,80047b4 <__swsetup_r+0x60>
 80047e0:	10c0200c 	andi	r3,r2,128
 80047e4:	0005883a 	mov	r2,zero
 80047e8:	183ff326 	beq	r3,zero,80047b8 <__swsetup_r+0x64>
 80047ec:	31801014 	ori	r6,r6,64
 80047f0:	8180030d 	sth	r6,12(r16)
 80047f4:	00bfffc4 	movi	r2,-1
 80047f8:	003fef06 	br	80047b8 <__swsetup_r+0x64>
 80047fc:	1009883a 	mov	r4,r2
 8004800:	80068900 	call	8006890 <__sinit>
 8004804:	8180030b 	ldhu	r6,12(r16)
 8004808:	30c0020c 	andi	r3,r6,8
 800480c:	3005883a 	mov	r2,r6
 8004810:	183fdf1e 	bne	r3,zero,8004790 <__swsetup_r+0x3c>
 8004814:	3080040c 	andi	r2,r6,16
 8004818:	10002126 	beq	r2,zero,80048a0 <__swsetup_r+0x14c>
 800481c:	3080010c 	andi	r2,r6,4
 8004820:	1000111e 	bne	r2,zero,8004868 <__swsetup_r+0x114>
 8004824:	80c00417 	ldw	r3,16(r16)
 8004828:	30800214 	ori	r2,r6,8
 800482c:	8080030d 	sth	r2,12(r16)
 8004830:	100d883a 	mov	r6,r2
 8004834:	183fd81e 	bne	r3,zero,8004798 <__swsetup_r+0x44>
 8004838:	1100a00c 	andi	r4,r2,640
 800483c:	21008020 	cmpeqi	r4,r4,512
 8004840:	203fd51e 	bne	r4,zero,8004798 <__swsetup_r+0x44>
 8004844:	800b883a 	mov	r5,r16
 8004848:	8809883a 	mov	r4,r17
 800484c:	80073180 	call	8007318 <__smakebuf_r>
 8004850:	8180030b 	ldhu	r6,12(r16)
 8004854:	80c00417 	ldw	r3,16(r16)
 8004858:	3005883a 	mov	r2,r6
 800485c:	003fce06 	br	8004798 <__swsetup_r+0x44>
 8004860:	0009883a 	mov	r4,zero
 8004864:	003fd106 	br	80047ac <__swsetup_r+0x58>
 8004868:	81400c17 	ldw	r5,48(r16)
 800486c:	28000626 	beq	r5,zero,8004888 <__swsetup_r+0x134>
 8004870:	80801004 	addi	r2,r16,64
 8004874:	28800326 	beq	r5,r2,8004884 <__swsetup_r+0x130>
 8004878:	8809883a 	mov	r4,r17
 800487c:	80069f40 	call	80069f4 <_free_r>
 8004880:	8180030b 	ldhu	r6,12(r16)
 8004884:	80000c15 	stw	zero,48(r16)
 8004888:	80c00417 	ldw	r3,16(r16)
 800488c:	00bff6c4 	movi	r2,-37
 8004890:	118c703a 	and	r6,r2,r6
 8004894:	80000115 	stw	zero,4(r16)
 8004898:	80c00015 	stw	r3,0(r16)
 800489c:	003fe206 	br	8004828 <__swsetup_r+0xd4>
 80048a0:	00800244 	movi	r2,9
 80048a4:	88800015 	stw	r2,0(r17)
 80048a8:	31801014 	ori	r6,r6,64
 80048ac:	8180030d 	sth	r6,12(r16)
 80048b0:	00bfffc4 	movi	r2,-1
 80048b4:	003fc006 	br	80047b8 <__swsetup_r+0x64>

080048b8 <quorem>:
 80048b8:	defff204 	addi	sp,sp,-56
 80048bc:	dc400515 	stw	r17,20(sp)
 80048c0:	20800417 	ldw	r2,16(r4)
 80048c4:	2c400417 	ldw	r17,16(r5)
 80048c8:	dfc00d15 	stw	ra,52(sp)
 80048cc:	df000c15 	stw	fp,48(sp)
 80048d0:	ddc00b15 	stw	r23,44(sp)
 80048d4:	dd800a15 	stw	r22,40(sp)
 80048d8:	dd400915 	stw	r21,36(sp)
 80048dc:	dd000815 	stw	r20,32(sp)
 80048e0:	dcc00715 	stw	r19,28(sp)
 80048e4:	dc800615 	stw	r18,24(sp)
 80048e8:	dc000415 	stw	r16,16(sp)
 80048ec:	d9000115 	stw	r4,4(sp)
 80048f0:	d9400215 	stw	r5,8(sp)
 80048f4:	14407616 	blt	r2,r17,8004ad0 <quorem+0x218>
 80048f8:	8c7fffc4 	addi	r17,r17,-1
 80048fc:	882a90ba 	slli	r21,r17,2
 8004900:	2f000504 	addi	fp,r5,20
 8004904:	25800504 	addi	r22,r4,20
 8004908:	e565883a 	add	r18,fp,r21
 800490c:	b545883a 	add	r2,r22,r21
 8004910:	95c00017 	ldw	r23,0(r18)
 8004914:	15000017 	ldw	r20,0(r2)
 8004918:	dd800015 	stw	r22,0(sp)
 800491c:	bdc00044 	addi	r23,r23,1
 8004920:	b80b883a 	mov	r5,r23
 8004924:	a009883a 	mov	r4,r20
 8004928:	d8800315 	stw	r2,12(sp)
 800492c:	800cd840 	call	800cd84 <__udivsi3>
 8004930:	1021883a 	mov	r16,r2
 8004934:	a5c02f36 	bltu	r20,r23,80049f4 <quorem+0x13c>
 8004938:	e029883a 	mov	r20,fp
 800493c:	002b883a 	mov	r21,zero
 8004940:	002f883a 	mov	r23,zero
 8004944:	a4c00017 	ldw	r19,0(r20)
 8004948:	800b883a 	mov	r5,r16
 800494c:	b5800104 	addi	r22,r22,4
 8004950:	993fffcc 	andi	r4,r19,65535
 8004954:	800ce440 	call	800ce44 <__mulsi3>
 8004958:	9808d43a 	srli	r4,r19,16
 800495c:	800b883a 	mov	r5,r16
 8004960:	156b883a 	add	r21,r2,r21
 8004964:	800ce440 	call	800ce44 <__mulsi3>
 8004968:	b0ffff17 	ldw	r3,-4(r22)
 800496c:	a80ad43a 	srli	r5,r21,16
 8004970:	a93fffcc 	andi	r4,r21,65535
 8004974:	19bfffcc 	andi	r6,r3,65535
 8004978:	b909c83a 	sub	r4,r23,r4
 800497c:	2189883a 	add	r4,r4,r6
 8004980:	1806d43a 	srli	r3,r3,16
 8004984:	1145883a 	add	r2,r2,r5
 8004988:	200bd43a 	srai	r5,r4,16
 800498c:	11bfffcc 	andi	r6,r2,65535
 8004990:	1987c83a 	sub	r3,r3,r6
 8004994:	1947883a 	add	r3,r3,r5
 8004998:	180a943a 	slli	r5,r3,16
 800499c:	213fffcc 	andi	r4,r4,65535
 80049a0:	a5000104 	addi	r20,r20,4
 80049a4:	2908b03a 	or	r4,r5,r4
 80049a8:	b13fff15 	stw	r4,-4(r22)
 80049ac:	102ad43a 	srli	r21,r2,16
 80049b0:	182fd43a 	srai	r23,r3,16
 80049b4:	953fe32e 	bgeu	r18,r20,8004944 <quorem+0x8c>
 80049b8:	d8c00317 	ldw	r3,12(sp)
 80049bc:	18800017 	ldw	r2,0(r3)
 80049c0:	10000c1e 	bne	r2,zero,80049f4 <quorem+0x13c>
 80049c4:	d8800017 	ldw	r2,0(sp)
 80049c8:	1d7fff04 	addi	r21,r3,-4
 80049cc:	15400436 	bltu	r2,r21,80049e0 <quorem+0x128>
 80049d0:	00000606 	br	80049ec <quorem+0x134>
 80049d4:	d8800017 	ldw	r2,0(sp)
 80049d8:	8c7fffc4 	addi	r17,r17,-1
 80049dc:	1540032e 	bgeu	r2,r21,80049ec <quorem+0x134>
 80049e0:	a8800017 	ldw	r2,0(r21)
 80049e4:	ad7fff04 	addi	r21,r21,-4
 80049e8:	103ffa26 	beq	r2,zero,80049d4 <quorem+0x11c>
 80049ec:	d8800117 	ldw	r2,4(sp)
 80049f0:	14400415 	stw	r17,16(r2)
 80049f4:	d9400217 	ldw	r5,8(sp)
 80049f8:	d9000117 	ldw	r4,4(sp)
 80049fc:	8008be00 	call	8008be0 <__mcmp>
 8004a00:	10002616 	blt	r2,zero,8004a9c <quorem+0x1e4>
 8004a04:	d9400017 	ldw	r5,0(sp)
 8004a08:	84000044 	addi	r16,r16,1
 8004a0c:	0007883a 	mov	r3,zero
 8004a10:	e1000017 	ldw	r4,0(fp)
 8004a14:	29800017 	ldw	r6,0(r5)
 8004a18:	29400104 	addi	r5,r5,4
 8004a1c:	20bfffcc 	andi	r2,r4,65535
 8004a20:	1887c83a 	sub	r3,r3,r2
 8004a24:	30bfffcc 	andi	r2,r6,65535
 8004a28:	1885883a 	add	r2,r3,r2
 8004a2c:	2008d43a 	srli	r4,r4,16
 8004a30:	3006d43a 	srli	r3,r6,16
 8004a34:	100fd43a 	srai	r7,r2,16
 8004a38:	11bfffcc 	andi	r6,r2,65535
 8004a3c:	1907c83a 	sub	r3,r3,r4
 8004a40:	19c7883a 	add	r3,r3,r7
 8004a44:	1804943a 	slli	r2,r3,16
 8004a48:	e7000104 	addi	fp,fp,4
 8004a4c:	1807d43a 	srai	r3,r3,16
 8004a50:	1184b03a 	or	r2,r2,r6
 8004a54:	28bfff15 	stw	r2,-4(r5)
 8004a58:	973fed2e 	bgeu	r18,fp,8004a10 <quorem+0x158>
 8004a5c:	880490ba 	slli	r2,r17,2
 8004a60:	d9000017 	ldw	r4,0(sp)
 8004a64:	2085883a 	add	r2,r4,r2
 8004a68:	10c00017 	ldw	r3,0(r2)
 8004a6c:	18000b1e 	bne	r3,zero,8004a9c <quorem+0x1e4>
 8004a70:	10bfff04 	addi	r2,r2,-4
 8004a74:	20800436 	bltu	r4,r2,8004a88 <quorem+0x1d0>
 8004a78:	00000606 	br	8004a94 <quorem+0x1dc>
 8004a7c:	d8c00017 	ldw	r3,0(sp)
 8004a80:	8c7fffc4 	addi	r17,r17,-1
 8004a84:	1880032e 	bgeu	r3,r2,8004a94 <quorem+0x1dc>
 8004a88:	10c00017 	ldw	r3,0(r2)
 8004a8c:	10bfff04 	addi	r2,r2,-4
 8004a90:	183ffa26 	beq	r3,zero,8004a7c <quorem+0x1c4>
 8004a94:	d8800117 	ldw	r2,4(sp)
 8004a98:	14400415 	stw	r17,16(r2)
 8004a9c:	8005883a 	mov	r2,r16
 8004aa0:	dfc00d17 	ldw	ra,52(sp)
 8004aa4:	df000c17 	ldw	fp,48(sp)
 8004aa8:	ddc00b17 	ldw	r23,44(sp)
 8004aac:	dd800a17 	ldw	r22,40(sp)
 8004ab0:	dd400917 	ldw	r21,36(sp)
 8004ab4:	dd000817 	ldw	r20,32(sp)
 8004ab8:	dcc00717 	ldw	r19,28(sp)
 8004abc:	dc800617 	ldw	r18,24(sp)
 8004ac0:	dc400517 	ldw	r17,20(sp)
 8004ac4:	dc000417 	ldw	r16,16(sp)
 8004ac8:	dec00e04 	addi	sp,sp,56
 8004acc:	f800283a 	ret
 8004ad0:	0005883a 	mov	r2,zero
 8004ad4:	003ff206 	br	8004aa0 <quorem+0x1e8>

08004ad8 <_dtoa_r>:
 8004ad8:	20801017 	ldw	r2,64(r4)
 8004adc:	deffe204 	addi	sp,sp,-120
 8004ae0:	ddc01b15 	stw	r23,108(sp)
 8004ae4:	dcc01715 	stw	r19,92(sp)
 8004ae8:	dc801615 	stw	r18,88(sp)
 8004aec:	dc401515 	stw	r17,84(sp)
 8004af0:	dc001415 	stw	r16,80(sp)
 8004af4:	dfc01d15 	stw	ra,116(sp)
 8004af8:	df001c15 	stw	fp,112(sp)
 8004afc:	dd801a15 	stw	r22,104(sp)
 8004b00:	dd401915 	stw	r21,100(sp)
 8004b04:	dd001815 	stw	r20,96(sp)
 8004b08:	d9c00215 	stw	r7,8(sp)
 8004b0c:	dc002017 	ldw	r16,128(sp)
 8004b10:	202f883a 	mov	r23,r4
 8004b14:	3025883a 	mov	r18,r6
 8004b18:	2827883a 	mov	r19,r5
 8004b1c:	3023883a 	mov	r17,r6
 8004b20:	10000826 	beq	r2,zero,8004b44 <_dtoa_r+0x6c>
 8004b24:	21801117 	ldw	r6,68(r4)
 8004b28:	00c00044 	movi	r3,1
 8004b2c:	100b883a 	mov	r5,r2
 8004b30:	1986983a 	sll	r3,r3,r6
 8004b34:	11800115 	stw	r6,4(r2)
 8004b38:	10c00215 	stw	r3,8(r2)
 8004b3c:	80081d00 	call	80081d0 <_Bfree>
 8004b40:	b8001015 	stw	zero,64(r23)
 8004b44:	90018816 	blt	r18,zero,8005168 <_dtoa_r+0x690>
 8004b48:	80000015 	stw	zero,0(r16)
 8004b4c:	909ffc2c 	andhi	r2,r18,32752
 8004b50:	00dffc34 	movhi	r3,32752
 8004b54:	10c18d26 	beq	r2,r3,800518c <_dtoa_r+0x6b4>
 8004b58:	000d883a 	mov	r6,zero
 8004b5c:	000f883a 	mov	r7,zero
 8004b60:	9809883a 	mov	r4,r19
 8004b64:	880b883a 	mov	r5,r17
 8004b68:	800e08c0 	call	800e08c <__eqdf2>
 8004b6c:	1000191e 	bne	r2,zero,8004bd4 <_dtoa_r+0xfc>
 8004b70:	d8c01f17 	ldw	r3,124(sp)
 8004b74:	00800044 	movi	r2,1
 8004b78:	18800015 	stw	r2,0(r3)
 8004b7c:	d8802117 	ldw	r2,132(sp)
 8004b80:	1002f926 	beq	r2,zero,8005768 <_dtoa_r+0xc90>
 8004b84:	d9002117 	ldw	r4,132(sp)
 8004b88:	00820074 	movhi	r2,2049
 8004b8c:	10898444 	addi	r2,r2,9745
 8004b90:	00c20074 	movhi	r3,2049
 8004b94:	20800015 	stw	r2,0(r4)
 8004b98:	18898404 	addi	r2,r3,9744
 8004b9c:	d8800115 	stw	r2,4(sp)
 8004ba0:	d8800117 	ldw	r2,4(sp)
 8004ba4:	dfc01d17 	ldw	ra,116(sp)
 8004ba8:	df001c17 	ldw	fp,112(sp)
 8004bac:	ddc01b17 	ldw	r23,108(sp)
 8004bb0:	dd801a17 	ldw	r22,104(sp)
 8004bb4:	dd401917 	ldw	r21,100(sp)
 8004bb8:	dd001817 	ldw	r20,96(sp)
 8004bbc:	dcc01717 	ldw	r19,92(sp)
 8004bc0:	dc801617 	ldw	r18,88(sp)
 8004bc4:	dc401517 	ldw	r17,84(sp)
 8004bc8:	dc001417 	ldw	r16,80(sp)
 8004bcc:	dec01e04 	addi	sp,sp,120
 8004bd0:	f800283a 	ret
 8004bd4:	d8801204 	addi	r2,sp,72
 8004bd8:	9020d53a 	srli	r16,r18,20
 8004bdc:	d8800015 	stw	r2,0(sp)
 8004be0:	d9c01304 	addi	r7,sp,76
 8004be4:	980b883a 	mov	r5,r19
 8004be8:	880d883a 	mov	r6,r17
 8004bec:	b809883a 	mov	r4,r23
 8004bf0:	8008fc80 	call	8008fc8 <__d2b>
 8004bf4:	1039883a 	mov	fp,r2
 8004bf8:	8001771e 	bne	r16,zero,80051d8 <_dtoa_r+0x700>
 8004bfc:	dd001217 	ldw	r20,72(sp)
 8004c00:	dc001317 	ldw	r16,76(sp)
 8004c04:	a421883a 	add	r16,r20,r16
 8004c08:	80810c84 	addi	r2,r16,1074
 8004c0c:	10c00850 	cmplti	r3,r2,33
 8004c10:	1802e51e 	bne	r3,zero,80057a8 <_dtoa_r+0xcd0>
 8004c14:	01001004 	movi	r4,64
 8004c18:	2085c83a 	sub	r2,r4,r2
 8004c1c:	81010484 	addi	r4,r16,1042
 8004c20:	90a4983a 	sll	r18,r18,r2
 8004c24:	9908d83a 	srl	r4,r19,r4
 8004c28:	9108b03a 	or	r4,r18,r4
 8004c2c:	800f4c80 	call	800f4c8 <__floatunsidf>
 8004c30:	1009883a 	mov	r4,r2
 8004c34:	017f8434 	movhi	r5,65040
 8004c38:	00800044 	movi	r2,1
 8004c3c:	194b883a 	add	r5,r3,r5
 8004c40:	843fffc4 	addi	r16,r16,-1
 8004c44:	d8800a15 	stw	r2,40(sp)
 8004c48:	000d883a 	mov	r6,zero
 8004c4c:	01cffe34 	movhi	r7,16376
 8004c50:	800ea880 	call	800ea88 <__subdf3>
 8004c54:	0198dbf4 	movhi	r6,25455
 8004c58:	01cff4f4 	movhi	r7,16339
 8004c5c:	3190d844 	addi	r6,r6,17249
 8004c60:	39e1e9c4 	addi	r7,r7,-30809
 8004c64:	1009883a 	mov	r4,r2
 8004c68:	180b883a 	mov	r5,r3
 8004c6c:	800e2dc0 	call	800e2dc <__muldf3>
 8004c70:	01a2d874 	movhi	r6,35681
 8004c74:	01cff1f4 	movhi	r7,16327
 8004c78:	31b22cc4 	addi	r6,r6,-14157
 8004c7c:	39e28a04 	addi	r7,r7,-30168
 8004c80:	180b883a 	mov	r5,r3
 8004c84:	1009883a 	mov	r4,r2
 8004c88:	800ce6c0 	call	800ce6c <__adddf3>
 8004c8c:	8009883a 	mov	r4,r16
 8004c90:	102b883a 	mov	r21,r2
 8004c94:	1825883a 	mov	r18,r3
 8004c98:	800f4100 	call	800f410 <__floatsidf>
 8004c9c:	019427f4 	movhi	r6,20639
 8004ca0:	01cff4f4 	movhi	r7,16339
 8004ca4:	319e7ec4 	addi	r6,r6,31227
 8004ca8:	39d104c4 	addi	r7,r7,17427
 8004cac:	1009883a 	mov	r4,r2
 8004cb0:	180b883a 	mov	r5,r3
 8004cb4:	800e2dc0 	call	800e2dc <__muldf3>
 8004cb8:	100d883a 	mov	r6,r2
 8004cbc:	180f883a 	mov	r7,r3
 8004cc0:	a809883a 	mov	r4,r21
 8004cc4:	900b883a 	mov	r5,r18
 8004cc8:	800ce6c0 	call	800ce6c <__adddf3>
 8004ccc:	1009883a 	mov	r4,r2
 8004cd0:	180b883a 	mov	r5,r3
 8004cd4:	1025883a 	mov	r18,r2
 8004cd8:	182d883a 	mov	r22,r3
 8004cdc:	800f3900 	call	800f390 <__fixdfsi>
 8004ce0:	000d883a 	mov	r6,zero
 8004ce4:	000f883a 	mov	r7,zero
 8004ce8:	9009883a 	mov	r4,r18
 8004cec:	b00b883a 	mov	r5,r22
 8004cf0:	102b883a 	mov	r21,r2
 8004cf4:	d8800315 	stw	r2,12(sp)
 8004cf8:	800e1f40 	call	800e1f4 <__ledf2>
 8004cfc:	10028f16 	blt	r2,zero,800573c <_dtoa_r+0xc64>
 8004d00:	dc800317 	ldw	r18,12(sp)
 8004d04:	a421c83a 	sub	r16,r20,r16
 8004d08:	85bfffc4 	addi	r22,r16,-1
 8004d0c:	908005e8 	cmpgeui	r2,r18,23
 8004d10:	1002821e 	bne	r2,zero,800571c <_dtoa_r+0xc44>
 8004d14:	900690fa 	slli	r3,r18,3
 8004d18:	00820074 	movhi	r2,2049
 8004d1c:	1089cd04 	addi	r2,r2,10036
 8004d20:	10c5883a 	add	r2,r2,r3
 8004d24:	11800017 	ldw	r6,0(r2)
 8004d28:	11c00117 	ldw	r7,4(r2)
 8004d2c:	9809883a 	mov	r4,r19
 8004d30:	880b883a 	mov	r5,r17
 8004d34:	800e1f40 	call	800e1f4 <__ledf2>
 8004d38:	1002550e 	bge	r2,zero,8005690 <_dtoa_r+0xbb8>
 8004d3c:	90bfffc4 	addi	r2,r18,-1
 8004d40:	d8800315 	stw	r2,12(sp)
 8004d44:	d8000915 	stw	zero,36(sp)
 8004d48:	b0027716 	blt	r22,zero,8005728 <_dtoa_r+0xc50>
 8004d4c:	d8000615 	stw	zero,24(sp)
 8004d50:	d8800317 	ldw	r2,12(sp)
 8004d54:	1002510e 	bge	r2,zero,800569c <_dtoa_r+0xbc4>
 8004d58:	d8800317 	ldw	r2,12(sp)
 8004d5c:	d8c00617 	ldw	r3,24(sp)
 8004d60:	d8000315 	stw	zero,12(sp)
 8004d64:	d8800415 	stw	r2,16(sp)
 8004d68:	1887c83a 	sub	r3,r3,r2
 8004d6c:	d8c00615 	stw	r3,24(sp)
 8004d70:	0087c83a 	sub	r3,zero,r2
 8004d74:	d8c00815 	stw	r3,32(sp)
 8004d78:	d8c00217 	ldw	r3,8(sp)
 8004d7c:	188002a8 	cmpgeui	r2,r3,10
 8004d80:	10024d1e 	bne	r2,zero,80056b8 <_dtoa_r+0xbe0>
 8004d84:	18800190 	cmplti	r2,r3,6
 8004d88:	10028b1e 	bne	r2,zero,80057b8 <_dtoa_r+0xce0>
 8004d8c:	18bfff04 	addi	r2,r3,-4
 8004d90:	d8800215 	stw	r2,8(sp)
 8004d94:	0021883a 	mov	r16,zero
 8004d98:	d8c00217 	ldw	r3,8(sp)
 8004d9c:	18800120 	cmpeqi	r2,r3,4
 8004da0:	10035d1e 	bne	r2,zero,8005b18 <_dtoa_r+0x1040>
 8004da4:	18800160 	cmpeqi	r2,r3,5
 8004da8:	10031b1e 	bne	r2,zero,8005a18 <_dtoa_r+0xf40>
 8004dac:	188000a0 	cmpeqi	r2,r3,2
 8004db0:	10024d26 	beq	r2,zero,80056e8 <_dtoa_r+0xc10>
 8004db4:	d8000715 	stw	zero,28(sp)
 8004db8:	d8801e17 	ldw	r2,120(sp)
 8004dbc:	0083260e 	bge	zero,r2,8005a58 <_dtoa_r+0xf80>
 8004dc0:	d8800b15 	stw	r2,44(sp)
 8004dc4:	d8800515 	stw	r2,20(sp)
 8004dc8:	100d883a 	mov	r6,r2
 8004dcc:	b8001115 	stw	zero,68(r23)
 8004dd0:	30800610 	cmplti	r2,r6,24
 8004dd4:	1004f11e 	bne	r2,zero,800619c <_dtoa_r+0x16c4>
 8004dd8:	00c00044 	movi	r3,1
 8004ddc:	00800104 	movi	r2,4
 8004de0:	1085883a 	add	r2,r2,r2
 8004de4:	11000504 	addi	r4,r2,20
 8004de8:	180b883a 	mov	r5,r3
 8004dec:	18c00044 	addi	r3,r3,1
 8004df0:	313ffb2e 	bgeu	r6,r4,8004de0 <_dtoa_r+0x308>
 8004df4:	b9401115 	stw	r5,68(r23)
 8004df8:	b809883a 	mov	r4,r23
 8004dfc:	800812c0 	call	800812c <_Balloc>
 8004e00:	d8800115 	stw	r2,4(sp)
 8004e04:	1004de26 	beq	r2,zero,8006180 <_dtoa_r+0x16a8>
 8004e08:	d8800117 	ldw	r2,4(sp)
 8004e0c:	b8801015 	stw	r2,64(r23)
 8004e10:	d8800517 	ldw	r2,20(sp)
 8004e14:	108003e8 	cmpgeui	r2,r2,15
 8004e18:	1001021e 	bne	r2,zero,8005224 <_dtoa_r+0x74c>
 8004e1c:	80010126 	beq	r16,zero,8005224 <_dtoa_r+0x74c>
 8004e20:	d9000417 	ldw	r4,16(sp)
 8004e24:	01038b0e 	bge	zero,r4,8005c54 <_dtoa_r+0x117c>
 8004e28:	208003cc 	andi	r2,r4,15
 8004e2c:	100690fa 	slli	r3,r2,3
 8004e30:	2029d13a 	srai	r20,r4,4
 8004e34:	00820074 	movhi	r2,2049
 8004e38:	1089cd04 	addi	r2,r2,10036
 8004e3c:	10c5883a 	add	r2,r2,r3
 8004e40:	a0c0040c 	andi	r3,r20,16
 8004e44:	12800017 	ldw	r10,0(r2)
 8004e48:	12400117 	ldw	r9,4(r2)
 8004e4c:	18032c26 	beq	r3,zero,8005b00 <_dtoa_r+0x1028>
 8004e50:	00820074 	movhi	r2,2049
 8004e54:	1089c304 	addi	r2,r2,9996
 8004e58:	11800817 	ldw	r6,32(r2)
 8004e5c:	11c00917 	ldw	r7,36(r2)
 8004e60:	9809883a 	mov	r4,r19
 8004e64:	880b883a 	mov	r5,r17
 8004e68:	da400e15 	stw	r9,56(sp)
 8004e6c:	da800d15 	stw	r10,52(sp)
 8004e70:	800d75c0 	call	800d75c <__divdf3>
 8004e74:	da800d17 	ldw	r10,52(sp)
 8004e78:	da400e17 	ldw	r9,56(sp)
 8004e7c:	a50003cc 	andi	r20,r20,15
 8004e80:	d8800c15 	stw	r2,48(sp)
 8004e84:	1825883a 	mov	r18,r3
 8004e88:	054000c4 	movi	r21,3
 8004e8c:	a0001126 	beq	r20,zero,8004ed4 <_dtoa_r+0x3fc>
 8004e90:	04020074 	movhi	r16,2049
 8004e94:	8409c304 	addi	r16,r16,9996
 8004e98:	5009883a 	mov	r4,r10
 8004e9c:	480b883a 	mov	r5,r9
 8004ea0:	a180004c 	andi	r6,r20,1
 8004ea4:	30000626 	beq	r6,zero,8004ec0 <_dtoa_r+0x3e8>
 8004ea8:	81800017 	ldw	r6,0(r16)
 8004eac:	81c00117 	ldw	r7,4(r16)
 8004eb0:	ad400044 	addi	r21,r21,1
 8004eb4:	800e2dc0 	call	800e2dc <__muldf3>
 8004eb8:	1009883a 	mov	r4,r2
 8004ebc:	180b883a 	mov	r5,r3
 8004ec0:	a029d07a 	srai	r20,r20,1
 8004ec4:	84000204 	addi	r16,r16,8
 8004ec8:	a03ff51e 	bne	r20,zero,8004ea0 <_dtoa_r+0x3c8>
 8004ecc:	2015883a 	mov	r10,r4
 8004ed0:	2813883a 	mov	r9,r5
 8004ed4:	d9000c17 	ldw	r4,48(sp)
 8004ed8:	900b883a 	mov	r5,r18
 8004edc:	500d883a 	mov	r6,r10
 8004ee0:	480f883a 	mov	r7,r9
 8004ee4:	800d75c0 	call	800d75c <__divdf3>
 8004ee8:	1021883a 	mov	r16,r2
 8004eec:	1825883a 	mov	r18,r3
 8004ef0:	d8800917 	ldw	r2,36(sp)
 8004ef4:	10000626 	beq	r2,zero,8004f10 <_dtoa_r+0x438>
 8004ef8:	000d883a 	mov	r6,zero
 8004efc:	01cffc34 	movhi	r7,16368
 8004f00:	8009883a 	mov	r4,r16
 8004f04:	900b883a 	mov	r5,r18
 8004f08:	800e1f40 	call	800e1f4 <__ledf2>
 8004f0c:	10044416 	blt	r2,zero,8006020 <_dtoa_r+0x1548>
 8004f10:	a809883a 	mov	r4,r21
 8004f14:	800f4100 	call	800f410 <__floatsidf>
 8004f18:	800d883a 	mov	r6,r16
 8004f1c:	900f883a 	mov	r7,r18
 8004f20:	1009883a 	mov	r4,r2
 8004f24:	180b883a 	mov	r5,r3
 8004f28:	800e2dc0 	call	800e2dc <__muldf3>
 8004f2c:	000d883a 	mov	r6,zero
 8004f30:	01d00734 	movhi	r7,16412
 8004f34:	1009883a 	mov	r4,r2
 8004f38:	180b883a 	mov	r5,r3
 8004f3c:	800ce6c0 	call	800ce6c <__adddf3>
 8004f40:	1029883a 	mov	r20,r2
 8004f44:	00bf3034 	movhi	r2,64704
 8004f48:	1885883a 	add	r2,r3,r2
 8004f4c:	d8800c15 	stw	r2,48(sp)
 8004f50:	d8800517 	ldw	r2,20(sp)
 8004f54:	10032226 	beq	r2,zero,8005be0 <_dtoa_r+0x1108>
 8004f58:	d8800417 	ldw	r2,16(sp)
 8004f5c:	d8801115 	stw	r2,68(sp)
 8004f60:	d8800517 	ldw	r2,20(sp)
 8004f64:	d8800d15 	stw	r2,52(sp)
 8004f68:	d8800d17 	ldw	r2,52(sp)
 8004f6c:	900b883a 	mov	r5,r18
 8004f70:	8009883a 	mov	r4,r16
 8004f74:	10bfffc4 	addi	r2,r2,-1
 8004f78:	100690fa 	slli	r3,r2,3
 8004f7c:	00820074 	movhi	r2,2049
 8004f80:	1089cd04 	addi	r2,r2,10036
 8004f84:	10c5883a 	add	r2,r2,r3
 8004f88:	12800017 	ldw	r10,0(r2)
 8004f8c:	12c00117 	ldw	r11,4(r2)
 8004f90:	da800f15 	stw	r10,60(sp)
 8004f94:	dac00e15 	stw	r11,56(sp)
 8004f98:	800f3900 	call	800f390 <__fixdfsi>
 8004f9c:	1009883a 	mov	r4,r2
 8004fa0:	10800c04 	addi	r2,r2,48
 8004fa4:	d8801015 	stw	r2,64(sp)
 8004fa8:	800f4100 	call	800f410 <__floatsidf>
 8004fac:	8009883a 	mov	r4,r16
 8004fb0:	100d883a 	mov	r6,r2
 8004fb4:	180f883a 	mov	r7,r3
 8004fb8:	900b883a 	mov	r5,r18
 8004fbc:	800ea880 	call	800ea88 <__subdf3>
 8004fc0:	d9000117 	ldw	r4,4(sp)
 8004fc4:	dac00e17 	ldw	r11,56(sp)
 8004fc8:	da800f17 	ldw	r10,60(sp)
 8004fcc:	1825883a 	mov	r18,r3
 8004fd0:	d8c00717 	ldw	r3,28(sp)
 8004fd4:	25400044 	addi	r21,r4,1
 8004fd8:	1021883a 	mov	r16,r2
 8004fdc:	500d883a 	mov	r6,r10
 8004fe0:	580f883a 	mov	r7,r11
 8004fe4:	1803b626 	beq	r3,zero,8005ec0 <_dtoa_r+0x13e8>
 8004fe8:	0009883a 	mov	r4,zero
 8004fec:	014ff834 	movhi	r5,16352
 8004ff0:	800d75c0 	call	800d75c <__divdf3>
 8004ff4:	d9c00c17 	ldw	r7,48(sp)
 8004ff8:	a00d883a 	mov	r6,r20
 8004ffc:	1009883a 	mov	r4,r2
 8005000:	180b883a 	mov	r5,r3
 8005004:	800ea880 	call	800ea88 <__subdf3>
 8005008:	d9000117 	ldw	r4,4(sp)
 800500c:	1029883a 	mov	r20,r2
 8005010:	d8801017 	ldw	r2,64(sp)
 8005014:	800d883a 	mov	r6,r16
 8005018:	900f883a 	mov	r7,r18
 800501c:	20800005 	stb	r2,0(r4)
 8005020:	180b883a 	mov	r5,r3
 8005024:	a009883a 	mov	r4,r20
 8005028:	d8c00c15 	stw	r3,48(sp)
 800502c:	800e10c0 	call	800e10c <__gedf2>
 8005030:	0083e716 	blt	zero,r2,8005fd0 <_dtoa_r+0x14f8>
 8005034:	0005883a 	mov	r2,zero
 8005038:	dd800e15 	stw	r22,56(sp)
 800503c:	dc400f15 	stw	r17,60(sp)
 8005040:	dd800d17 	ldw	r22,52(sp)
 8005044:	dc400c17 	ldw	r17,48(sp)
 8005048:	ddc00d15 	stw	r23,52(sp)
 800504c:	dcc00c15 	stw	r19,48(sp)
 8005050:	1027883a 	mov	r19,r2
 8005054:	00002606 	br	80050f0 <_dtoa_r+0x618>
 8005058:	9cc00044 	addi	r19,r19,1
 800505c:	9d806d0e 	bge	r19,r22,8005214 <_dtoa_r+0x73c>
 8005060:	a009883a 	mov	r4,r20
 8005064:	880b883a 	mov	r5,r17
 8005068:	000d883a 	mov	r6,zero
 800506c:	01d00934 	movhi	r7,16420
 8005070:	800e2dc0 	call	800e2dc <__muldf3>
 8005074:	000d883a 	mov	r6,zero
 8005078:	01d00934 	movhi	r7,16420
 800507c:	8009883a 	mov	r4,r16
 8005080:	900b883a 	mov	r5,r18
 8005084:	1029883a 	mov	r20,r2
 8005088:	1823883a 	mov	r17,r3
 800508c:	800e2dc0 	call	800e2dc <__muldf3>
 8005090:	180b883a 	mov	r5,r3
 8005094:	1009883a 	mov	r4,r2
 8005098:	1821883a 	mov	r16,r3
 800509c:	1025883a 	mov	r18,r2
 80050a0:	800f3900 	call	800f390 <__fixdfsi>
 80050a4:	1009883a 	mov	r4,r2
 80050a8:	102f883a 	mov	r23,r2
 80050ac:	800f4100 	call	800f410 <__floatsidf>
 80050b0:	9009883a 	mov	r4,r18
 80050b4:	800b883a 	mov	r5,r16
 80050b8:	100d883a 	mov	r6,r2
 80050bc:	180f883a 	mov	r7,r3
 80050c0:	800ea880 	call	800ea88 <__subdf3>
 80050c4:	ad400044 	addi	r21,r21,1
 80050c8:	ba000c04 	addi	r8,r23,48
 80050cc:	aa3fffc5 	stb	r8,-1(r21)
 80050d0:	a00d883a 	mov	r6,r20
 80050d4:	880f883a 	mov	r7,r17
 80050d8:	1009883a 	mov	r4,r2
 80050dc:	180b883a 	mov	r5,r3
 80050e0:	1021883a 	mov	r16,r2
 80050e4:	1825883a 	mov	r18,r3
 80050e8:	800e1f40 	call	800e1f4 <__ledf2>
 80050ec:	10040516 	blt	r2,zero,8006104 <_dtoa_r+0x162c>
 80050f0:	800d883a 	mov	r6,r16
 80050f4:	900f883a 	mov	r7,r18
 80050f8:	0009883a 	mov	r4,zero
 80050fc:	014ffc34 	movhi	r5,16368
 8005100:	800ea880 	call	800ea88 <__subdf3>
 8005104:	a00d883a 	mov	r6,r20
 8005108:	880f883a 	mov	r7,r17
 800510c:	1009883a 	mov	r4,r2
 8005110:	180b883a 	mov	r5,r3
 8005114:	800e1f40 	call	800e1f4 <__ledf2>
 8005118:	103fcf0e 	bge	r2,zero,8005058 <_dtoa_r+0x580>
 800511c:	d8801117 	ldw	r2,68(sp)
 8005120:	ddc00d17 	ldw	r23,52(sp)
 8005124:	d9000117 	ldw	r4,4(sp)
 8005128:	10800044 	addi	r2,r2,1
 800512c:	d8800415 	stw	r2,16(sp)
 8005130:	a829883a 	mov	r20,r21
 8005134:	00000106 	br	800513c <_dtoa_r+0x664>
 8005138:	a103da26 	beq	r20,r4,80060a4 <_dtoa_r+0x15cc>
 800513c:	a0ffffc3 	ldbu	r3,-1(r20)
 8005140:	a02b883a 	mov	r21,r20
 8005144:	a53fffc4 	addi	r20,r20,-1
 8005148:	18803fcc 	andi	r2,r3,255
 800514c:	1080201c 	xori	r2,r2,128
 8005150:	10bfe004 	addi	r2,r2,-128
 8005154:	10800e60 	cmpeqi	r2,r2,57
 8005158:	103ff71e 	bne	r2,zero,8005138 <_dtoa_r+0x660>
 800515c:	18c00044 	addi	r3,r3,1
 8005160:	a0c00005 	stb	r3,0(r20)
 8005164:	00013f06 	br	8005664 <_dtoa_r+0xb8c>
 8005168:	04600034 	movhi	r17,32768
 800516c:	8c7fffc4 	addi	r17,r17,-1
 8005170:	9462703a 	and	r17,r18,r17
 8005174:	00800044 	movi	r2,1
 8005178:	8825883a 	mov	r18,r17
 800517c:	80800015 	stw	r2,0(r16)
 8005180:	00dffc34 	movhi	r3,32752
 8005184:	909ffc2c 	andhi	r2,r18,32752
 8005188:	10fe731e 	bne	r2,r3,8004b58 <_dtoa_r+0x80>
 800518c:	d9001f17 	ldw	r4,124(sp)
 8005190:	00800434 	movhi	r2,16
 8005194:	10bfffc4 	addi	r2,r2,-1
 8005198:	9084703a 	and	r2,r18,r2
 800519c:	00c9c3c4 	movi	r3,9999
 80051a0:	20c00015 	stw	r3,0(r4)
 80051a4:	14e6b03a 	or	r19,r2,r19
 80051a8:	9800141e 	bne	r19,zero,80051fc <_dtoa_r+0x724>
 80051ac:	d8802117 	ldw	r2,132(sp)
 80051b0:	10041226 	beq	r2,zero,80061fc <_dtoa_r+0x1724>
 80051b4:	00820074 	movhi	r2,2049
 80051b8:	1007883a 	mov	r3,r2
 80051bc:	18c98e04 	addi	r3,r3,9784
 80051c0:	00820074 	movhi	r2,2049
 80051c4:	d8c00115 	stw	r3,4(sp)
 80051c8:	10899004 	addi	r2,r2,9792
 80051cc:	d8c02117 	ldw	r3,132(sp)
 80051d0:	18800015 	stw	r2,0(r3)
 80051d4:	003e7206 	br	8004ba0 <_dtoa_r+0xc8>
 80051d8:	01400434 	movhi	r5,16
 80051dc:	297fffc4 	addi	r5,r5,-1
 80051e0:	894a703a 	and	r5,r17,r5
 80051e4:	dd001217 	ldw	r20,72(sp)
 80051e8:	9809883a 	mov	r4,r19
 80051ec:	294ffc34 	orhi	r5,r5,16368
 80051f0:	843f0044 	addi	r16,r16,-1023
 80051f4:	d8000a15 	stw	zero,40(sp)
 80051f8:	003e9306 	br	8004c48 <_dtoa_r+0x170>
 80051fc:	d8802117 	ldw	r2,132(sp)
 8005200:	1001fe1e 	bne	r2,zero,80059fc <_dtoa_r+0xf24>
 8005204:	00820074 	movhi	r2,2049
 8005208:	10898d04 	addi	r2,r2,9780
 800520c:	d8800115 	stw	r2,4(sp)
 8005210:	003e6306 	br	8004ba0 <_dtoa_r+0xc8>
 8005214:	dd800e17 	ldw	r22,56(sp)
 8005218:	ddc00d17 	ldw	r23,52(sp)
 800521c:	dc400f17 	ldw	r17,60(sp)
 8005220:	dcc00c17 	ldw	r19,48(sp)
 8005224:	d8801317 	ldw	r2,76(sp)
 8005228:	10006e16 	blt	r2,zero,80053e4 <_dtoa_r+0x90c>
 800522c:	d9000417 	ldw	r4,16(sp)
 8005230:	20c003c8 	cmpgei	r3,r4,15
 8005234:	18006b1e 	bne	r3,zero,80053e4 <_dtoa_r+0x90c>
 8005238:	200690fa 	slli	r3,r4,3
 800523c:	00820074 	movhi	r2,2049
 8005240:	1089cd04 	addi	r2,r2,10036
 8005244:	10c5883a 	add	r2,r2,r3
 8005248:	14000017 	ldw	r16,0(r2)
 800524c:	14800117 	ldw	r18,4(r2)
 8005250:	d8801e17 	ldw	r2,120(sp)
 8005254:	1000150e 	bge	r2,zero,80052ac <_dtoa_r+0x7d4>
 8005258:	d8800517 	ldw	r2,20(sp)
 800525c:	00801316 	blt	zero,r2,80052ac <_dtoa_r+0x7d4>
 8005260:	d8800517 	ldw	r2,20(sp)
 8005264:	1002721e 	bne	r2,zero,8005c30 <_dtoa_r+0x1158>
 8005268:	8009883a 	mov	r4,r16
 800526c:	000d883a 	mov	r6,zero
 8005270:	01d00534 	movhi	r7,16404
 8005274:	900b883a 	mov	r5,r18
 8005278:	800e2dc0 	call	800e2dc <__muldf3>
 800527c:	100d883a 	mov	r6,r2
 8005280:	180f883a 	mov	r7,r3
 8005284:	9809883a 	mov	r4,r19
 8005288:	880b883a 	mov	r5,r17
 800528c:	800e1f40 	call	800e1f4 <__ledf2>
 8005290:	0029883a 	mov	r20,zero
 8005294:	0021883a 	mov	r16,zero
 8005298:	00820216 	blt	zero,r2,8005aa4 <_dtoa_r+0xfcc>
 800529c:	d8801e17 	ldw	r2,120(sp)
 80052a0:	dd400117 	ldw	r21,4(sp)
 80052a4:	00a2303a 	nor	r17,zero,r2
 80052a8:	00020406 	br	8005abc <_dtoa_r+0xfe4>
 80052ac:	800d883a 	mov	r6,r16
 80052b0:	900f883a 	mov	r7,r18
 80052b4:	9809883a 	mov	r4,r19
 80052b8:	880b883a 	mov	r5,r17
 80052bc:	800d75c0 	call	800d75c <__divdf3>
 80052c0:	180b883a 	mov	r5,r3
 80052c4:	1009883a 	mov	r4,r2
 80052c8:	800f3900 	call	800f390 <__fixdfsi>
 80052cc:	1009883a 	mov	r4,r2
 80052d0:	102b883a 	mov	r21,r2
 80052d4:	800f4100 	call	800f410 <__floatsidf>
 80052d8:	800d883a 	mov	r6,r16
 80052dc:	900f883a 	mov	r7,r18
 80052e0:	1009883a 	mov	r4,r2
 80052e4:	180b883a 	mov	r5,r3
 80052e8:	800e2dc0 	call	800e2dc <__muldf3>
 80052ec:	100d883a 	mov	r6,r2
 80052f0:	9809883a 	mov	r4,r19
 80052f4:	880b883a 	mov	r5,r17
 80052f8:	180f883a 	mov	r7,r3
 80052fc:	800ea880 	call	800ea88 <__subdf3>
 8005300:	d9800117 	ldw	r6,4(sp)
 8005304:	dd800517 	ldw	r22,20(sp)
 8005308:	1009883a 	mov	r4,r2
 800530c:	a8800c04 	addi	r2,r21,48
 8005310:	30800005 	stb	r2,0(r6)
 8005314:	b0800060 	cmpeqi	r2,r22,1
 8005318:	180b883a 	mov	r5,r3
 800531c:	35000044 	addi	r20,r6,1
 8005320:	10029f1e 	bne	r2,zero,8005da0 <_dtoa_r+0x12c8>
 8005324:	04400044 	movi	r17,1
 8005328:	ddc00215 	stw	r23,8(sp)
 800532c:	00001c06 	br	80053a0 <_dtoa_r+0x8c8>
 8005330:	800d883a 	mov	r6,r16
 8005334:	900f883a 	mov	r7,r18
 8005338:	a809883a 	mov	r4,r21
 800533c:	980b883a 	mov	r5,r19
 8005340:	800d75c0 	call	800d75c <__divdf3>
 8005344:	180b883a 	mov	r5,r3
 8005348:	1009883a 	mov	r4,r2
 800534c:	800f3900 	call	800f390 <__fixdfsi>
 8005350:	1009883a 	mov	r4,r2
 8005354:	102f883a 	mov	r23,r2
 8005358:	800f4100 	call	800f410 <__floatsidf>
 800535c:	800d883a 	mov	r6,r16
 8005360:	900f883a 	mov	r7,r18
 8005364:	1009883a 	mov	r4,r2
 8005368:	180b883a 	mov	r5,r3
 800536c:	800e2dc0 	call	800e2dc <__muldf3>
 8005370:	a809883a 	mov	r4,r21
 8005374:	980b883a 	mov	r5,r19
 8005378:	100d883a 	mov	r6,r2
 800537c:	180f883a 	mov	r7,r3
 8005380:	800ea880 	call	800ea88 <__subdf3>
 8005384:	b9000c04 	addi	r4,r23,48
 8005388:	a1000005 	stb	r4,0(r20)
 800538c:	8c400044 	addi	r17,r17,1
 8005390:	a5000044 	addi	r20,r20,1
 8005394:	1009883a 	mov	r4,r2
 8005398:	180b883a 	mov	r5,r3
 800539c:	8d827e26 	beq	r17,r22,8005d98 <_dtoa_r+0x12c0>
 80053a0:	000d883a 	mov	r6,zero
 80053a4:	01d00934 	movhi	r7,16420
 80053a8:	800e2dc0 	call	800e2dc <__muldf3>
 80053ac:	000d883a 	mov	r6,zero
 80053b0:	000f883a 	mov	r7,zero
 80053b4:	1009883a 	mov	r4,r2
 80053b8:	180b883a 	mov	r5,r3
 80053bc:	102b883a 	mov	r21,r2
 80053c0:	1827883a 	mov	r19,r3
 80053c4:	800e08c0 	call	800e08c <__eqdf2>
 80053c8:	103fd91e 	bne	r2,zero,8005330 <_dtoa_r+0x858>
 80053cc:	d8800417 	ldw	r2,16(sp)
 80053d0:	ddc00217 	ldw	r23,8(sp)
 80053d4:	a02b883a 	mov	r21,r20
 80053d8:	10800044 	addi	r2,r2,1
 80053dc:	d8800415 	stw	r2,16(sp)
 80053e0:	0000a006 	br	8005664 <_dtoa_r+0xb8c>
 80053e4:	d8c00717 	ldw	r3,28(sp)
 80053e8:	1800e326 	beq	r3,zero,8005778 <_dtoa_r+0xca0>
 80053ec:	d8c00217 	ldw	r3,8(sp)
 80053f0:	18c00088 	cmpgei	r3,r3,2
 80053f4:	1801e026 	beq	r3,zero,8005b78 <_dtoa_r+0x10a0>
 80053f8:	d8800517 	ldw	r2,20(sp)
 80053fc:	153fffc4 	addi	r20,r2,-1
 8005400:	d8800817 	ldw	r2,32(sp)
 8005404:	1501bc0e 	bge	r2,r20,8005af8 <_dtoa_r+0x1020>
 8005408:	d8800817 	ldw	r2,32(sp)
 800540c:	d8c00317 	ldw	r3,12(sp)
 8005410:	dd000815 	stw	r20,32(sp)
 8005414:	a085c83a 	sub	r2,r20,r2
 8005418:	1885883a 	add	r2,r3,r2
 800541c:	d8800315 	stw	r2,12(sp)
 8005420:	0029883a 	mov	r20,zero
 8005424:	d8800517 	ldw	r2,20(sp)
 8005428:	10028b16 	blt	r2,zero,8005e58 <_dtoa_r+0x1380>
 800542c:	d8c00617 	ldw	r3,24(sp)
 8005430:	b0ad883a 	add	r22,r22,r2
 8005434:	1885883a 	add	r2,r3,r2
 8005438:	1825883a 	mov	r18,r3
 800543c:	d8800615 	stw	r2,24(sp)
 8005440:	01400044 	movi	r5,1
 8005444:	b809883a 	mov	r4,r23
 8005448:	800859c0 	call	800859c <__i2b>
 800544c:	1021883a 	mov	r16,r2
 8005450:	0480080e 	bge	zero,r18,8005474 <_dtoa_r+0x99c>
 8005454:	0580070e 	bge	zero,r22,8005474 <_dtoa_r+0x99c>
 8005458:	9005883a 	mov	r2,r18
 800545c:	b4819e16 	blt	r22,r18,8005ad8 <_dtoa_r+0x1000>
 8005460:	d8c00617 	ldw	r3,24(sp)
 8005464:	90a5c83a 	sub	r18,r18,r2
 8005468:	b0adc83a 	sub	r22,r22,r2
 800546c:	1887c83a 	sub	r3,r3,r2
 8005470:	d8c00615 	stw	r3,24(sp)
 8005474:	d8800817 	ldw	r2,32(sp)
 8005478:	10001426 	beq	r2,zero,80054cc <_dtoa_r+0x9f4>
 800547c:	d8800717 	ldw	r2,28(sp)
 8005480:	1001ee26 	beq	r2,zero,8005c3c <_dtoa_r+0x1164>
 8005484:	05000e0e 	bge	zero,r20,80054c0 <_dtoa_r+0x9e8>
 8005488:	800b883a 	mov	r5,r16
 800548c:	a00d883a 	mov	r6,r20
 8005490:	b809883a 	mov	r4,r23
 8005494:	80089100 	call	8008910 <__pow5mult>
 8005498:	e00d883a 	mov	r6,fp
 800549c:	100b883a 	mov	r5,r2
 80054a0:	b809883a 	mov	r4,r23
 80054a4:	1021883a 	mov	r16,r2
 80054a8:	800864c0 	call	800864c <__multiply>
 80054ac:	102b883a 	mov	r21,r2
 80054b0:	e00b883a 	mov	r5,fp
 80054b4:	b809883a 	mov	r4,r23
 80054b8:	80081d00 	call	80081d0 <_Bfree>
 80054bc:	a839883a 	mov	fp,r21
 80054c0:	d8800817 	ldw	r2,32(sp)
 80054c4:	150dc83a 	sub	r6,r2,r20
 80054c8:	15025e1e 	bne	r2,r20,8005e44 <_dtoa_r+0x136c>
 80054cc:	01400044 	movi	r5,1
 80054d0:	b809883a 	mov	r4,r23
 80054d4:	800859c0 	call	800859c <__i2b>
 80054d8:	d9800317 	ldw	r6,12(sp)
 80054dc:	1029883a 	mov	r20,r2
 80054e0:	0180b716 	blt	zero,r6,80057c0 <_dtoa_r+0xce8>
 80054e4:	d8800217 	ldw	r2,8(sp)
 80054e8:	10800088 	cmpgei	r2,r2,2
 80054ec:	10014d26 	beq	r2,zero,8005a24 <_dtoa_r+0xf4c>
 80054f0:	0023883a 	mov	r17,zero
 80054f4:	d8c00317 	ldw	r3,12(sp)
 80054f8:	00800044 	movi	r2,1
 80054fc:	1800b81e 	bne	r3,zero,80057e0 <_dtoa_r+0xd08>
 8005500:	1585883a 	add	r2,r2,r22
 8005504:	108007cc 	andi	r2,r2,31
 8005508:	1000a526 	beq	r2,zero,80057a0 <_dtoa_r+0xcc8>
 800550c:	00c00804 	movi	r3,32
 8005510:	1887c83a 	sub	r3,r3,r2
 8005514:	19000150 	cmplti	r4,r3,5
 8005518:	20033c1e 	bne	r4,zero,800620c <_dtoa_r+0x1734>
 800551c:	00c00704 	movi	r3,28
 8005520:	1885c83a 	sub	r2,r3,r2
 8005524:	d8c00617 	ldw	r3,24(sp)
 8005528:	90a5883a 	add	r18,r18,r2
 800552c:	b0ad883a 	add	r22,r22,r2
 8005530:	1887883a 	add	r3,r3,r2
 8005534:	d8c00615 	stw	r3,24(sp)
 8005538:	d8800617 	ldw	r2,24(sp)
 800553c:	00809216 	blt	zero,r2,8005788 <_dtoa_r+0xcb0>
 8005540:	0580050e 	bge	zero,r22,8005558 <_dtoa_r+0xa80>
 8005544:	a00b883a 	mov	r5,r20
 8005548:	b00d883a 	mov	r6,r22
 800554c:	b809883a 	mov	r4,r23
 8005550:	8008a580 	call	8008a58 <__lshift>
 8005554:	1029883a 	mov	r20,r2
 8005558:	d8800917 	ldw	r2,36(sp)
 800555c:	1001151e 	bne	r2,zero,80059b4 <_dtoa_r+0xedc>
 8005560:	d8800517 	ldw	r2,20(sp)
 8005564:	0081020e 	bge	zero,r2,8005970 <_dtoa_r+0xe98>
 8005568:	d8800717 	ldw	r2,28(sp)
 800556c:	1000af1e 	bne	r2,zero,800582c <_dtoa_r+0xd54>
 8005570:	d8800417 	ldw	r2,16(sp)
 8005574:	10800044 	addi	r2,r2,1
 8005578:	d8800415 	stw	r2,16(sp)
 800557c:	dc800517 	ldw	r18,20(sp)
 8005580:	dd400117 	ldw	r21,4(sp)
 8005584:	04400044 	movi	r17,1
 8005588:	00000706 	br	80055a8 <_dtoa_r+0xad0>
 800558c:	e00b883a 	mov	r5,fp
 8005590:	000f883a 	mov	r7,zero
 8005594:	01800284 	movi	r6,10
 8005598:	b809883a 	mov	r4,r23
 800559c:	80081f40 	call	80081f4 <__multadd>
 80055a0:	1039883a 	mov	fp,r2
 80055a4:	8c400044 	addi	r17,r17,1
 80055a8:	a00b883a 	mov	r5,r20
 80055ac:	e009883a 	mov	r4,fp
 80055b0:	80048b80 	call	80048b8 <quorem>
 80055b4:	14c00c04 	addi	r19,r2,48
 80055b8:	ac45883a 	add	r2,r21,r17
 80055bc:	14ffffc5 	stb	r19,-1(r2)
 80055c0:	8cbff216 	blt	r17,r18,800558c <_dtoa_r+0xab4>
 80055c4:	d8800517 	ldw	r2,20(sp)
 80055c8:	0081510e 	bge	zero,r2,8005b10 <_dtoa_r+0x1038>
 80055cc:	d8c00117 	ldw	r3,4(sp)
 80055d0:	0023883a 	mov	r17,zero
 80055d4:	18ab883a 	add	r21,r3,r2
 80055d8:	e00b883a 	mov	r5,fp
 80055dc:	01800044 	movi	r6,1
 80055e0:	b809883a 	mov	r4,r23
 80055e4:	8008a580 	call	8008a58 <__lshift>
 80055e8:	1009883a 	mov	r4,r2
 80055ec:	a00b883a 	mov	r5,r20
 80055f0:	1039883a 	mov	fp,r2
 80055f4:	8008be00 	call	8008be0 <__mcmp>
 80055f8:	a93fffc3 	ldbu	r4,-1(r21)
 80055fc:	0081490e 	bge	zero,r2,8005b24 <_dtoa_r+0x104c>
 8005600:	d9400117 	ldw	r5,4(sp)
 8005604:	00000306 	br	8005614 <_dtoa_r+0xb3c>
 8005608:	19415426 	beq	r3,r5,8005b5c <_dtoa_r+0x1084>
 800560c:	193fffc3 	ldbu	r4,-1(r3)
 8005610:	182b883a 	mov	r21,r3
 8005614:	20803fcc 	andi	r2,r4,255
 8005618:	1080201c 	xori	r2,r2,128
 800561c:	10bfe004 	addi	r2,r2,-128
 8005620:	10800e60 	cmpeqi	r2,r2,57
 8005624:	a8ffffc4 	addi	r3,r21,-1
 8005628:	103ff71e 	bne	r2,zero,8005608 <_dtoa_r+0xb30>
 800562c:	21000044 	addi	r4,r4,1
 8005630:	19000005 	stb	r4,0(r3)
 8005634:	a00b883a 	mov	r5,r20
 8005638:	b809883a 	mov	r4,r23
 800563c:	80081d00 	call	80081d0 <_Bfree>
 8005640:	80000826 	beq	r16,zero,8005664 <_dtoa_r+0xb8c>
 8005644:	88000426 	beq	r17,zero,8005658 <_dtoa_r+0xb80>
 8005648:	8c000326 	beq	r17,r16,8005658 <_dtoa_r+0xb80>
 800564c:	880b883a 	mov	r5,r17
 8005650:	b809883a 	mov	r4,r23
 8005654:	80081d00 	call	80081d0 <_Bfree>
 8005658:	800b883a 	mov	r5,r16
 800565c:	b809883a 	mov	r4,r23
 8005660:	80081d00 	call	80081d0 <_Bfree>
 8005664:	e00b883a 	mov	r5,fp
 8005668:	b809883a 	mov	r4,r23
 800566c:	80081d00 	call	80081d0 <_Bfree>
 8005670:	d8801f17 	ldw	r2,124(sp)
 8005674:	d8c00417 	ldw	r3,16(sp)
 8005678:	a8000005 	stb	zero,0(r21)
 800567c:	10c00015 	stw	r3,0(r2)
 8005680:	d8802117 	ldw	r2,132(sp)
 8005684:	103d4626 	beq	r2,zero,8004ba0 <_dtoa_r+0xc8>
 8005688:	15400015 	stw	r21,0(r2)
 800568c:	003d4406 	br	8004ba0 <_dtoa_r+0xc8>
 8005690:	d8000915 	stw	zero,36(sp)
 8005694:	b0002416 	blt	r22,zero,8005728 <_dtoa_r+0xc50>
 8005698:	d8000615 	stw	zero,24(sp)
 800569c:	d8800317 	ldw	r2,12(sp)
 80056a0:	d8c00217 	ldw	r3,8(sp)
 80056a4:	d8000815 	stw	zero,32(sp)
 80056a8:	b0ad883a 	add	r22,r22,r2
 80056ac:	d8800415 	stw	r2,16(sp)
 80056b0:	188002a8 	cmpgeui	r2,r3,10
 80056b4:	103db326 	beq	r2,zero,8004d84 <_dtoa_r+0x2ac>
 80056b8:	00800044 	movi	r2,1
 80056bc:	d8800715 	stw	r2,28(sp)
 80056c0:	00bfffc4 	movi	r2,-1
 80056c4:	04000044 	movi	r16,1
 80056c8:	d8000215 	stw	zero,8(sp)
 80056cc:	d8800515 	stw	r2,20(sp)
 80056d0:	d8001e15 	stw	zero,120(sp)
 80056d4:	d8800517 	ldw	r2,20(sp)
 80056d8:	b8001115 	stw	zero,68(r23)
 80056dc:	000b883a 	mov	r5,zero
 80056e0:	d8800b15 	stw	r2,44(sp)
 80056e4:	003dc406 	br	8004df8 <_dtoa_r+0x320>
 80056e8:	188000e0 	cmpeqi	r2,r3,3
 80056ec:	d8000715 	stw	zero,28(sp)
 80056f0:	1002ac26 	beq	r2,zero,80061a4 <_dtoa_r+0x16cc>
 80056f4:	d8801e17 	ldw	r2,120(sp)
 80056f8:	d8c00417 	ldw	r3,16(sp)
 80056fc:	10c5883a 	add	r2,r2,r3
 8005700:	d8800b15 	stw	r2,44(sp)
 8005704:	10800044 	addi	r2,r2,1
 8005708:	d8800515 	stw	r2,20(sp)
 800570c:	100d883a 	mov	r6,r2
 8005710:	00bdae16 	blt	zero,r2,8004dcc <_dtoa_r+0x2f4>
 8005714:	01800044 	movi	r6,1
 8005718:	003dac06 	br	8004dcc <_dtoa_r+0x2f4>
 800571c:	00800044 	movi	r2,1
 8005720:	d8800915 	stw	r2,36(sp)
 8005724:	b03d890e 	bge	r22,zero,8004d4c <_dtoa_r+0x274>
 8005728:	00800044 	movi	r2,1
 800572c:	1405c83a 	sub	r2,r2,r16
 8005730:	d8800615 	stw	r2,24(sp)
 8005734:	002d883a 	mov	r22,zero
 8005738:	003d8506 	br	8004d50 <_dtoa_r+0x278>
 800573c:	a809883a 	mov	r4,r21
 8005740:	800f4100 	call	800f410 <__floatsidf>
 8005744:	900d883a 	mov	r6,r18
 8005748:	b00f883a 	mov	r7,r22
 800574c:	1009883a 	mov	r4,r2
 8005750:	180b883a 	mov	r5,r3
 8005754:	800e08c0 	call	800e08c <__eqdf2>
 8005758:	103d6926 	beq	r2,zero,8004d00 <_dtoa_r+0x228>
 800575c:	a8bfffc4 	addi	r2,r21,-1
 8005760:	d8800315 	stw	r2,12(sp)
 8005764:	003d6606 	br	8004d00 <_dtoa_r+0x228>
 8005768:	00820074 	movhi	r2,2049
 800576c:	10898404 	addi	r2,r2,9744
 8005770:	d8800115 	stw	r2,4(sp)
 8005774:	003d0a06 	br	8004ba0 <_dtoa_r+0xc8>
 8005778:	dd000817 	ldw	r20,32(sp)
 800577c:	dc800617 	ldw	r18,24(sp)
 8005780:	0021883a 	mov	r16,zero
 8005784:	003f3206 	br	8005450 <_dtoa_r+0x978>
 8005788:	e00b883a 	mov	r5,fp
 800578c:	100d883a 	mov	r6,r2
 8005790:	b809883a 	mov	r4,r23
 8005794:	8008a580 	call	8008a58 <__lshift>
 8005798:	1039883a 	mov	fp,r2
 800579c:	003f6806 	br	8005540 <_dtoa_r+0xa68>
 80057a0:	00800704 	movi	r2,28
 80057a4:	003f5f06 	br	8005524 <_dtoa_r+0xa4c>
 80057a8:	01000804 	movi	r4,32
 80057ac:	2089c83a 	sub	r4,r4,r2
 80057b0:	9908983a 	sll	r4,r19,r4
 80057b4:	003d1d06 	br	8004c2c <_dtoa_r+0x154>
 80057b8:	04000044 	movi	r16,1
 80057bc:	003d7606 	br	8004d98 <_dtoa_r+0x2c0>
 80057c0:	100b883a 	mov	r5,r2
 80057c4:	b809883a 	mov	r4,r23
 80057c8:	80089100 	call	8008910 <__pow5mult>
 80057cc:	d8c00217 	ldw	r3,8(sp)
 80057d0:	1029883a 	mov	r20,r2
 80057d4:	18c00090 	cmplti	r3,r3,2
 80057d8:	1801511e 	bne	r3,zero,8005d20 <_dtoa_r+0x1248>
 80057dc:	0023883a 	mov	r17,zero
 80057e0:	a0800417 	ldw	r2,16(r20)
 80057e4:	10800104 	addi	r2,r2,4
 80057e8:	100490ba 	slli	r2,r2,2
 80057ec:	a085883a 	add	r2,r20,r2
 80057f0:	11000017 	ldw	r4,0(r2)
 80057f4:	80084880 	call	8008488 <__hi0bits>
 80057f8:	00c00804 	movi	r3,32
 80057fc:	1885c83a 	sub	r2,r3,r2
 8005800:	003f3f06 	br	8005500 <_dtoa_r+0xa28>
 8005804:	800b883a 	mov	r5,r16
 8005808:	000f883a 	mov	r7,zero
 800580c:	01800284 	movi	r6,10
 8005810:	b809883a 	mov	r4,r23
 8005814:	80081f40 	call	80081f4 <__multadd>
 8005818:	1021883a 	mov	r16,r2
 800581c:	d8800b17 	ldw	r2,44(sp)
 8005820:	00824b0e 	bge	zero,r2,8006150 <_dtoa_r+0x1678>
 8005824:	dd400415 	stw	r21,16(sp)
 8005828:	d8800515 	stw	r2,20(sp)
 800582c:	0480ac16 	blt	zero,r18,8005ae0 <_dtoa_r+0x1008>
 8005830:	8801731e 	bne	r17,zero,8005e00 <_dtoa_r+0x1328>
 8005834:	8025883a 	mov	r18,r16
 8005838:	dd800117 	ldw	r22,4(sp)
 800583c:	d9000517 	ldw	r4,20(sp)
 8005840:	98c0004c 	andi	r3,r19,1
 8005844:	b0bfffc4 	addi	r2,r22,-1
 8005848:	1105883a 	add	r2,r2,r4
 800584c:	d8800515 	stw	r2,20(sp)
 8005850:	d8800217 	ldw	r2,8(sp)
 8005854:	d8c00815 	stw	r3,32(sp)
 8005858:	1884b03a 	or	r2,r3,r2
 800585c:	d8800715 	stw	r2,28(sp)
 8005860:	00002906 	br	8005908 <_dtoa_r+0xe30>
 8005864:	e009883a 	mov	r4,fp
 8005868:	8008be00 	call	8008be0 <__mcmp>
 800586c:	980b883a 	mov	r5,r19
 8005870:	b809883a 	mov	r4,r23
 8005874:	d8800315 	stw	r2,12(sp)
 8005878:	80081d00 	call	80081d0 <_Bfree>
 800587c:	d8800317 	ldw	r2,12(sp)
 8005880:	1000021e 	bne	r2,zero,800588c <_dtoa_r+0xdb4>
 8005884:	d8c00717 	ldw	r3,28(sp)
 8005888:	18022326 	beq	r3,zero,8006118 <_dtoa_r+0x1640>
 800588c:	b4c00044 	addi	r19,r22,1
 8005890:	88012916 	blt	r17,zero,8005d38 <_dtoa_r+0x1260>
 8005894:	d8c00217 	ldw	r3,8(sp)
 8005898:	88e2b03a 	or	r17,r17,r3
 800589c:	d8c00817 	ldw	r3,32(sp)
 80058a0:	1c62b03a 	or	r17,r3,r17
 80058a4:	88012426 	beq	r17,zero,8005d38 <_dtoa_r+0x1260>
 80058a8:	00816f16 	blt	zero,r2,8005e68 <_dtoa_r+0x1390>
 80058ac:	d8800517 	ldw	r2,20(sp)
 80058b0:	b5400005 	stb	r21,0(r22)
 80058b4:	15817926 	beq	r2,r22,8005e9c <_dtoa_r+0x13c4>
 80058b8:	e00b883a 	mov	r5,fp
 80058bc:	000f883a 	mov	r7,zero
 80058c0:	01800284 	movi	r6,10
 80058c4:	b809883a 	mov	r4,r23
 80058c8:	80081f40 	call	80081f4 <__multadd>
 80058cc:	1039883a 	mov	fp,r2
 80058d0:	800b883a 	mov	r5,r16
 80058d4:	000f883a 	mov	r7,zero
 80058d8:	01800284 	movi	r6,10
 80058dc:	b809883a 	mov	r4,r23
 80058e0:	84801f26 	beq	r16,r18,8005960 <_dtoa_r+0xe88>
 80058e4:	80081f40 	call	80081f4 <__multadd>
 80058e8:	900b883a 	mov	r5,r18
 80058ec:	000f883a 	mov	r7,zero
 80058f0:	01800284 	movi	r6,10
 80058f4:	b809883a 	mov	r4,r23
 80058f8:	1021883a 	mov	r16,r2
 80058fc:	80081f40 	call	80081f4 <__multadd>
 8005900:	1025883a 	mov	r18,r2
 8005904:	982d883a 	mov	r22,r19
 8005908:	a00b883a 	mov	r5,r20
 800590c:	e009883a 	mov	r4,fp
 8005910:	80048b80 	call	80048b8 <quorem>
 8005914:	800b883a 	mov	r5,r16
 8005918:	e009883a 	mov	r4,fp
 800591c:	102b883a 	mov	r21,r2
 8005920:	d8800615 	stw	r2,24(sp)
 8005924:	8008be00 	call	8008be0 <__mcmp>
 8005928:	a00b883a 	mov	r5,r20
 800592c:	900d883a 	mov	r6,r18
 8005930:	b809883a 	mov	r4,r23
 8005934:	1023883a 	mov	r17,r2
 8005938:	8008c380 	call	8008c38 <__mdiff>
 800593c:	1027883a 	mov	r19,r2
 8005940:	10800317 	ldw	r2,12(r2)
 8005944:	ad400c04 	addi	r21,r21,48
 8005948:	980b883a 	mov	r5,r19
 800594c:	103fc526 	beq	r2,zero,8005864 <_dtoa_r+0xd8c>
 8005950:	b809883a 	mov	r4,r23
 8005954:	80081d00 	call	80081d0 <_Bfree>
 8005958:	00800044 	movi	r2,1
 800595c:	003fcb06 	br	800588c <_dtoa_r+0xdb4>
 8005960:	80081f40 	call	80081f4 <__multadd>
 8005964:	1021883a 	mov	r16,r2
 8005968:	1025883a 	mov	r18,r2
 800596c:	003fe506 	br	8005904 <_dtoa_r+0xe2c>
 8005970:	d8800217 	ldw	r2,8(sp)
 8005974:	108000d0 	cmplti	r2,r2,3
 8005978:	10003e26 	beq	r2,zero,8005a74 <_dtoa_r+0xf9c>
 800597c:	d8800717 	ldw	r2,28(sp)
 8005980:	103faa1e 	bne	r2,zero,800582c <_dtoa_r+0xd54>
 8005984:	a00b883a 	mov	r5,r20
 8005988:	e009883a 	mov	r4,fp
 800598c:	80048b80 	call	80048b8 <quorem>
 8005990:	14c00c04 	addi	r19,r2,48
 8005994:	d8800117 	ldw	r2,4(sp)
 8005998:	0023883a 	mov	r17,zero
 800599c:	15400044 	addi	r21,r2,1
 80059a0:	14c00005 	stb	r19,0(r2)
 80059a4:	d8800417 	ldw	r2,16(sp)
 80059a8:	10800044 	addi	r2,r2,1
 80059ac:	d8800415 	stw	r2,16(sp)
 80059b0:	003f0906 	br	80055d8 <_dtoa_r+0xb00>
 80059b4:	a00b883a 	mov	r5,r20
 80059b8:	e009883a 	mov	r4,fp
 80059bc:	8008be00 	call	8008be0 <__mcmp>
 80059c0:	103ee70e 	bge	r2,zero,8005560 <_dtoa_r+0xa88>
 80059c4:	e00b883a 	mov	r5,fp
 80059c8:	000f883a 	mov	r7,zero
 80059cc:	01800284 	movi	r6,10
 80059d0:	b809883a 	mov	r4,r23
 80059d4:	80081f40 	call	80081f4 <__multadd>
 80059d8:	d8c00417 	ldw	r3,16(sp)
 80059dc:	1039883a 	mov	fp,r2
 80059e0:	d8800717 	ldw	r2,28(sp)
 80059e4:	1d7fffc4 	addi	r21,r3,-1
 80059e8:	103f861e 	bne	r2,zero,8005804 <_dtoa_r+0xd2c>
 80059ec:	d8800b17 	ldw	r2,44(sp)
 80059f0:	0081d20e 	bge	zero,r2,800613c <_dtoa_r+0x1664>
 80059f4:	d8800515 	stw	r2,20(sp)
 80059f8:	003ee006 	br	800557c <_dtoa_r+0xaa4>
 80059fc:	00820074 	movhi	r2,2049
 8005a00:	1007883a 	mov	r3,r2
 8005a04:	18c98d04 	addi	r3,r3,9780
 8005a08:	00820074 	movhi	r2,2049
 8005a0c:	d8c00115 	stw	r3,4(sp)
 8005a10:	10898dc4 	addi	r2,r2,9783
 8005a14:	003ded06 	br	80051cc <_dtoa_r+0x6f4>
 8005a18:	00800044 	movi	r2,1
 8005a1c:	d8800715 	stw	r2,28(sp)
 8005a20:	003f3406 	br	80056f4 <_dtoa_r+0xc1c>
 8005a24:	983eb21e 	bne	r19,zero,80054f0 <_dtoa_r+0xa18>
 8005a28:	00800434 	movhi	r2,16
 8005a2c:	10bfffc4 	addi	r2,r2,-1
 8005a30:	8884703a 	and	r2,r17,r2
 8005a34:	103eae1e 	bne	r2,zero,80054f0 <_dtoa_r+0xa18>
 8005a38:	8c5ffc2c 	andhi	r17,r17,32752
 8005a3c:	883eac26 	beq	r17,zero,80054f0 <_dtoa_r+0xa18>
 8005a40:	d8800617 	ldw	r2,24(sp)
 8005a44:	b5800044 	addi	r22,r22,1
 8005a48:	04400044 	movi	r17,1
 8005a4c:	10800044 	addi	r2,r2,1
 8005a50:	d8800615 	stw	r2,24(sp)
 8005a54:	003ea706 	br	80054f4 <_dtoa_r+0xa1c>
 8005a58:	00800044 	movi	r2,1
 8005a5c:	d8800515 	stw	r2,20(sp)
 8005a60:	d8801e15 	stw	r2,120(sp)
 8005a64:	003f1b06 	br	80056d4 <_dtoa_r+0xbfc>
 8005a68:	d8800b17 	ldw	r2,44(sp)
 8005a6c:	dd400415 	stw	r21,16(sp)
 8005a70:	d8800515 	stw	r2,20(sp)
 8005a74:	d8800517 	ldw	r2,20(sp)
 8005a78:	103e081e 	bne	r2,zero,800529c <_dtoa_r+0x7c4>
 8005a7c:	a00b883a 	mov	r5,r20
 8005a80:	b809883a 	mov	r4,r23
 8005a84:	000f883a 	mov	r7,zero
 8005a88:	01800144 	movi	r6,5
 8005a8c:	80081f40 	call	80081f4 <__multadd>
 8005a90:	100b883a 	mov	r5,r2
 8005a94:	e009883a 	mov	r4,fp
 8005a98:	1029883a 	mov	r20,r2
 8005a9c:	8008be00 	call	8008be0 <__mcmp>
 8005aa0:	00bdfe0e 	bge	zero,r2,800529c <_dtoa_r+0x7c4>
 8005aa4:	d8c00117 	ldw	r3,4(sp)
 8005aa8:	00800c44 	movi	r2,49
 8005aac:	18800005 	stb	r2,0(r3)
 8005ab0:	d8800417 	ldw	r2,16(sp)
 8005ab4:	1d400044 	addi	r21,r3,1
 8005ab8:	14400044 	addi	r17,r2,1
 8005abc:	a00b883a 	mov	r5,r20
 8005ac0:	b809883a 	mov	r4,r23
 8005ac4:	80081d00 	call	80081d0 <_Bfree>
 8005ac8:	88800044 	addi	r2,r17,1
 8005acc:	d8800415 	stw	r2,16(sp)
 8005ad0:	803ee11e 	bne	r16,zero,8005658 <_dtoa_r+0xb80>
 8005ad4:	003ee306 	br	8005664 <_dtoa_r+0xb8c>
 8005ad8:	b005883a 	mov	r2,r22
 8005adc:	003e6006 	br	8005460 <_dtoa_r+0x988>
 8005ae0:	800b883a 	mov	r5,r16
 8005ae4:	900d883a 	mov	r6,r18
 8005ae8:	b809883a 	mov	r4,r23
 8005aec:	8008a580 	call	8008a58 <__lshift>
 8005af0:	1021883a 	mov	r16,r2
 8005af4:	003f4e06 	br	8005830 <_dtoa_r+0xd58>
 8005af8:	1529c83a 	sub	r20,r2,r20
 8005afc:	003e4906 	br	8005424 <_dtoa_r+0x94c>
 8005b00:	dcc00c15 	stw	r19,48(sp)
 8005b04:	8825883a 	mov	r18,r17
 8005b08:	05400084 	movi	r21,2
 8005b0c:	003cdf06 	br	8004e8c <_dtoa_r+0x3b4>
 8005b10:	00800044 	movi	r2,1
 8005b14:	003ead06 	br	80055cc <_dtoa_r+0xaf4>
 8005b18:	00800044 	movi	r2,1
 8005b1c:	d8800715 	stw	r2,28(sp)
 8005b20:	003ca506 	br	8004db8 <_dtoa_r+0x2e0>
 8005b24:	1000021e 	bne	r2,zero,8005b30 <_dtoa_r+0x1058>
 8005b28:	98c0004c 	andi	r3,r19,1
 8005b2c:	183eb41e 	bne	r3,zero,8005600 <_dtoa_r+0xb28>
 8005b30:	2005883a 	mov	r2,r4
 8005b34:	00000206 	br	8005b40 <_dtoa_r+0x1068>
 8005b38:	a8bfff83 	ldbu	r2,-2(r21)
 8005b3c:	182b883a 	mov	r21,r3
 8005b40:	10803fcc 	andi	r2,r2,255
 8005b44:	1080201c 	xori	r2,r2,128
 8005b48:	10bfe004 	addi	r2,r2,-128
 8005b4c:	10800c18 	cmpnei	r2,r2,48
 8005b50:	a8ffffc4 	addi	r3,r21,-1
 8005b54:	103ff826 	beq	r2,zero,8005b38 <_dtoa_r+0x1060>
 8005b58:	003eb606 	br	8005634 <_dtoa_r+0xb5c>
 8005b5c:	d8c00117 	ldw	r3,4(sp)
 8005b60:	00800c44 	movi	r2,49
 8005b64:	18800005 	stb	r2,0(r3)
 8005b68:	d8800417 	ldw	r2,16(sp)
 8005b6c:	10800044 	addi	r2,r2,1
 8005b70:	d8800415 	stw	r2,16(sp)
 8005b74:	003eaf06 	br	8005634 <_dtoa_r+0xb5c>
 8005b78:	d8c00a17 	ldw	r3,40(sp)
 8005b7c:	18011826 	beq	r3,zero,8005fe0 <_dtoa_r+0x1508>
 8005b80:	d8c00617 	ldw	r3,24(sp)
 8005b84:	10810cc4 	addi	r2,r2,1075
 8005b88:	b0ad883a 	add	r22,r22,r2
 8005b8c:	1885883a 	add	r2,r3,r2
 8005b90:	dd000817 	ldw	r20,32(sp)
 8005b94:	1825883a 	mov	r18,r3
 8005b98:	d8800615 	stw	r2,24(sp)
 8005b9c:	003e2806 	br	8005440 <_dtoa_r+0x968>
 8005ba0:	a809883a 	mov	r4,r21
 8005ba4:	800f4100 	call	800f410 <__floatsidf>
 8005ba8:	800d883a 	mov	r6,r16
 8005bac:	900f883a 	mov	r7,r18
 8005bb0:	1009883a 	mov	r4,r2
 8005bb4:	180b883a 	mov	r5,r3
 8005bb8:	800e2dc0 	call	800e2dc <__muldf3>
 8005bbc:	000d883a 	mov	r6,zero
 8005bc0:	01d00734 	movhi	r7,16412
 8005bc4:	1009883a 	mov	r4,r2
 8005bc8:	180b883a 	mov	r5,r3
 8005bcc:	800ce6c0 	call	800ce6c <__adddf3>
 8005bd0:	1029883a 	mov	r20,r2
 8005bd4:	00bf3034 	movhi	r2,64704
 8005bd8:	1885883a 	add	r2,r3,r2
 8005bdc:	d8800c15 	stw	r2,48(sp)
 8005be0:	8009883a 	mov	r4,r16
 8005be4:	900b883a 	mov	r5,r18
 8005be8:	000d883a 	mov	r6,zero
 8005bec:	01d00534 	movhi	r7,16404
 8005bf0:	800ea880 	call	800ea88 <__subdf3>
 8005bf4:	dd400c17 	ldw	r21,48(sp)
 8005bf8:	a00d883a 	mov	r6,r20
 8005bfc:	1009883a 	mov	r4,r2
 8005c00:	a80f883a 	mov	r7,r21
 8005c04:	180b883a 	mov	r5,r3
 8005c08:	1025883a 	mov	r18,r2
 8005c0c:	1821883a 	mov	r16,r3
 8005c10:	800e10c0 	call	800e10c <__gedf2>
 8005c14:	00812f16 	blt	zero,r2,80060d4 <_dtoa_r+0x15fc>
 8005c18:	a9e0003c 	xorhi	r7,r21,32768
 8005c1c:	a00d883a 	mov	r6,r20
 8005c20:	9009883a 	mov	r4,r18
 8005c24:	800b883a 	mov	r5,r16
 8005c28:	800e1f40 	call	800e1f4 <__ledf2>
 8005c2c:	103d7d0e 	bge	r2,zero,8005224 <_dtoa_r+0x74c>
 8005c30:	0029883a 	mov	r20,zero
 8005c34:	0021883a 	mov	r16,zero
 8005c38:	003d9806 	br	800529c <_dtoa_r+0x7c4>
 8005c3c:	d9800817 	ldw	r6,32(sp)
 8005c40:	e00b883a 	mov	r5,fp
 8005c44:	b809883a 	mov	r4,r23
 8005c48:	80089100 	call	8008910 <__pow5mult>
 8005c4c:	1039883a 	mov	fp,r2
 8005c50:	003e1e06 	br	80054cc <_dtoa_r+0x9f4>
 8005c54:	d8800417 	ldw	r2,16(sp)
 8005c58:	1000ed26 	beq	r2,zero,8006010 <_dtoa_r+0x1538>
 8005c5c:	00a9c83a 	sub	r20,zero,r2
 8005c60:	a08003cc 	andi	r2,r20,15
 8005c64:	100690fa 	slli	r3,r2,3
 8005c68:	00820074 	movhi	r2,2049
 8005c6c:	1089cd04 	addi	r2,r2,10036
 8005c70:	10c5883a 	add	r2,r2,r3
 8005c74:	11800017 	ldw	r6,0(r2)
 8005c78:	11c00117 	ldw	r7,4(r2)
 8005c7c:	a029d13a 	srai	r20,r20,4
 8005c80:	9809883a 	mov	r4,r19
 8005c84:	880b883a 	mov	r5,r17
 8005c88:	800e2dc0 	call	800e2dc <__muldf3>
 8005c8c:	1021883a 	mov	r16,r2
 8005c90:	1825883a 	mov	r18,r3
 8005c94:	a0013826 	beq	r20,zero,8006178 <_dtoa_r+0x16a0>
 8005c98:	02020074 	movhi	r8,2049
 8005c9c:	05400084 	movi	r21,2
 8005ca0:	4209c304 	addi	r8,r8,9996
 8005ca4:	1009883a 	mov	r4,r2
 8005ca8:	9805883a 	mov	r2,r19
 8005cac:	180b883a 	mov	r5,r3
 8005cb0:	dc000c15 	stw	r16,48(sp)
 8005cb4:	8827883a 	mov	r19,r17
 8005cb8:	0007883a 	mov	r3,zero
 8005cbc:	a823883a 	mov	r17,r21
 8005cc0:	4021883a 	mov	r16,r8
 8005cc4:	102b883a 	mov	r21,r2
 8005cc8:	a180004c 	andi	r6,r20,1
 8005ccc:	30000726 	beq	r6,zero,8005cec <_dtoa_r+0x1214>
 8005cd0:	81800017 	ldw	r6,0(r16)
 8005cd4:	81c00117 	ldw	r7,4(r16)
 8005cd8:	8c400044 	addi	r17,r17,1
 8005cdc:	800e2dc0 	call	800e2dc <__muldf3>
 8005ce0:	180b883a 	mov	r5,r3
 8005ce4:	1009883a 	mov	r4,r2
 8005ce8:	00c00044 	movi	r3,1
 8005cec:	a029d07a 	srai	r20,r20,1
 8005cf0:	84000204 	addi	r16,r16,8
 8005cf4:	a03ff41e 	bne	r20,zero,8005cc8 <_dtoa_r+0x11f0>
 8005cf8:	a805883a 	mov	r2,r21
 8005cfc:	18c03fcc 	andi	r3,r3,255
 8005d00:	882b883a 	mov	r21,r17
 8005d04:	dc000c17 	ldw	r16,48(sp)
 8005d08:	9823883a 	mov	r17,r19
 8005d0c:	1027883a 	mov	r19,r2
 8005d10:	183c7726 	beq	r3,zero,8004ef0 <_dtoa_r+0x418>
 8005d14:	2021883a 	mov	r16,r4
 8005d18:	2825883a 	mov	r18,r5
 8005d1c:	003c7406 	br	8004ef0 <_dtoa_r+0x418>
 8005d20:	983eae1e 	bne	r19,zero,80057dc <_dtoa_r+0xd04>
 8005d24:	00800434 	movhi	r2,16
 8005d28:	10bfffc4 	addi	r2,r2,-1
 8005d2c:	8884703a 	and	r2,r17,r2
 8005d30:	103f4126 	beq	r2,zero,8005a38 <_dtoa_r+0xf60>
 8005d34:	003ea906 	br	80057dc <_dtoa_r+0xd04>
 8005d38:	9807883a 	mov	r3,r19
 8005d3c:	a827883a 	mov	r19,r21
 8005d40:	182b883a 	mov	r21,r3
 8005d44:	d8c00417 	ldw	r3,16(sp)
 8005d48:	18c00044 	addi	r3,r3,1
 8005d4c:	d8c00415 	stw	r3,16(sp)
 8005d50:	00800d0e 	bge	zero,r2,8005d88 <_dtoa_r+0x12b0>
 8005d54:	e00b883a 	mov	r5,fp
 8005d58:	b809883a 	mov	r4,r23
 8005d5c:	01800044 	movi	r6,1
 8005d60:	8008a580 	call	8008a58 <__lshift>
 8005d64:	a00b883a 	mov	r5,r20
 8005d68:	1009883a 	mov	r4,r2
 8005d6c:	1039883a 	mov	fp,r2
 8005d70:	8008be00 	call	8008be0 <__mcmp>
 8005d74:	0080df0e 	bge	zero,r2,80060f4 <_dtoa_r+0x161c>
 8005d78:	98c00e60 	cmpeqi	r3,r19,57
 8005d7c:	1800ce1e 	bne	r3,zero,80060b8 <_dtoa_r+0x15e0>
 8005d80:	d8800617 	ldw	r2,24(sp)
 8005d84:	14c00c44 	addi	r19,r2,49
 8005d88:	8023883a 	mov	r17,r16
 8005d8c:	b4c00005 	stb	r19,0(r22)
 8005d90:	9021883a 	mov	r16,r18
 8005d94:	003e2706 	br	8005634 <_dtoa_r+0xb5c>
 8005d98:	b82b883a 	mov	r21,r23
 8005d9c:	ddc00217 	ldw	r23,8(sp)
 8005da0:	200d883a 	mov	r6,r4
 8005da4:	280f883a 	mov	r7,r5
 8005da8:	800ce6c0 	call	800ce6c <__adddf3>
 8005dac:	180b883a 	mov	r5,r3
 8005db0:	800d883a 	mov	r6,r16
 8005db4:	900f883a 	mov	r7,r18
 8005db8:	1009883a 	mov	r4,r2
 8005dbc:	1823883a 	mov	r17,r3
 8005dc0:	1027883a 	mov	r19,r2
 8005dc4:	800e10c0 	call	800e10c <__gedf2>
 8005dc8:	d8c00417 	ldw	r3,16(sp)
 8005dcc:	18c00044 	addi	r3,r3,1
 8005dd0:	d8c00415 	stw	r3,16(sp)
 8005dd4:	00808c16 	blt	zero,r2,8006008 <_dtoa_r+0x1530>
 8005dd8:	800d883a 	mov	r6,r16
 8005ddc:	900f883a 	mov	r7,r18
 8005de0:	9809883a 	mov	r4,r19
 8005de4:	880b883a 	mov	r5,r17
 8005de8:	800e08c0 	call	800e08c <__eqdf2>
 8005dec:	1000021e 	bne	r2,zero,8005df8 <_dtoa_r+0x1320>
 8005df0:	ad40004c 	andi	r21,r21,1
 8005df4:	a800841e 	bne	r21,zero,8006008 <_dtoa_r+0x1530>
 8005df8:	a02b883a 	mov	r21,r20
 8005dfc:	003e1906 	br	8005664 <_dtoa_r+0xb8c>
 8005e00:	81400117 	ldw	r5,4(r16)
 8005e04:	b809883a 	mov	r4,r23
 8005e08:	800812c0 	call	800812c <_Balloc>
 8005e0c:	1023883a 	mov	r17,r2
 8005e10:	1000f326 	beq	r2,zero,80061e0 <_dtoa_r+0x1708>
 8005e14:	81800417 	ldw	r6,16(r16)
 8005e18:	81400304 	addi	r5,r16,12
 8005e1c:	11000304 	addi	r4,r2,12
 8005e20:	31800084 	addi	r6,r6,2
 8005e24:	300c90ba 	slli	r6,r6,2
 8005e28:	8007e100 	call	8007e10 <memcpy>
 8005e2c:	01800044 	movi	r6,1
 8005e30:	880b883a 	mov	r5,r17
 8005e34:	b809883a 	mov	r4,r23
 8005e38:	8008a580 	call	8008a58 <__lshift>
 8005e3c:	1025883a 	mov	r18,r2
 8005e40:	003e7d06 	br	8005838 <_dtoa_r+0xd60>
 8005e44:	e00b883a 	mov	r5,fp
 8005e48:	b809883a 	mov	r4,r23
 8005e4c:	80089100 	call	8008910 <__pow5mult>
 8005e50:	1039883a 	mov	fp,r2
 8005e54:	003d9d06 	br	80054cc <_dtoa_r+0x9f4>
 8005e58:	d8800617 	ldw	r2,24(sp)
 8005e5c:	d8c00517 	ldw	r3,20(sp)
 8005e60:	10e5c83a 	sub	r18,r2,r3
 8005e64:	003d7606 	br	8005440 <_dtoa_r+0x968>
 8005e68:	d8c00417 	ldw	r3,16(sp)
 8005e6c:	9805883a 	mov	r2,r19
 8005e70:	a827883a 	mov	r19,r21
 8005e74:	18c00044 	addi	r3,r3,1
 8005e78:	102b883a 	mov	r21,r2
 8005e7c:	d8c00415 	stw	r3,16(sp)
 8005e80:	98800e58 	cmpnei	r2,r19,57
 8005e84:	10008c26 	beq	r2,zero,80060b8 <_dtoa_r+0x15e0>
 8005e88:	98c00044 	addi	r3,r19,1
 8005e8c:	8023883a 	mov	r17,r16
 8005e90:	b0c00005 	stb	r3,0(r22)
 8005e94:	9021883a 	mov	r16,r18
 8005e98:	003de606 	br	8005634 <_dtoa_r+0xb5c>
 8005e9c:	9805883a 	mov	r2,r19
 8005ea0:	a827883a 	mov	r19,r21
 8005ea4:	102b883a 	mov	r21,r2
 8005ea8:	d8800417 	ldw	r2,16(sp)
 8005eac:	8023883a 	mov	r17,r16
 8005eb0:	9021883a 	mov	r16,r18
 8005eb4:	10800044 	addi	r2,r2,1
 8005eb8:	d8800415 	stw	r2,16(sp)
 8005ebc:	003dc606 	br	80055d8 <_dtoa_r+0xb00>
 8005ec0:	d9400c17 	ldw	r5,48(sp)
 8005ec4:	a009883a 	mov	r4,r20
 8005ec8:	800e2dc0 	call	800e2dc <__muldf3>
 8005ecc:	d9800d17 	ldw	r6,52(sp)
 8005ed0:	d9400117 	ldw	r5,4(sp)
 8005ed4:	d9001017 	ldw	r4,64(sp)
 8005ed8:	d8800c15 	stw	r2,48(sp)
 8005edc:	d8c00d15 	stw	r3,52(sp)
 8005ee0:	29000005 	stb	r4,0(r5)
 8005ee4:	31000058 	cmpnei	r4,r6,1
 8005ee8:	29a9883a 	add	r20,r5,r6
 8005eec:	2000a026 	beq	r4,zero,8006170 <_dtoa_r+0x1698>
 8005ef0:	dc400e15 	stw	r17,56(sp)
 8005ef4:	8009883a 	mov	r4,r16
 8005ef8:	900b883a 	mov	r5,r18
 8005efc:	a823883a 	mov	r17,r21
 8005f00:	000d883a 	mov	r6,zero
 8005f04:	01d00934 	movhi	r7,16420
 8005f08:	800e2dc0 	call	800e2dc <__muldf3>
 8005f0c:	180b883a 	mov	r5,r3
 8005f10:	1009883a 	mov	r4,r2
 8005f14:	1825883a 	mov	r18,r3
 8005f18:	102b883a 	mov	r21,r2
 8005f1c:	800f3900 	call	800f390 <__fixdfsi>
 8005f20:	1009883a 	mov	r4,r2
 8005f24:	1021883a 	mov	r16,r2
 8005f28:	800f4100 	call	800f410 <__floatsidf>
 8005f2c:	a809883a 	mov	r4,r21
 8005f30:	900b883a 	mov	r5,r18
 8005f34:	100d883a 	mov	r6,r2
 8005f38:	180f883a 	mov	r7,r3
 8005f3c:	8c400044 	addi	r17,r17,1
 8005f40:	84000c04 	addi	r16,r16,48
 8005f44:	800ea880 	call	800ea88 <__subdf3>
 8005f48:	8c3fffc5 	stb	r16,-1(r17)
 8005f4c:	1009883a 	mov	r4,r2
 8005f50:	180b883a 	mov	r5,r3
 8005f54:	a47fea1e 	bne	r20,r17,8005f00 <_dtoa_r+0x1428>
 8005f58:	dc400e17 	ldw	r17,56(sp)
 8005f5c:	1021883a 	mov	r16,r2
 8005f60:	1825883a 	mov	r18,r3
 8005f64:	d9000c17 	ldw	r4,48(sp)
 8005f68:	d9400d17 	ldw	r5,52(sp)
 8005f6c:	000d883a 	mov	r6,zero
 8005f70:	01cff834 	movhi	r7,16352
 8005f74:	800ce6c0 	call	800ce6c <__adddf3>
 8005f78:	800d883a 	mov	r6,r16
 8005f7c:	900f883a 	mov	r7,r18
 8005f80:	1009883a 	mov	r4,r2
 8005f84:	180b883a 	mov	r5,r3
 8005f88:	800e1f40 	call	800e1f4 <__ledf2>
 8005f8c:	10005416 	blt	r2,zero,80060e0 <_dtoa_r+0x1608>
 8005f90:	d9800c17 	ldw	r6,48(sp)
 8005f94:	d9c00d17 	ldw	r7,52(sp)
 8005f98:	0009883a 	mov	r4,zero
 8005f9c:	014ff834 	movhi	r5,16352
 8005fa0:	800ea880 	call	800ea88 <__subdf3>
 8005fa4:	800d883a 	mov	r6,r16
 8005fa8:	900f883a 	mov	r7,r18
 8005fac:	1009883a 	mov	r4,r2
 8005fb0:	180b883a 	mov	r5,r3
 8005fb4:	800e10c0 	call	800e10c <__gedf2>
 8005fb8:	00bc9a0e 	bge	zero,r2,8005224 <_dtoa_r+0x74c>
 8005fbc:	a0bfffc7 	ldb	r2,-1(r20)
 8005fc0:	a02b883a 	mov	r21,r20
 8005fc4:	a53fffc4 	addi	r20,r20,-1
 8005fc8:	10800c20 	cmpeqi	r2,r2,48
 8005fcc:	103ffb1e 	bne	r2,zero,8005fbc <_dtoa_r+0x14e4>
 8005fd0:	d8801117 	ldw	r2,68(sp)
 8005fd4:	10800044 	addi	r2,r2,1
 8005fd8:	d8800415 	stw	r2,16(sp)
 8005fdc:	003da106 	br	8005664 <_dtoa_r+0xb8c>
 8005fe0:	d8c01217 	ldw	r3,72(sp)
 8005fe4:	d9000617 	ldw	r4,24(sp)
 8005fe8:	00800d84 	movi	r2,54
 8005fec:	10c5c83a 	sub	r2,r2,r3
 8005ff0:	b0ad883a 	add	r22,r22,r2
 8005ff4:	2085883a 	add	r2,r4,r2
 8005ff8:	dd000817 	ldw	r20,32(sp)
 8005ffc:	2025883a 	mov	r18,r4
 8006000:	d8800615 	stw	r2,24(sp)
 8006004:	003d0e06 	br	8005440 <_dtoa_r+0x968>
 8006008:	d9000117 	ldw	r4,4(sp)
 800600c:	003c4b06 	br	800513c <_dtoa_r+0x664>
 8006010:	9821883a 	mov	r16,r19
 8006014:	8825883a 	mov	r18,r17
 8006018:	05400084 	movi	r21,2
 800601c:	003bb406 	br	8004ef0 <_dtoa_r+0x418>
 8006020:	d8800517 	ldw	r2,20(sp)
 8006024:	103ede26 	beq	r2,zero,8005ba0 <_dtoa_r+0x10c8>
 8006028:	d8800b17 	ldw	r2,44(sp)
 800602c:	00bc7d0e 	bge	zero,r2,8005224 <_dtoa_r+0x74c>
 8006030:	900b883a 	mov	r5,r18
 8006034:	8009883a 	mov	r4,r16
 8006038:	000d883a 	mov	r6,zero
 800603c:	01d00934 	movhi	r7,16420
 8006040:	800e2dc0 	call	800e2dc <__muldf3>
 8006044:	a9000044 	addi	r4,r21,1
 8006048:	1021883a 	mov	r16,r2
 800604c:	1825883a 	mov	r18,r3
 8006050:	800f4100 	call	800f410 <__floatsidf>
 8006054:	800d883a 	mov	r6,r16
 8006058:	900f883a 	mov	r7,r18
 800605c:	1009883a 	mov	r4,r2
 8006060:	180b883a 	mov	r5,r3
 8006064:	800e2dc0 	call	800e2dc <__muldf3>
 8006068:	1009883a 	mov	r4,r2
 800606c:	000d883a 	mov	r6,zero
 8006070:	01d00734 	movhi	r7,16412
 8006074:	180b883a 	mov	r5,r3
 8006078:	800ce6c0 	call	800ce6c <__adddf3>
 800607c:	d9000417 	ldw	r4,16(sp)
 8006080:	1029883a 	mov	r20,r2
 8006084:	00bf3034 	movhi	r2,64704
 8006088:	1887883a 	add	r3,r3,r2
 800608c:	d8800b17 	ldw	r2,44(sp)
 8006090:	213fffc4 	addi	r4,r4,-1
 8006094:	d9001115 	stw	r4,68(sp)
 8006098:	d8c00c15 	stw	r3,48(sp)
 800609c:	d8800d15 	stw	r2,52(sp)
 80060a0:	003bb106 	br	8004f68 <_dtoa_r+0x490>
 80060a4:	d8800417 	ldw	r2,16(sp)
 80060a8:	00c00c44 	movi	r3,49
 80060ac:	10800044 	addi	r2,r2,1
 80060b0:	d8800415 	stw	r2,16(sp)
 80060b4:	003c2a06 	br	8005160 <_dtoa_r+0x688>
 80060b8:	00800e44 	movi	r2,57
 80060bc:	8023883a 	mov	r17,r16
 80060c0:	d9400117 	ldw	r5,4(sp)
 80060c4:	b0800005 	stb	r2,0(r22)
 80060c8:	9021883a 	mov	r16,r18
 80060cc:	01000e44 	movi	r4,57
 80060d0:	003d5006 	br	8005614 <_dtoa_r+0xb3c>
 80060d4:	0029883a 	mov	r20,zero
 80060d8:	0021883a 	mov	r16,zero
 80060dc:	003e7106 	br	8005aa4 <_dtoa_r+0xfcc>
 80060e0:	d8801117 	ldw	r2,68(sp)
 80060e4:	d9000117 	ldw	r4,4(sp)
 80060e8:	10800044 	addi	r2,r2,1
 80060ec:	d8800415 	stw	r2,16(sp)
 80060f0:	003c1206 	br	800513c <_dtoa_r+0x664>
 80060f4:	103f241e 	bne	r2,zero,8005d88 <_dtoa_r+0x12b0>
 80060f8:	9880004c 	andi	r2,r19,1
 80060fc:	103f1e1e 	bne	r2,zero,8005d78 <_dtoa_r+0x12a0>
 8006100:	003f2106 	br	8005d88 <_dtoa_r+0x12b0>
 8006104:	d8801117 	ldw	r2,68(sp)
 8006108:	ddc00d17 	ldw	r23,52(sp)
 800610c:	10800044 	addi	r2,r2,1
 8006110:	d8800415 	stw	r2,16(sp)
 8006114:	003d5306 	br	8005664 <_dtoa_r+0xb8c>
 8006118:	d8c00417 	ldw	r3,16(sp)
 800611c:	a8800e60 	cmpeqi	r2,r21,57
 8006120:	a827883a 	mov	r19,r21
 8006124:	18c00044 	addi	r3,r3,1
 8006128:	d8c00415 	stw	r3,16(sp)
 800612c:	b5400044 	addi	r21,r22,1
 8006130:	103fe11e 	bne	r2,zero,80060b8 <_dtoa_r+0x15e0>
 8006134:	047f1216 	blt	zero,r17,8005d80 <_dtoa_r+0x12a8>
 8006138:	003f1306 	br	8005d88 <_dtoa_r+0x12b0>
 800613c:	d8800217 	ldw	r2,8(sp)
 8006140:	108000c8 	cmpgei	r2,r2,3
 8006144:	103e481e 	bne	r2,zero,8005a68 <_dtoa_r+0xf90>
 8006148:	dd400415 	stw	r21,16(sp)
 800614c:	003e0d06 	br	8005984 <_dtoa_r+0xeac>
 8006150:	d8800217 	ldw	r2,8(sp)
 8006154:	108000c8 	cmpgei	r2,r2,3
 8006158:	103e431e 	bne	r2,zero,8005a68 <_dtoa_r+0xf90>
 800615c:	d8800b17 	ldw	r2,44(sp)
 8006160:	dd400415 	stw	r21,16(sp)
 8006164:	d8800515 	stw	r2,20(sp)
 8006168:	04bdb10e 	bge	zero,r18,8005830 <_dtoa_r+0xd58>
 800616c:	003e5c06 	br	8005ae0 <_dtoa_r+0x1008>
 8006170:	a829883a 	mov	r20,r21
 8006174:	003f7b06 	br	8005f64 <_dtoa_r+0x148c>
 8006178:	05400084 	movi	r21,2
 800617c:	003b5c06 	br	8004ef0 <_dtoa_r+0x418>
 8006180:	01c20074 	movhi	r7,2049
 8006184:	01020074 	movhi	r4,2049
 8006188:	39c99104 	addi	r7,r7,9796
 800618c:	000d883a 	mov	r6,zero
 8006190:	01406a84 	movi	r5,426
 8006194:	21099604 	addi	r4,r4,9816
 8006198:	800b0000 	call	800b000 <__assert_func>
 800619c:	000b883a 	mov	r5,zero
 80061a0:	003b1506 	br	8004df8 <_dtoa_r+0x320>
 80061a4:	b8001115 	stw	zero,68(r23)
 80061a8:	000b883a 	mov	r5,zero
 80061ac:	b809883a 	mov	r4,r23
 80061b0:	800812c0 	call	800812c <_Balloc>
 80061b4:	d8800115 	stw	r2,4(sp)
 80061b8:	103ff126 	beq	r2,zero,8006180 <_dtoa_r+0x16a8>
 80061bc:	d8800117 	ldw	r2,4(sp)
 80061c0:	d8001e15 	stw	zero,120(sp)
 80061c4:	b8801015 	stw	r2,64(r23)
 80061c8:	00bfffc4 	movi	r2,-1
 80061cc:	d8800515 	stw	r2,20(sp)
 80061d0:	d8800b15 	stw	r2,44(sp)
 80061d4:	00800044 	movi	r2,1
 80061d8:	d8800715 	stw	r2,28(sp)
 80061dc:	003c1106 	br	8005224 <_dtoa_r+0x74c>
 80061e0:	01c20074 	movhi	r7,2049
 80061e4:	01020074 	movhi	r4,2049
 80061e8:	39c99104 	addi	r7,r7,9796
 80061ec:	000d883a 	mov	r6,zero
 80061f0:	0140ba84 	movi	r5,746
 80061f4:	21099604 	addi	r4,r4,9816
 80061f8:	800b0000 	call	800b000 <__assert_func>
 80061fc:	00820074 	movhi	r2,2049
 8006200:	10898e04 	addi	r2,r2,9784
 8006204:	d8800115 	stw	r2,4(sp)
 8006208:	003a6506 	br	8004ba0 <_dtoa_r+0xc8>
 800620c:	18c00120 	cmpeqi	r3,r3,4
 8006210:	183cc91e 	bne	r3,zero,8005538 <_dtoa_r+0xa60>
 8006214:	00c00f04 	movi	r3,60
 8006218:	1885c83a 	sub	r2,r3,r2
 800621c:	003cc106 	br	8005524 <_dtoa_r+0xa4c>

08006220 <__sflush_r>:
 8006220:	2880030b 	ldhu	r2,12(r5)
 8006224:	defffb04 	addi	sp,sp,-20
 8006228:	dcc00315 	stw	r19,12(sp)
 800622c:	dc000015 	stw	r16,0(sp)
 8006230:	dfc00415 	stw	ra,16(sp)
 8006234:	dc800215 	stw	r18,8(sp)
 8006238:	dc400115 	stw	r17,4(sp)
 800623c:	10c0020c 	andi	r3,r2,8
 8006240:	2821883a 	mov	r16,r5
 8006244:	2027883a 	mov	r19,r4
 8006248:	18003f1e 	bne	r3,zero,8006348 <__sflush_r+0x128>
 800624c:	28c00117 	ldw	r3,4(r5)
 8006250:	10820014 	ori	r2,r2,2048
 8006254:	2880030d 	sth	r2,12(r5)
 8006258:	00c0550e 	bge	zero,r3,80063b0 <__sflush_r+0x190>
 800625c:	82000a17 	ldw	r8,40(r16)
 8006260:	40003126 	beq	r8,zero,8006328 <__sflush_r+0x108>
 8006264:	9c400017 	ldw	r17,0(r19)
 8006268:	1104000c 	andi	r4,r2,4096
 800626c:	98000015 	stw	zero,0(r19)
 8006270:	81400717 	ldw	r5,28(r16)
 8006274:	1007883a 	mov	r3,r2
 8006278:	2000521e 	bne	r4,zero,80063c4 <__sflush_r+0x1a4>
 800627c:	01c00044 	movi	r7,1
 8006280:	000d883a 	mov	r6,zero
 8006284:	9809883a 	mov	r4,r19
 8006288:	403ee83a 	callr	r8
 800628c:	10ffffd8 	cmpnei	r3,r2,-1
 8006290:	18005826 	beq	r3,zero,80063f4 <__sflush_r+0x1d4>
 8006294:	80c0030b 	ldhu	r3,12(r16)
 8006298:	82000a17 	ldw	r8,40(r16)
 800629c:	81400717 	ldw	r5,28(r16)
 80062a0:	18c0010c 	andi	r3,r3,4
 80062a4:	18000626 	beq	r3,zero,80062c0 <__sflush_r+0xa0>
 80062a8:	81000117 	ldw	r4,4(r16)
 80062ac:	80c00c17 	ldw	r3,48(r16)
 80062b0:	1105c83a 	sub	r2,r2,r4
 80062b4:	18000226 	beq	r3,zero,80062c0 <__sflush_r+0xa0>
 80062b8:	80c00f17 	ldw	r3,60(r16)
 80062bc:	10c5c83a 	sub	r2,r2,r3
 80062c0:	100d883a 	mov	r6,r2
 80062c4:	000f883a 	mov	r7,zero
 80062c8:	9809883a 	mov	r4,r19
 80062cc:	403ee83a 	callr	r8
 80062d0:	10ffffd8 	cmpnei	r3,r2,-1
 80062d4:	18003d1e 	bne	r3,zero,80063cc <__sflush_r+0x1ac>
 80062d8:	99000017 	ldw	r4,0(r19)
 80062dc:	80c0030b 	ldhu	r3,12(r16)
 80062e0:	20004e26 	beq	r4,zero,800641c <__sflush_r+0x1fc>
 80062e4:	21400760 	cmpeqi	r5,r4,29
 80062e8:	2800021e 	bne	r5,zero,80062f4 <__sflush_r+0xd4>
 80062ec:	210005a0 	cmpeqi	r4,r4,22
 80062f0:	20002c26 	beq	r4,zero,80063a4 <__sflush_r+0x184>
 80062f4:	80800417 	ldw	r2,16(r16)
 80062f8:	18fdffcc 	andi	r3,r3,63487
 80062fc:	80c0030d 	sth	r3,12(r16)
 8006300:	80000115 	stw	zero,4(r16)
 8006304:	80800015 	stw	r2,0(r16)
 8006308:	81400c17 	ldw	r5,48(r16)
 800630c:	9c400015 	stw	r17,0(r19)
 8006310:	28000526 	beq	r5,zero,8006328 <__sflush_r+0x108>
 8006314:	80801004 	addi	r2,r16,64
 8006318:	28800226 	beq	r5,r2,8006324 <__sflush_r+0x104>
 800631c:	9809883a 	mov	r4,r19
 8006320:	80069f40 	call	80069f4 <_free_r>
 8006324:	80000c15 	stw	zero,48(r16)
 8006328:	0005883a 	mov	r2,zero
 800632c:	dfc00417 	ldw	ra,16(sp)
 8006330:	dcc00317 	ldw	r19,12(sp)
 8006334:	dc800217 	ldw	r18,8(sp)
 8006338:	dc400117 	ldw	r17,4(sp)
 800633c:	dc000017 	ldw	r16,0(sp)
 8006340:	dec00504 	addi	sp,sp,20
 8006344:	f800283a 	ret
 8006348:	2c800417 	ldw	r18,16(r5)
 800634c:	903ff626 	beq	r18,zero,8006328 <__sflush_r+0x108>
 8006350:	2c400017 	ldw	r17,0(r5)
 8006354:	108000cc 	andi	r2,r2,3
 8006358:	2c800015 	stw	r18,0(r5)
 800635c:	8ca3c83a 	sub	r17,r17,r18
 8006360:	1000161e 	bne	r2,zero,80063bc <__sflush_r+0x19c>
 8006364:	28800517 	ldw	r2,20(r5)
 8006368:	80800215 	stw	r2,8(r16)
 800636c:	04400316 	blt	zero,r17,800637c <__sflush_r+0x15c>
 8006370:	003fed06 	br	8006328 <__sflush_r+0x108>
 8006374:	90a5883a 	add	r18,r18,r2
 8006378:	047feb0e 	bge	zero,r17,8006328 <__sflush_r+0x108>
 800637c:	80800917 	ldw	r2,36(r16)
 8006380:	81400717 	ldw	r5,28(r16)
 8006384:	880f883a 	mov	r7,r17
 8006388:	900d883a 	mov	r6,r18
 800638c:	9809883a 	mov	r4,r19
 8006390:	103ee83a 	callr	r2
 8006394:	88a3c83a 	sub	r17,r17,r2
 8006398:	00bff616 	blt	zero,r2,8006374 <__sflush_r+0x154>
 800639c:	80c0030b 	ldhu	r3,12(r16)
 80063a0:	00bfffc4 	movi	r2,-1
 80063a4:	18c01014 	ori	r3,r3,64
 80063a8:	80c0030d 	sth	r3,12(r16)
 80063ac:	003fdf06 	br	800632c <__sflush_r+0x10c>
 80063b0:	28c00f17 	ldw	r3,60(r5)
 80063b4:	00ffa916 	blt	zero,r3,800625c <__sflush_r+0x3c>
 80063b8:	003fdb06 	br	8006328 <__sflush_r+0x108>
 80063bc:	0005883a 	mov	r2,zero
 80063c0:	003fe906 	br	8006368 <__sflush_r+0x148>
 80063c4:	80801417 	ldw	r2,80(r16)
 80063c8:	003fb506 	br	80062a0 <__sflush_r+0x80>
 80063cc:	80c0030b 	ldhu	r3,12(r16)
 80063d0:	81000417 	ldw	r4,16(r16)
 80063d4:	80000115 	stw	zero,4(r16)
 80063d8:	197dffcc 	andi	r5,r3,63487
 80063dc:	8140030d 	sth	r5,12(r16)
 80063e0:	81000015 	stw	r4,0(r16)
 80063e4:	18c4000c 	andi	r3,r3,4096
 80063e8:	183fc726 	beq	r3,zero,8006308 <__sflush_r+0xe8>
 80063ec:	80801415 	stw	r2,80(r16)
 80063f0:	003fc506 	br	8006308 <__sflush_r+0xe8>
 80063f4:	98c00017 	ldw	r3,0(r19)
 80063f8:	183fa626 	beq	r3,zero,8006294 <__sflush_r+0x74>
 80063fc:	19000760 	cmpeqi	r4,r3,29
 8006400:	20000e1e 	bne	r4,zero,800643c <__sflush_r+0x21c>
 8006404:	18c00598 	cmpnei	r3,r3,22
 8006408:	18000c26 	beq	r3,zero,800643c <__sflush_r+0x21c>
 800640c:	80c0030b 	ldhu	r3,12(r16)
 8006410:	18c01014 	ori	r3,r3,64
 8006414:	80c0030d 	sth	r3,12(r16)
 8006418:	003fc406 	br	800632c <__sflush_r+0x10c>
 800641c:	81000417 	ldw	r4,16(r16)
 8006420:	197dffcc 	andi	r5,r3,63487
 8006424:	8140030d 	sth	r5,12(r16)
 8006428:	80000115 	stw	zero,4(r16)
 800642c:	81000015 	stw	r4,0(r16)
 8006430:	18c4000c 	andi	r3,r3,4096
 8006434:	183fb426 	beq	r3,zero,8006308 <__sflush_r+0xe8>
 8006438:	003fec06 	br	80063ec <__sflush_r+0x1cc>
 800643c:	9c400015 	stw	r17,0(r19)
 8006440:	0005883a 	mov	r2,zero
 8006444:	003fb906 	br	800632c <__sflush_r+0x10c>

08006448 <_fflush_r>:
 8006448:	defffd04 	addi	sp,sp,-12
 800644c:	dc000115 	stw	r16,4(sp)
 8006450:	dfc00215 	stw	ra,8(sp)
 8006454:	2021883a 	mov	r16,r4
 8006458:	20000226 	beq	r4,zero,8006464 <_fflush_r+0x1c>
 800645c:	20800e17 	ldw	r2,56(r4)
 8006460:	10000726 	beq	r2,zero,8006480 <_fflush_r+0x38>
 8006464:	2880030f 	ldh	r2,12(r5)
 8006468:	10000a1e 	bne	r2,zero,8006494 <_fflush_r+0x4c>
 800646c:	0005883a 	mov	r2,zero
 8006470:	dfc00217 	ldw	ra,8(sp)
 8006474:	dc000117 	ldw	r16,4(sp)
 8006478:	dec00304 	addi	sp,sp,12
 800647c:	f800283a 	ret
 8006480:	d9400015 	stw	r5,0(sp)
 8006484:	80068900 	call	8006890 <__sinit>
 8006488:	d9400017 	ldw	r5,0(sp)
 800648c:	2880030f 	ldh	r2,12(r5)
 8006490:	103ff626 	beq	r2,zero,800646c <_fflush_r+0x24>
 8006494:	8009883a 	mov	r4,r16
 8006498:	dfc00217 	ldw	ra,8(sp)
 800649c:	dc000117 	ldw	r16,4(sp)
 80064a0:	dec00304 	addi	sp,sp,12
 80064a4:	80062201 	jmpi	8006220 <__sflush_r>

080064a8 <fflush>:
 80064a8:	20001726 	beq	r4,zero,8006508 <fflush+0x60>
 80064ac:	00820074 	movhi	r2,2049
 80064b0:	200b883a 	mov	r5,r4
 80064b4:	1111f217 	ldw	r4,18376(r2)
 80064b8:	20000226 	beq	r4,zero,80064c4 <fflush+0x1c>
 80064bc:	20800e17 	ldw	r2,56(r4)
 80064c0:	10000526 	beq	r2,zero,80064d8 <fflush+0x30>
 80064c4:	2880030f 	ldh	r2,12(r5)
 80064c8:	1000021e 	bne	r2,zero,80064d4 <fflush+0x2c>
 80064cc:	0005883a 	mov	r2,zero
 80064d0:	f800283a 	ret
 80064d4:	80062201 	jmpi	8006220 <__sflush_r>
 80064d8:	defffd04 	addi	sp,sp,-12
 80064dc:	d9400115 	stw	r5,4(sp)
 80064e0:	d9000015 	stw	r4,0(sp)
 80064e4:	dfc00215 	stw	ra,8(sp)
 80064e8:	80068900 	call	8006890 <__sinit>
 80064ec:	d9400117 	ldw	r5,4(sp)
 80064f0:	d9000017 	ldw	r4,0(sp)
 80064f4:	2880030f 	ldh	r2,12(r5)
 80064f8:	10000826 	beq	r2,zero,800651c <fflush+0x74>
 80064fc:	dfc00217 	ldw	ra,8(sp)
 8006500:	dec00304 	addi	sp,sp,12
 8006504:	80062201 	jmpi	8006220 <__sflush_r>
 8006508:	00820074 	movhi	r2,2049
 800650c:	1111f117 	ldw	r4,18372(r2)
 8006510:	01420034 	movhi	r5,2048
 8006514:	29591204 	addi	r5,r5,25672
 8006518:	80072501 	jmpi	8007250 <_fwalk_reent>
 800651c:	0005883a 	mov	r2,zero
 8006520:	dfc00217 	ldw	ra,8(sp)
 8006524:	dec00304 	addi	sp,sp,12
 8006528:	f800283a 	ret

0800652c <__fp_lock>:
 800652c:	0005883a 	mov	r2,zero
 8006530:	f800283a 	ret

08006534 <_cleanup_r>:
 8006534:	01420074 	movhi	r5,2049
 8006538:	296c7f04 	addi	r5,r5,-19972
 800653c:	80072501 	jmpi	8007250 <_fwalk_reent>

08006540 <__fp_unlock>:
 8006540:	0005883a 	mov	r2,zero
 8006544:	f800283a 	ret

08006548 <__sinit.part.0>:
 8006548:	00c20034 	movhi	r3,2048
 800654c:	20800117 	ldw	r2,4(r4)
 8006550:	18d94d04 	addi	r3,r3,25908
 8006554:	20c00f15 	stw	r3,60(r4)
 8006558:	2140bb04 	addi	r5,r4,748
 800655c:	00c000c4 	movi	r3,3
 8006560:	20c0b915 	stw	r3,740(r4)
 8006564:	2140ba15 	stw	r5,744(r4)
 8006568:	2000b815 	stw	zero,736(r4)
 800656c:	10001705 	stb	zero,92(r2)
 8006570:	10001745 	stb	zero,93(r2)
 8006574:	10001785 	stb	zero,94(r2)
 8006578:	100017c5 	stb	zero,95(r2)
 800657c:	10001805 	stb	zero,96(r2)
 8006580:	10001845 	stb	zero,97(r2)
 8006584:	10001885 	stb	zero,98(r2)
 8006588:	100018c5 	stb	zero,99(r2)
 800658c:	00c00104 	movi	r3,4
 8006590:	10c00315 	stw	r3,12(r2)
 8006594:	02020074 	movhi	r8,2049
 8006598:	20c00217 	ldw	r3,8(r4)
 800659c:	01c20074 	movhi	r7,2049
 80065a0:	01820074 	movhi	r6,2049
 80065a4:	01420074 	movhi	r5,2049
 80065a8:	42263604 	addi	r8,r8,-26408
 80065ac:	39e64d04 	addi	r7,r7,-26316
 80065b0:	31a66d04 	addi	r6,r6,-26188
 80065b4:	29668404 	addi	r5,r5,-26096
 80065b8:	02400074 	movhi	r9,1
 80065bc:	10001915 	stw	zero,100(r2)
 80065c0:	10000015 	stw	zero,0(r2)
 80065c4:	10000115 	stw	zero,4(r2)
 80065c8:	10000215 	stw	zero,8(r2)
 80065cc:	10000415 	stw	zero,16(r2)
 80065d0:	10000515 	stw	zero,20(r2)
 80065d4:	10000615 	stw	zero,24(r2)
 80065d8:	10800715 	stw	r2,28(r2)
 80065dc:	12000815 	stw	r8,32(r2)
 80065e0:	11c00915 	stw	r7,36(r2)
 80065e4:	11800a15 	stw	r6,40(r2)
 80065e8:	11400b15 	stw	r5,44(r2)
 80065ec:	4a400284 	addi	r9,r9,10
 80065f0:	1a400315 	stw	r9,12(r3)
 80065f4:	18001915 	stw	zero,100(r3)
 80065f8:	18000015 	stw	zero,0(r3)
 80065fc:	18000115 	stw	zero,4(r3)
 8006600:	18000215 	stw	zero,8(r3)
 8006604:	18000415 	stw	zero,16(r3)
 8006608:	18001705 	stb	zero,92(r3)
 800660c:	18001745 	stb	zero,93(r3)
 8006610:	18001785 	stb	zero,94(r3)
 8006614:	180017c5 	stb	zero,95(r3)
 8006618:	18001805 	stb	zero,96(r3)
 800661c:	18001845 	stb	zero,97(r3)
 8006620:	18001885 	stb	zero,98(r3)
 8006624:	180018c5 	stb	zero,99(r3)
 8006628:	20800317 	ldw	r2,12(r4)
 800662c:	024000b4 	movhi	r9,2
 8006630:	18000515 	stw	zero,20(r3)
 8006634:	18000615 	stw	zero,24(r3)
 8006638:	18c00715 	stw	r3,28(r3)
 800663c:	1a000815 	stw	r8,32(r3)
 8006640:	19c00915 	stw	r7,36(r3)
 8006644:	19800a15 	stw	r6,40(r3)
 8006648:	19400b15 	stw	r5,44(r3)
 800664c:	4a400484 	addi	r9,r9,18
 8006650:	10001915 	stw	zero,100(r2)
 8006654:	10000015 	stw	zero,0(r2)
 8006658:	10000115 	stw	zero,4(r2)
 800665c:	10000215 	stw	zero,8(r2)
 8006660:	12400315 	stw	r9,12(r2)
 8006664:	10000415 	stw	zero,16(r2)
 8006668:	10000515 	stw	zero,20(r2)
 800666c:	10000615 	stw	zero,24(r2)
 8006670:	10001705 	stb	zero,92(r2)
 8006674:	10001745 	stb	zero,93(r2)
 8006678:	10001785 	stb	zero,94(r2)
 800667c:	100017c5 	stb	zero,95(r2)
 8006680:	10001805 	stb	zero,96(r2)
 8006684:	10001845 	stb	zero,97(r2)
 8006688:	10001885 	stb	zero,98(r2)
 800668c:	100018c5 	stb	zero,99(r2)
 8006690:	10800715 	stw	r2,28(r2)
 8006694:	12000815 	stw	r8,32(r2)
 8006698:	11c00915 	stw	r7,36(r2)
 800669c:	11800a15 	stw	r6,40(r2)
 80066a0:	11400b15 	stw	r5,44(r2)
 80066a4:	00800044 	movi	r2,1
 80066a8:	20800e15 	stw	r2,56(r4)
 80066ac:	f800283a 	ret

080066b0 <__sfmoreglue>:
 80066b0:	defffc04 	addi	sp,sp,-16
 80066b4:	dc800215 	stw	r18,8(sp)
 80066b8:	2825883a 	mov	r18,r5
 80066bc:	dc000015 	stw	r16,0(sp)
 80066c0:	01401a04 	movi	r5,104
 80066c4:	2021883a 	mov	r16,r4
 80066c8:	913fffc4 	addi	r4,r18,-1
 80066cc:	dfc00315 	stw	ra,12(sp)
 80066d0:	dc400115 	stw	r17,4(sp)
 80066d4:	800ce440 	call	800ce44 <__mulsi3>
 80066d8:	8009883a 	mov	r4,r16
 80066dc:	11401d04 	addi	r5,r2,116
 80066e0:	1023883a 	mov	r17,r2
 80066e4:	80075600 	call	8007560 <_malloc_r>
 80066e8:	1021883a 	mov	r16,r2
 80066ec:	10000726 	beq	r2,zero,800670c <__sfmoreglue+0x5c>
 80066f0:	11000304 	addi	r4,r2,12
 80066f4:	10000015 	stw	zero,0(r2)
 80066f8:	14800115 	stw	r18,4(r2)
 80066fc:	11000215 	stw	r4,8(r2)
 8006700:	89801a04 	addi	r6,r17,104
 8006704:	000b883a 	mov	r5,zero
 8006708:	800803c0 	call	800803c <memset>
 800670c:	8005883a 	mov	r2,r16
 8006710:	dfc00317 	ldw	ra,12(sp)
 8006714:	dc800217 	ldw	r18,8(sp)
 8006718:	dc400117 	ldw	r17,4(sp)
 800671c:	dc000017 	ldw	r16,0(sp)
 8006720:	dec00404 	addi	sp,sp,16
 8006724:	f800283a 	ret

08006728 <__sfp>:
 8006728:	defffb04 	addi	sp,sp,-20
 800672c:	00820074 	movhi	r2,2049
 8006730:	dc000015 	stw	r16,0(sp)
 8006734:	1411f117 	ldw	r16,18372(r2)
 8006738:	dc400115 	stw	r17,4(sp)
 800673c:	dfc00415 	stw	ra,16(sp)
 8006740:	80800e17 	ldw	r2,56(r16)
 8006744:	dcc00315 	stw	r19,12(sp)
 8006748:	dc800215 	stw	r18,8(sp)
 800674c:	2023883a 	mov	r17,r4
 8006750:	10003126 	beq	r2,zero,8006818 <__sfp+0xf0>
 8006754:	8100ba17 	ldw	r4,744(r16)
 8006758:	8140b917 	ldw	r5,740(r16)
 800675c:	04c00104 	movi	r19,4
 8006760:	8400b804 	addi	r16,r16,736
 8006764:	297fffc4 	addi	r5,r5,-1
 8006768:	2800050e 	bge	r5,zero,8006780 <__sfp+0x58>
 800676c:	00002406 	br	8006800 <__sfp+0xd8>
 8006770:	297fffc4 	addi	r5,r5,-1
 8006774:	28bfffd8 	cmpnei	r2,r5,-1
 8006778:	21001a04 	addi	r4,r4,104
 800677c:	10002026 	beq	r2,zero,8006800 <__sfp+0xd8>
 8006780:	2080030f 	ldh	r2,12(r4)
 8006784:	103ffa1e 	bne	r2,zero,8006770 <__sfp+0x48>
 8006788:	00bffff4 	movhi	r2,65535
 800678c:	10800044 	addi	r2,r2,1
 8006790:	20001915 	stw	zero,100(r4)
 8006794:	20000015 	stw	zero,0(r4)
 8006798:	20000115 	stw	zero,4(r4)
 800679c:	20000215 	stw	zero,8(r4)
 80067a0:	20800315 	stw	r2,12(r4)
 80067a4:	20000415 	stw	zero,16(r4)
 80067a8:	20000515 	stw	zero,20(r4)
 80067ac:	20000615 	stw	zero,24(r4)
 80067b0:	20001705 	stb	zero,92(r4)
 80067b4:	20001745 	stb	zero,93(r4)
 80067b8:	20001785 	stb	zero,94(r4)
 80067bc:	200017c5 	stb	zero,95(r4)
 80067c0:	20001805 	stb	zero,96(r4)
 80067c4:	20001845 	stb	zero,97(r4)
 80067c8:	20001885 	stb	zero,98(r4)
 80067cc:	200018c5 	stb	zero,99(r4)
 80067d0:	20000c15 	stw	zero,48(r4)
 80067d4:	20000d15 	stw	zero,52(r4)
 80067d8:	20001115 	stw	zero,68(r4)
 80067dc:	20001215 	stw	zero,72(r4)
 80067e0:	2005883a 	mov	r2,r4
 80067e4:	dfc00417 	ldw	ra,16(sp)
 80067e8:	dcc00317 	ldw	r19,12(sp)
 80067ec:	dc800217 	ldw	r18,8(sp)
 80067f0:	dc400117 	ldw	r17,4(sp)
 80067f4:	dc000017 	ldw	r16,0(sp)
 80067f8:	dec00504 	addi	sp,sp,20
 80067fc:	f800283a 	ret
 8006800:	80800017 	ldw	r2,0(r16)
 8006804:	10000726 	beq	r2,zero,8006824 <__sfp+0xfc>
 8006808:	11000217 	ldw	r4,8(r2)
 800680c:	11400117 	ldw	r5,4(r2)
 8006810:	1021883a 	mov	r16,r2
 8006814:	003fd306 	br	8006764 <__sfp+0x3c>
 8006818:	8009883a 	mov	r4,r16
 800681c:	80065480 	call	8006548 <__sinit.part.0>
 8006820:	003fcc06 	br	8006754 <__sfp+0x2c>
 8006824:	01406b04 	movi	r5,428
 8006828:	8809883a 	mov	r4,r17
 800682c:	80075600 	call	8007560 <_malloc_r>
 8006830:	1025883a 	mov	r18,r2
 8006834:	10000c26 	beq	r2,zero,8006868 <__sfp+0x140>
 8006838:	11000304 	addi	r4,r2,12
 800683c:	11000215 	stw	r4,8(r2)
 8006840:	000b883a 	mov	r5,zero
 8006844:	10000015 	stw	zero,0(r2)
 8006848:	14c00115 	stw	r19,4(r2)
 800684c:	01806804 	movi	r6,416
 8006850:	800803c0 	call	800803c <memset>
 8006854:	1009883a 	mov	r4,r2
 8006858:	84800015 	stw	r18,0(r16)
 800685c:	014000c4 	movi	r5,3
 8006860:	9021883a 	mov	r16,r18
 8006864:	003fc606 	br	8006780 <__sfp+0x58>
 8006868:	80000015 	stw	zero,0(r16)
 800686c:	00800304 	movi	r2,12
 8006870:	88800015 	stw	r2,0(r17)
 8006874:	0009883a 	mov	r4,zero
 8006878:	003fd906 	br	80067e0 <__sfp+0xb8>

0800687c <_cleanup>:
 800687c:	00820074 	movhi	r2,2049
 8006880:	1111f117 	ldw	r4,18372(r2)
 8006884:	01420074 	movhi	r5,2049
 8006888:	296c7f04 	addi	r5,r5,-19972
 800688c:	80072501 	jmpi	8007250 <_fwalk_reent>

08006890 <__sinit>:
 8006890:	20800e17 	ldw	r2,56(r4)
 8006894:	10000126 	beq	r2,zero,800689c <__sinit+0xc>
 8006898:	f800283a 	ret
 800689c:	80065481 	jmpi	8006548 <__sinit.part.0>

080068a0 <__sfp_lock_acquire>:
 80068a0:	f800283a 	ret

080068a4 <__sfp_lock_release>:
 80068a4:	f800283a 	ret

080068a8 <__sinit_lock_acquire>:
 80068a8:	f800283a 	ret

080068ac <__sinit_lock_release>:
 80068ac:	f800283a 	ret

080068b0 <__fp_lock_all>:
 80068b0:	00820074 	movhi	r2,2049
 80068b4:	1111f217 	ldw	r4,18376(r2)
 80068b8:	01420034 	movhi	r5,2048
 80068bc:	29594b04 	addi	r5,r5,25900
 80068c0:	80071b81 	jmpi	80071b8 <_fwalk>

080068c4 <__fp_unlock_all>:
 80068c4:	00820074 	movhi	r2,2049
 80068c8:	1111f217 	ldw	r4,18376(r2)
 80068cc:	01420034 	movhi	r5,2048
 80068d0:	29595004 	addi	r5,r5,25920
 80068d4:	80071b81 	jmpi	80071b8 <_fwalk>

080068d8 <_malloc_trim_r>:
 80068d8:	defffb04 	addi	sp,sp,-20
 80068dc:	dcc00315 	stw	r19,12(sp)
 80068e0:	04c20074 	movhi	r19,2049
 80068e4:	dc800215 	stw	r18,8(sp)
 80068e8:	dc400115 	stw	r17,4(sp)
 80068ec:	dc000015 	stw	r16,0(sp)
 80068f0:	dfc00415 	stw	ra,16(sp)
 80068f4:	2821883a 	mov	r16,r5
 80068f8:	9ccc1204 	addi	r19,r19,12360
 80068fc:	2025883a 	mov	r18,r4
 8006900:	800fd180 	call	800fd18 <__malloc_lock>
 8006904:	98800217 	ldw	r2,8(r19)
 8006908:	14400117 	ldw	r17,4(r2)
 800690c:	00bfff04 	movi	r2,-4
 8006910:	88a2703a 	and	r17,r17,r2
 8006914:	8c21c83a 	sub	r16,r17,r16
 8006918:	8403fbc4 	addi	r16,r16,4079
 800691c:	8020d33a 	srli	r16,r16,12
 8006920:	843fffc4 	addi	r16,r16,-1
 8006924:	8020933a 	slli	r16,r16,12
 8006928:	80840008 	cmpgei	r2,r16,4096
 800692c:	10000626 	beq	r2,zero,8006948 <_malloc_trim_r+0x70>
 8006930:	000b883a 	mov	r5,zero
 8006934:	9009883a 	mov	r4,r18
 8006938:	80098800 	call	8009880 <_sbrk_r>
 800693c:	98c00217 	ldw	r3,8(r19)
 8006940:	1c47883a 	add	r3,r3,r17
 8006944:	10c00a26 	beq	r2,r3,8006970 <_malloc_trim_r+0x98>
 8006948:	9009883a 	mov	r4,r18
 800694c:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8006950:	0005883a 	mov	r2,zero
 8006954:	dfc00417 	ldw	ra,16(sp)
 8006958:	dcc00317 	ldw	r19,12(sp)
 800695c:	dc800217 	ldw	r18,8(sp)
 8006960:	dc400117 	ldw	r17,4(sp)
 8006964:	dc000017 	ldw	r16,0(sp)
 8006968:	dec00504 	addi	sp,sp,20
 800696c:	f800283a 	ret
 8006970:	040bc83a 	sub	r5,zero,r16
 8006974:	9009883a 	mov	r4,r18
 8006978:	80098800 	call	8009880 <_sbrk_r>
 800697c:	10bfffd8 	cmpnei	r2,r2,-1
 8006980:	10000d26 	beq	r2,zero,80069b8 <_malloc_trim_r+0xe0>
 8006984:	00820074 	movhi	r2,2049
 8006988:	10990217 	ldw	r2,25608(r2)
 800698c:	98c00217 	ldw	r3,8(r19)
 8006990:	8c23c83a 	sub	r17,r17,r16
 8006994:	8c400054 	ori	r17,r17,1
 8006998:	1421c83a 	sub	r16,r2,r16
 800699c:	1c400115 	stw	r17,4(r3)
 80069a0:	00820074 	movhi	r2,2049
 80069a4:	9009883a 	mov	r4,r18
 80069a8:	14190215 	stw	r16,25608(r2)
 80069ac:	800fd3c0 	call	800fd3c <__malloc_unlock>
 80069b0:	00800044 	movi	r2,1
 80069b4:	003fe706 	br	8006954 <_malloc_trim_r+0x7c>
 80069b8:	000b883a 	mov	r5,zero
 80069bc:	9009883a 	mov	r4,r18
 80069c0:	80098800 	call	8009880 <_sbrk_r>
 80069c4:	99000217 	ldw	r4,8(r19)
 80069c8:	1107c83a 	sub	r3,r2,r4
 80069cc:	19400410 	cmplti	r5,r3,16
 80069d0:	283fdd1e 	bne	r5,zero,8006948 <_malloc_trim_r+0x70>
 80069d4:	01420074 	movhi	r5,2049
 80069d8:	2951f317 	ldw	r5,18380(r5)
 80069dc:	18c00054 	ori	r3,r3,1
 80069e0:	20c00115 	stw	r3,4(r4)
 80069e4:	1145c83a 	sub	r2,r2,r5
 80069e8:	01420074 	movhi	r5,2049
 80069ec:	28990215 	stw	r2,25608(r5)
 80069f0:	003fd506 	br	8006948 <_malloc_trim_r+0x70>

080069f4 <_free_r>:
 80069f4:	28004f26 	beq	r5,zero,8006b34 <_free_r+0x140>
 80069f8:	defffd04 	addi	sp,sp,-12
 80069fc:	dc400115 	stw	r17,4(sp)
 8006a00:	dc000015 	stw	r16,0(sp)
 8006a04:	2023883a 	mov	r17,r4
 8006a08:	2821883a 	mov	r16,r5
 8006a0c:	dfc00215 	stw	ra,8(sp)
 8006a10:	800fd180 	call	800fd18 <__malloc_lock>
 8006a14:	81ffff17 	ldw	r7,-4(r16)
 8006a18:	00bfff84 	movi	r2,-2
 8006a1c:	80fffe04 	addi	r3,r16,-8
 8006a20:	3884703a 	and	r2,r7,r2
 8006a24:	01020074 	movhi	r4,2049
 8006a28:	188d883a 	add	r6,r3,r2
 8006a2c:	210c1204 	addi	r4,r4,12360
 8006a30:	31400117 	ldw	r5,4(r6)
 8006a34:	22000217 	ldw	r8,8(r4)
 8006a38:	027fff04 	movi	r9,-4
 8006a3c:	2a4a703a 	and	r5,r5,r9
 8006a40:	41806426 	beq	r8,r6,8006bd4 <_free_r+0x1e0>
 8006a44:	31400115 	stw	r5,4(r6)
 8006a48:	39c0004c 	andi	r7,r7,1
 8006a4c:	3151883a 	add	r8,r6,r5
 8006a50:	3800281e 	bne	r7,zero,8006af4 <_free_r+0x100>
 8006a54:	82bffe17 	ldw	r10,-8(r16)
 8006a58:	42000117 	ldw	r8,4(r8)
 8006a5c:	01c20074 	movhi	r7,2049
 8006a60:	1a87c83a 	sub	r3,r3,r10
 8006a64:	1a400217 	ldw	r9,8(r3)
 8006a68:	39cc1404 	addi	r7,r7,12368
 8006a6c:	1285883a 	add	r2,r2,r10
 8006a70:	4200004c 	andi	r8,r8,1
 8006a74:	49c04c26 	beq	r9,r7,8006ba8 <_free_r+0x1b4>
 8006a78:	1a800317 	ldw	r10,12(r3)
 8006a7c:	4a800315 	stw	r10,12(r9)
 8006a80:	52400215 	stw	r9,8(r10)
 8006a84:	40007126 	beq	r8,zero,8006c4c <_free_r+0x258>
 8006a88:	11400054 	ori	r5,r2,1
 8006a8c:	19400115 	stw	r5,4(r3)
 8006a90:	30800015 	stw	r2,0(r6)
 8006a94:	11408028 	cmpgeui	r5,r2,512
 8006a98:	28002c1e 	bne	r5,zero,8006b4c <_free_r+0x158>
 8006a9c:	100ad0fa 	srli	r5,r2,3
 8006aa0:	100cd17a 	srli	r6,r2,5
 8006aa4:	00800044 	movi	r2,1
 8006aa8:	29400044 	addi	r5,r5,1
 8006aac:	280a90fa 	slli	r5,r5,3
 8006ab0:	21c00117 	ldw	r7,4(r4)
 8006ab4:	1184983a 	sll	r2,r2,r6
 8006ab8:	214b883a 	add	r5,r4,r5
 8006abc:	29800017 	ldw	r6,0(r5)
 8006ac0:	11c4b03a 	or	r2,r2,r7
 8006ac4:	29fffe04 	addi	r7,r5,-8
 8006ac8:	19c00315 	stw	r7,12(r3)
 8006acc:	19800215 	stw	r6,8(r3)
 8006ad0:	20800115 	stw	r2,4(r4)
 8006ad4:	28c00015 	stw	r3,0(r5)
 8006ad8:	30c00315 	stw	r3,12(r6)
 8006adc:	8809883a 	mov	r4,r17
 8006ae0:	dfc00217 	ldw	ra,8(sp)
 8006ae4:	dc400117 	ldw	r17,4(sp)
 8006ae8:	dc000017 	ldw	r16,0(sp)
 8006aec:	dec00304 	addi	sp,sp,12
 8006af0:	800fd3c1 	jmpi	800fd3c <__malloc_unlock>
 8006af4:	41c00117 	ldw	r7,4(r8)
 8006af8:	39c0004c 	andi	r7,r7,1
 8006afc:	38000e1e 	bne	r7,zero,8006b38 <_free_r+0x144>
 8006b00:	01c20074 	movhi	r7,2049
 8006b04:	1145883a 	add	r2,r2,r5
 8006b08:	39cc1404 	addi	r7,r7,12368
 8006b0c:	31400217 	ldw	r5,8(r6)
 8006b10:	12400054 	ori	r9,r2,1
 8006b14:	1891883a 	add	r8,r3,r2
 8006b18:	29c05226 	beq	r5,r7,8006c64 <_free_r+0x270>
 8006b1c:	31800317 	ldw	r6,12(r6)
 8006b20:	29800315 	stw	r6,12(r5)
 8006b24:	31400215 	stw	r5,8(r6)
 8006b28:	1a400115 	stw	r9,4(r3)
 8006b2c:	40800015 	stw	r2,0(r8)
 8006b30:	003fd806 	br	8006a94 <_free_r+0xa0>
 8006b34:	f800283a 	ret
 8006b38:	11400054 	ori	r5,r2,1
 8006b3c:	817fff15 	stw	r5,-4(r16)
 8006b40:	30800015 	stw	r2,0(r6)
 8006b44:	11408028 	cmpgeui	r5,r2,512
 8006b48:	283fd426 	beq	r5,zero,8006a9c <_free_r+0xa8>
 8006b4c:	100ad27a 	srli	r5,r2,9
 8006b50:	29800168 	cmpgeui	r6,r5,5
 8006b54:	3000341e 	bne	r6,zero,8006c28 <_free_r+0x234>
 8006b58:	100ad1ba 	srli	r5,r2,6
 8006b5c:	29800e44 	addi	r6,r5,57
 8006b60:	300c90fa 	slli	r6,r6,3
 8006b64:	29c00e04 	addi	r7,r5,56
 8006b68:	218d883a 	add	r6,r4,r6
 8006b6c:	31400017 	ldw	r5,0(r6)
 8006b70:	31bffe04 	addi	r6,r6,-8
 8006b74:	31404226 	beq	r6,r5,8006c80 <_free_r+0x28c>
 8006b78:	01ffff04 	movi	r7,-4
 8006b7c:	29000117 	ldw	r4,4(r5)
 8006b80:	21c8703a 	and	r4,r4,r7
 8006b84:	1100022e 	bgeu	r2,r4,8006b90 <_free_r+0x19c>
 8006b88:	29400217 	ldw	r5,8(r5)
 8006b8c:	317ffb1e 	bne	r6,r5,8006b7c <_free_r+0x188>
 8006b90:	29800317 	ldw	r6,12(r5)
 8006b94:	19800315 	stw	r6,12(r3)
 8006b98:	19400215 	stw	r5,8(r3)
 8006b9c:	30c00215 	stw	r3,8(r6)
 8006ba0:	28c00315 	stw	r3,12(r5)
 8006ba4:	003fcd06 	br	8006adc <_free_r+0xe8>
 8006ba8:	40004d1e 	bne	r8,zero,8006ce0 <_free_r+0x2ec>
 8006bac:	31000317 	ldw	r4,12(r6)
 8006bb0:	31800217 	ldw	r6,8(r6)
 8006bb4:	2885883a 	add	r2,r5,r2
 8006bb8:	11400054 	ori	r5,r2,1
 8006bbc:	31000315 	stw	r4,12(r6)
 8006bc0:	21800215 	stw	r6,8(r4)
 8006bc4:	19400115 	stw	r5,4(r3)
 8006bc8:	1887883a 	add	r3,r3,r2
 8006bcc:	18800015 	stw	r2,0(r3)
 8006bd0:	003fc206 	br	8006adc <_free_r+0xe8>
 8006bd4:	39c0004c 	andi	r7,r7,1
 8006bd8:	1145883a 	add	r2,r2,r5
 8006bdc:	3800071e 	bne	r7,zero,8006bfc <_free_r+0x208>
 8006be0:	81fffe17 	ldw	r7,-8(r16)
 8006be4:	19c7c83a 	sub	r3,r3,r7
 8006be8:	19400317 	ldw	r5,12(r3)
 8006bec:	19800217 	ldw	r6,8(r3)
 8006bf0:	11c5883a 	add	r2,r2,r7
 8006bf4:	31400315 	stw	r5,12(r6)
 8006bf8:	29800215 	stw	r6,8(r5)
 8006bfc:	01420074 	movhi	r5,2049
 8006c00:	11800054 	ori	r6,r2,1
 8006c04:	2951f417 	ldw	r5,18384(r5)
 8006c08:	19800115 	stw	r6,4(r3)
 8006c0c:	20c00215 	stw	r3,8(r4)
 8006c10:	117fb236 	bltu	r2,r5,8006adc <_free_r+0xe8>
 8006c14:	00820074 	movhi	r2,2049
 8006c18:	1158f817 	ldw	r5,25568(r2)
 8006c1c:	8809883a 	mov	r4,r17
 8006c20:	80068d80 	call	80068d8 <_malloc_trim_r>
 8006c24:	003fad06 	br	8006adc <_free_r+0xe8>
 8006c28:	29800568 	cmpgeui	r6,r5,21
 8006c2c:	30000926 	beq	r6,zero,8006c54 <_free_r+0x260>
 8006c30:	29801568 	cmpgeui	r6,r5,85
 8006c34:	3000191e 	bne	r6,zero,8006c9c <_free_r+0x2a8>
 8006c38:	100ad33a 	srli	r5,r2,12
 8006c3c:	29801bc4 	addi	r6,r5,111
 8006c40:	300c90fa 	slli	r6,r6,3
 8006c44:	29c01b84 	addi	r7,r5,110
 8006c48:	003fc706 	br	8006b68 <_free_r+0x174>
 8006c4c:	1145883a 	add	r2,r2,r5
 8006c50:	003fae06 	br	8006b0c <_free_r+0x118>
 8006c54:	29801704 	addi	r6,r5,92
 8006c58:	300c90fa 	slli	r6,r6,3
 8006c5c:	29c016c4 	addi	r7,r5,91
 8006c60:	003fc106 	br	8006b68 <_free_r+0x174>
 8006c64:	20c00515 	stw	r3,20(r4)
 8006c68:	20c00415 	stw	r3,16(r4)
 8006c6c:	19c00315 	stw	r7,12(r3)
 8006c70:	19c00215 	stw	r7,8(r3)
 8006c74:	1a400115 	stw	r9,4(r3)
 8006c78:	40800015 	stw	r2,0(r8)
 8006c7c:	003f9706 	br	8006adc <_free_r+0xe8>
 8006c80:	380fd0ba 	srai	r7,r7,2
 8006c84:	00800044 	movi	r2,1
 8006c88:	22000117 	ldw	r8,4(r4)
 8006c8c:	11ce983a 	sll	r7,r2,r7
 8006c90:	3a0eb03a 	or	r7,r7,r8
 8006c94:	21c00115 	stw	r7,4(r4)
 8006c98:	003fbe06 	br	8006b94 <_free_r+0x1a0>
 8006c9c:	29805568 	cmpgeui	r6,r5,341
 8006ca0:	3000051e 	bne	r6,zero,8006cb8 <_free_r+0x2c4>
 8006ca4:	100ad3fa 	srli	r5,r2,15
 8006ca8:	29801e04 	addi	r6,r5,120
 8006cac:	300c90fa 	slli	r6,r6,3
 8006cb0:	29c01dc4 	addi	r7,r5,119
 8006cb4:	003fac06 	br	8006b68 <_free_r+0x174>
 8006cb8:	29415568 	cmpgeui	r5,r5,1365
 8006cbc:	2800051e 	bne	r5,zero,8006cd4 <_free_r+0x2e0>
 8006cc0:	100ad4ba 	srli	r5,r2,18
 8006cc4:	29801f44 	addi	r6,r5,125
 8006cc8:	300c90fa 	slli	r6,r6,3
 8006ccc:	29c01f04 	addi	r7,r5,124
 8006cd0:	003fa506 	br	8006b68 <_free_r+0x174>
 8006cd4:	0180fe04 	movi	r6,1016
 8006cd8:	01c01f84 	movi	r7,126
 8006cdc:	003fa206 	br	8006b68 <_free_r+0x174>
 8006ce0:	11000054 	ori	r4,r2,1
 8006ce4:	19000115 	stw	r4,4(r3)
 8006ce8:	30800015 	stw	r2,0(r6)
 8006cec:	003f7b06 	br	8006adc <_free_r+0xe8>

08006cf0 <__sfvwrite_r>:
 8006cf0:	30800217 	ldw	r2,8(r6)
 8006cf4:	1000a326 	beq	r2,zero,8006f84 <__sfvwrite_r+0x294>
 8006cf8:	29c0030b 	ldhu	r7,12(r5)
 8006cfc:	defff404 	addi	sp,sp,-48
 8006d00:	ddc00915 	stw	r23,36(sp)
 8006d04:	dd400715 	stw	r21,28(sp)
 8006d08:	dc000215 	stw	r16,8(sp)
 8006d0c:	dfc00b15 	stw	ra,44(sp)
 8006d10:	df000a15 	stw	fp,40(sp)
 8006d14:	dd800815 	stw	r22,32(sp)
 8006d18:	dd000615 	stw	r20,24(sp)
 8006d1c:	dcc00515 	stw	r19,20(sp)
 8006d20:	dc800415 	stw	r18,16(sp)
 8006d24:	dc400315 	stw	r17,12(sp)
 8006d28:	3880020c 	andi	r2,r7,8
 8006d2c:	302f883a 	mov	r23,r6
 8006d30:	202b883a 	mov	r21,r4
 8006d34:	2821883a 	mov	r16,r5
 8006d38:	10002226 	beq	r2,zero,8006dc4 <__sfvwrite_r+0xd4>
 8006d3c:	28800417 	ldw	r2,16(r5)
 8006d40:	10002026 	beq	r2,zero,8006dc4 <__sfvwrite_r+0xd4>
 8006d44:	3880008c 	andi	r2,r7,2
 8006d48:	bc400017 	ldw	r17,0(r23)
 8006d4c:	10002526 	beq	r2,zero,8006de4 <__sfvwrite_r+0xf4>
 8006d50:	80800917 	ldw	r2,36(r16)
 8006d54:	81400717 	ldw	r5,28(r16)
 8006d58:	05200034 	movhi	r20,32768
 8006d5c:	0027883a 	mov	r19,zero
 8006d60:	0025883a 	mov	r18,zero
 8006d64:	a53f0004 	addi	r20,r20,-1024
 8006d68:	980d883a 	mov	r6,r19
 8006d6c:	a809883a 	mov	r4,r21
 8006d70:	90001026 	beq	r18,zero,8006db4 <__sfvwrite_r+0xc4>
 8006d74:	900f883a 	mov	r7,r18
 8006d78:	a480012e 	bgeu	r20,r18,8006d80 <__sfvwrite_r+0x90>
 8006d7c:	a00f883a 	mov	r7,r20
 8006d80:	103ee83a 	callr	r2
 8006d84:	00807a0e 	bge	zero,r2,8006f70 <__sfvwrite_r+0x280>
 8006d88:	b9000217 	ldw	r4,8(r23)
 8006d8c:	98a7883a 	add	r19,r19,r2
 8006d90:	90a5c83a 	sub	r18,r18,r2
 8006d94:	2085c83a 	sub	r2,r4,r2
 8006d98:	b8800215 	stw	r2,8(r23)
 8006d9c:	10006326 	beq	r2,zero,8006f2c <__sfvwrite_r+0x23c>
 8006da0:	80800917 	ldw	r2,36(r16)
 8006da4:	81400717 	ldw	r5,28(r16)
 8006da8:	980d883a 	mov	r6,r19
 8006dac:	a809883a 	mov	r4,r21
 8006db0:	903ff01e 	bne	r18,zero,8006d74 <__sfvwrite_r+0x84>
 8006db4:	8cc00017 	ldw	r19,0(r17)
 8006db8:	8c800117 	ldw	r18,4(r17)
 8006dbc:	8c400204 	addi	r17,r17,8
 8006dc0:	003fe906 	br	8006d68 <__sfvwrite_r+0x78>
 8006dc4:	800b883a 	mov	r5,r16
 8006dc8:	a809883a 	mov	r4,r21
 8006dcc:	80047540 	call	8004754 <__swsetup_r>
 8006dd0:	1000f71e 	bne	r2,zero,80071b0 <__sfvwrite_r+0x4c0>
 8006dd4:	81c0030b 	ldhu	r7,12(r16)
 8006dd8:	bc400017 	ldw	r17,0(r23)
 8006ddc:	3880008c 	andi	r2,r7,2
 8006de0:	103fdb1e 	bne	r2,zero,8006d50 <__sfvwrite_r+0x60>
 8006de4:	3880004c 	andi	r2,r7,1
 8006de8:	84800217 	ldw	r18,8(r16)
 8006dec:	82000017 	ldw	r8,0(r16)
 8006df0:	1000661e 	bne	r2,zero,8006f8c <__sfvwrite_r+0x29c>
 8006df4:	00a00034 	movhi	r2,32768
 8006df8:	10bfff84 	addi	r2,r2,-2
 8006dfc:	00e00034 	movhi	r3,32768
 8006e00:	d8800015 	stw	r2,0(sp)
 8006e04:	18bfffc4 	addi	r2,r3,-1
 8006e08:	0039883a 	mov	fp,zero
 8006e0c:	0027883a 	mov	r19,zero
 8006e10:	d8800115 	stw	r2,4(sp)
 8006e14:	98004126 	beq	r19,zero,8006f1c <__sfvwrite_r+0x22c>
 8006e18:	3880800c 	andi	r2,r7,512
 8006e1c:	10009726 	beq	r2,zero,800707c <__sfvwrite_r+0x38c>
 8006e20:	902d883a 	mov	r22,r18
 8006e24:	9c80be36 	bltu	r19,r18,8007120 <__sfvwrite_r+0x430>
 8006e28:	3881200c 	andi	r2,r7,1152
 8006e2c:	10002626 	beq	r2,zero,8006ec8 <__sfvwrite_r+0x1d8>
 8006e30:	81800517 	ldw	r6,20(r16)
 8006e34:	81400417 	ldw	r5,16(r16)
 8006e38:	98800044 	addi	r2,r19,1
 8006e3c:	3189883a 	add	r4,r6,r6
 8006e40:	2189883a 	add	r4,r4,r6
 8006e44:	2028d7fa 	srli	r20,r4,31
 8006e48:	4165c83a 	sub	r18,r8,r5
 8006e4c:	1485883a 	add	r2,r2,r18
 8006e50:	a109883a 	add	r4,r20,r4
 8006e54:	2029d07a 	srai	r20,r4,1
 8006e58:	a00d883a 	mov	r6,r20
 8006e5c:	a080022e 	bgeu	r20,r2,8006e68 <__sfvwrite_r+0x178>
 8006e60:	1029883a 	mov	r20,r2
 8006e64:	100d883a 	mov	r6,r2
 8006e68:	39c1000c 	andi	r7,r7,1024
 8006e6c:	3800c026 	beq	r7,zero,8007170 <__sfvwrite_r+0x480>
 8006e70:	a809883a 	mov	r4,r21
 8006e74:	300b883a 	mov	r5,r6
 8006e78:	80075600 	call	8007560 <_malloc_r>
 8006e7c:	1009883a 	mov	r4,r2
 8006e80:	1000c726 	beq	r2,zero,80071a0 <__sfvwrite_r+0x4b0>
 8006e84:	81400417 	ldw	r5,16(r16)
 8006e88:	900d883a 	mov	r6,r18
 8006e8c:	8007e100 	call	8007e10 <memcpy>
 8006e90:	1009883a 	mov	r4,r2
 8006e94:	8080030b 	ldhu	r2,12(r16)
 8006e98:	00fedfc4 	movi	r3,-1153
 8006e9c:	10c4703a 	and	r2,r2,r3
 8006ea0:	10802014 	ori	r2,r2,128
 8006ea4:	8080030d 	sth	r2,12(r16)
 8006ea8:	2491883a 	add	r8,r4,r18
 8006eac:	a485c83a 	sub	r2,r20,r18
 8006eb0:	81000415 	stw	r4,16(r16)
 8006eb4:	82000015 	stw	r8,0(r16)
 8006eb8:	85000515 	stw	r20,20(r16)
 8006ebc:	9825883a 	mov	r18,r19
 8006ec0:	80800215 	stw	r2,8(r16)
 8006ec4:	982d883a 	mov	r22,r19
 8006ec8:	4009883a 	mov	r4,r8
 8006ecc:	b00d883a 	mov	r6,r22
 8006ed0:	e00b883a 	mov	r5,fp
 8006ed4:	8007f100 	call	8007f10 <memmove>
 8006ed8:	81000217 	ldw	r4,8(r16)
 8006edc:	80800017 	ldw	r2,0(r16)
 8006ee0:	9829883a 	mov	r20,r19
 8006ee4:	24a5c83a 	sub	r18,r4,r18
 8006ee8:	1585883a 	add	r2,r2,r22
 8006eec:	84800215 	stw	r18,8(r16)
 8006ef0:	80800015 	stw	r2,0(r16)
 8006ef4:	0027883a 	mov	r19,zero
 8006ef8:	b8800217 	ldw	r2,8(r23)
 8006efc:	e539883a 	add	fp,fp,r20
 8006f00:	1529c83a 	sub	r20,r2,r20
 8006f04:	bd000215 	stw	r20,8(r23)
 8006f08:	a0000826 	beq	r20,zero,8006f2c <__sfvwrite_r+0x23c>
 8006f0c:	81c0030b 	ldhu	r7,12(r16)
 8006f10:	84800217 	ldw	r18,8(r16)
 8006f14:	82000017 	ldw	r8,0(r16)
 8006f18:	983fbf1e 	bne	r19,zero,8006e18 <__sfvwrite_r+0x128>
 8006f1c:	8f000017 	ldw	fp,0(r17)
 8006f20:	8cc00117 	ldw	r19,4(r17)
 8006f24:	8c400204 	addi	r17,r17,8
 8006f28:	003fba06 	br	8006e14 <__sfvwrite_r+0x124>
 8006f2c:	0005883a 	mov	r2,zero
 8006f30:	dfc00b17 	ldw	ra,44(sp)
 8006f34:	df000a17 	ldw	fp,40(sp)
 8006f38:	ddc00917 	ldw	r23,36(sp)
 8006f3c:	dd800817 	ldw	r22,32(sp)
 8006f40:	dd400717 	ldw	r21,28(sp)
 8006f44:	dd000617 	ldw	r20,24(sp)
 8006f48:	dcc00517 	ldw	r19,20(sp)
 8006f4c:	dc800417 	ldw	r18,16(sp)
 8006f50:	dc400317 	ldw	r17,12(sp)
 8006f54:	dc000217 	ldw	r16,8(sp)
 8006f58:	dec00c04 	addi	sp,sp,48
 8006f5c:	f800283a 	ret
 8006f60:	800b883a 	mov	r5,r16
 8006f64:	a809883a 	mov	r4,r21
 8006f68:	80064480 	call	8006448 <_fflush_r>
 8006f6c:	10002026 	beq	r2,zero,8006ff0 <__sfvwrite_r+0x300>
 8006f70:	8080030b 	ldhu	r2,12(r16)
 8006f74:	10801014 	ori	r2,r2,64
 8006f78:	8080030d 	sth	r2,12(r16)
 8006f7c:	00bfffc4 	movi	r2,-1
 8006f80:	003feb06 	br	8006f30 <__sfvwrite_r+0x240>
 8006f84:	0005883a 	mov	r2,zero
 8006f88:	f800283a 	ret
 8006f8c:	002d883a 	mov	r22,zero
 8006f90:	0027883a 	mov	r19,zero
 8006f94:	0005883a 	mov	r2,zero
 8006f98:	0039883a 	mov	fp,zero
 8006f9c:	b0001d26 	beq	r22,zero,8007014 <__sfvwrite_r+0x324>
 8006fa0:	10002026 	beq	r2,zero,8007024 <__sfvwrite_r+0x334>
 8006fa4:	9829883a 	mov	r20,r19
 8006fa8:	b500012e 	bgeu	r22,r20,8006fb0 <__sfvwrite_r+0x2c0>
 8006fac:	b029883a 	mov	r20,r22
 8006fb0:	80800417 	ldw	r2,16(r16)
 8006fb4:	81c00517 	ldw	r7,20(r16)
 8006fb8:	1200022e 	bgeu	r2,r8,8006fc4 <__sfvwrite_r+0x2d4>
 8006fbc:	3ca5883a 	add	r18,r7,r18
 8006fc0:	95002216 	blt	r18,r20,800704c <__sfvwrite_r+0x35c>
 8006fc4:	a1c05916 	blt	r20,r7,800712c <__sfvwrite_r+0x43c>
 8006fc8:	80800917 	ldw	r2,36(r16)
 8006fcc:	81400717 	ldw	r5,28(r16)
 8006fd0:	e00d883a 	mov	r6,fp
 8006fd4:	a809883a 	mov	r4,r21
 8006fd8:	103ee83a 	callr	r2
 8006fdc:	1025883a 	mov	r18,r2
 8006fe0:	00bfe30e 	bge	zero,r2,8006f70 <__sfvwrite_r+0x280>
 8006fe4:	9ca7c83a 	sub	r19,r19,r18
 8006fe8:	983fdd26 	beq	r19,zero,8006f60 <__sfvwrite_r+0x270>
 8006fec:	00800044 	movi	r2,1
 8006ff0:	b9800217 	ldw	r6,8(r23)
 8006ff4:	e4b9883a 	add	fp,fp,r18
 8006ff8:	b4adc83a 	sub	r22,r22,r18
 8006ffc:	34a5c83a 	sub	r18,r6,r18
 8007000:	bc800215 	stw	r18,8(r23)
 8007004:	903fc926 	beq	r18,zero,8006f2c <__sfvwrite_r+0x23c>
 8007008:	84800217 	ldw	r18,8(r16)
 800700c:	82000017 	ldw	r8,0(r16)
 8007010:	b03fe31e 	bne	r22,zero,8006fa0 <__sfvwrite_r+0x2b0>
 8007014:	8d800117 	ldw	r22,4(r17)
 8007018:	8f000017 	ldw	fp,0(r17)
 800701c:	8c400204 	addi	r17,r17,8
 8007020:	b03ffc26 	beq	r22,zero,8007014 <__sfvwrite_r+0x324>
 8007024:	b00d883a 	mov	r6,r22
 8007028:	01400284 	movi	r5,10
 800702c:	e009883a 	mov	r4,fp
 8007030:	da000015 	stw	r8,0(sp)
 8007034:	8007d400 	call	8007d40 <memchr>
 8007038:	da000017 	ldw	r8,0(sp)
 800703c:	10004926 	beq	r2,zero,8007164 <__sfvwrite_r+0x474>
 8007040:	10800044 	addi	r2,r2,1
 8007044:	1727c83a 	sub	r19,r2,fp
 8007048:	003fd606 	br	8006fa4 <__sfvwrite_r+0x2b4>
 800704c:	e00b883a 	mov	r5,fp
 8007050:	4009883a 	mov	r4,r8
 8007054:	900d883a 	mov	r6,r18
 8007058:	8007f100 	call	8007f10 <memmove>
 800705c:	80800017 	ldw	r2,0(r16)
 8007060:	800b883a 	mov	r5,r16
 8007064:	a809883a 	mov	r4,r21
 8007068:	1485883a 	add	r2,r2,r18
 800706c:	80800015 	stw	r2,0(r16)
 8007070:	80064480 	call	8006448 <_fflush_r>
 8007074:	103fdb26 	beq	r2,zero,8006fe4 <__sfvwrite_r+0x2f4>
 8007078:	003fbd06 	br	8006f70 <__sfvwrite_r+0x280>
 800707c:	80800417 	ldw	r2,16(r16)
 8007080:	12001436 	bltu	r2,r8,80070d4 <__sfvwrite_r+0x3e4>
 8007084:	85000517 	ldw	r20,20(r16)
 8007088:	9d001236 	bltu	r19,r20,80070d4 <__sfvwrite_r+0x3e4>
 800708c:	d8800017 	ldw	r2,0(sp)
 8007090:	14c0322e 	bgeu	r2,r19,800715c <__sfvwrite_r+0x46c>
 8007094:	d9000117 	ldw	r4,4(sp)
 8007098:	a00b883a 	mov	r5,r20
 800709c:	800cc900 	call	800cc90 <__divsi3>
 80070a0:	a00b883a 	mov	r5,r20
 80070a4:	1009883a 	mov	r4,r2
 80070a8:	800ce440 	call	800ce44 <__mulsi3>
 80070ac:	82000917 	ldw	r8,36(r16)
 80070b0:	81400717 	ldw	r5,28(r16)
 80070b4:	100f883a 	mov	r7,r2
 80070b8:	e00d883a 	mov	r6,fp
 80070bc:	a809883a 	mov	r4,r21
 80070c0:	403ee83a 	callr	r8
 80070c4:	1029883a 	mov	r20,r2
 80070c8:	00bfa90e 	bge	zero,r2,8006f70 <__sfvwrite_r+0x280>
 80070cc:	9d27c83a 	sub	r19,r19,r20
 80070d0:	003f8906 	br	8006ef8 <__sfvwrite_r+0x208>
 80070d4:	9029883a 	mov	r20,r18
 80070d8:	9c80012e 	bgeu	r19,r18,80070e0 <__sfvwrite_r+0x3f0>
 80070dc:	9829883a 	mov	r20,r19
 80070e0:	4009883a 	mov	r4,r8
 80070e4:	a00d883a 	mov	r6,r20
 80070e8:	e00b883a 	mov	r5,fp
 80070ec:	8007f100 	call	8007f10 <memmove>
 80070f0:	80800217 	ldw	r2,8(r16)
 80070f4:	81000017 	ldw	r4,0(r16)
 80070f8:	1505c83a 	sub	r2,r2,r20
 80070fc:	2509883a 	add	r4,r4,r20
 8007100:	80800215 	stw	r2,8(r16)
 8007104:	81000015 	stw	r4,0(r16)
 8007108:	103ff01e 	bne	r2,zero,80070cc <__sfvwrite_r+0x3dc>
 800710c:	800b883a 	mov	r5,r16
 8007110:	a809883a 	mov	r4,r21
 8007114:	80064480 	call	8006448 <_fflush_r>
 8007118:	103fec26 	beq	r2,zero,80070cc <__sfvwrite_r+0x3dc>
 800711c:	003f9406 	br	8006f70 <__sfvwrite_r+0x280>
 8007120:	9825883a 	mov	r18,r19
 8007124:	982d883a 	mov	r22,r19
 8007128:	003f6706 	br	8006ec8 <__sfvwrite_r+0x1d8>
 800712c:	4009883a 	mov	r4,r8
 8007130:	a00d883a 	mov	r6,r20
 8007134:	e00b883a 	mov	r5,fp
 8007138:	8007f100 	call	8007f10 <memmove>
 800713c:	81000217 	ldw	r4,8(r16)
 8007140:	80800017 	ldw	r2,0(r16)
 8007144:	a025883a 	mov	r18,r20
 8007148:	2509c83a 	sub	r4,r4,r20
 800714c:	1505883a 	add	r2,r2,r20
 8007150:	81000215 	stw	r4,8(r16)
 8007154:	80800015 	stw	r2,0(r16)
 8007158:	003fa206 	br	8006fe4 <__sfvwrite_r+0x2f4>
 800715c:	9809883a 	mov	r4,r19
 8007160:	003fcd06 	br	8007098 <__sfvwrite_r+0x3a8>
 8007164:	b5000044 	addi	r20,r22,1
 8007168:	a027883a 	mov	r19,r20
 800716c:	003f8e06 	br	8006fa8 <__sfvwrite_r+0x2b8>
 8007170:	a809883a 	mov	r4,r21
 8007174:	800931c0 	call	800931c <_realloc_r>
 8007178:	1009883a 	mov	r4,r2
 800717c:	103f4a1e 	bne	r2,zero,8006ea8 <__sfvwrite_r+0x1b8>
 8007180:	81400417 	ldw	r5,16(r16)
 8007184:	a809883a 	mov	r4,r21
 8007188:	80069f40 	call	80069f4 <_free_r>
 800718c:	8080030b 	ldhu	r2,12(r16)
 8007190:	00c00304 	movi	r3,12
 8007194:	a8c00015 	stw	r3,0(r21)
 8007198:	10bfdfcc 	andi	r2,r2,65407
 800719c:	003f7506 	br	8006f74 <__sfvwrite_r+0x284>
 80071a0:	00c00304 	movi	r3,12
 80071a4:	8080030b 	ldhu	r2,12(r16)
 80071a8:	a8c00015 	stw	r3,0(r21)
 80071ac:	003f7106 	br	8006f74 <__sfvwrite_r+0x284>
 80071b0:	00bfffc4 	movi	r2,-1
 80071b4:	003f5e06 	br	8006f30 <__sfvwrite_r+0x240>

080071b8 <_fwalk>:
 80071b8:	defffa04 	addi	sp,sp,-24
 80071bc:	dd000415 	stw	r20,16(sp)
 80071c0:	dcc00315 	stw	r19,12(sp)
 80071c4:	dc800215 	stw	r18,8(sp)
 80071c8:	dfc00515 	stw	ra,20(sp)
 80071cc:	dc400115 	stw	r17,4(sp)
 80071d0:	dc000015 	stw	r16,0(sp)
 80071d4:	2827883a 	mov	r19,r5
 80071d8:	2480b804 	addi	r18,r4,736
 80071dc:	0029883a 	mov	r20,zero
 80071e0:	94400117 	ldw	r17,4(r18)
 80071e4:	94000217 	ldw	r16,8(r18)
 80071e8:	8c7fffc4 	addi	r17,r17,-1
 80071ec:	88000d16 	blt	r17,zero,8007224 <_fwalk+0x6c>
 80071f0:	8080030b 	ldhu	r2,12(r16)
 80071f4:	8c7fffc4 	addi	r17,r17,-1
 80071f8:	108000b0 	cmpltui	r2,r2,2
 80071fc:	1000061e 	bne	r2,zero,8007218 <_fwalk+0x60>
 8007200:	8080038f 	ldh	r2,14(r16)
 8007204:	8009883a 	mov	r4,r16
 8007208:	10bfffe0 	cmpeqi	r2,r2,-1
 800720c:	1000021e 	bne	r2,zero,8007218 <_fwalk+0x60>
 8007210:	983ee83a 	callr	r19
 8007214:	a0a8b03a 	or	r20,r20,r2
 8007218:	88bfffd8 	cmpnei	r2,r17,-1
 800721c:	84001a04 	addi	r16,r16,104
 8007220:	103ff31e 	bne	r2,zero,80071f0 <_fwalk+0x38>
 8007224:	94800017 	ldw	r18,0(r18)
 8007228:	903fed1e 	bne	r18,zero,80071e0 <_fwalk+0x28>
 800722c:	a005883a 	mov	r2,r20
 8007230:	dfc00517 	ldw	ra,20(sp)
 8007234:	dd000417 	ldw	r20,16(sp)
 8007238:	dcc00317 	ldw	r19,12(sp)
 800723c:	dc800217 	ldw	r18,8(sp)
 8007240:	dc400117 	ldw	r17,4(sp)
 8007244:	dc000017 	ldw	r16,0(sp)
 8007248:	dec00604 	addi	sp,sp,24
 800724c:	f800283a 	ret

08007250 <_fwalk_reent>:
 8007250:	defff904 	addi	sp,sp,-28
 8007254:	dd400515 	stw	r21,20(sp)
 8007258:	dd000415 	stw	r20,16(sp)
 800725c:	dcc00315 	stw	r19,12(sp)
 8007260:	dc800215 	stw	r18,8(sp)
 8007264:	dfc00615 	stw	ra,24(sp)
 8007268:	dc400115 	stw	r17,4(sp)
 800726c:	dc000015 	stw	r16,0(sp)
 8007270:	202b883a 	mov	r21,r4
 8007274:	2827883a 	mov	r19,r5
 8007278:	2480b804 	addi	r18,r4,736
 800727c:	0029883a 	mov	r20,zero
 8007280:	94400117 	ldw	r17,4(r18)
 8007284:	94000217 	ldw	r16,8(r18)
 8007288:	8c7fffc4 	addi	r17,r17,-1
 800728c:	88000e16 	blt	r17,zero,80072c8 <_fwalk_reent+0x78>
 8007290:	8080030b 	ldhu	r2,12(r16)
 8007294:	8c7fffc4 	addi	r17,r17,-1
 8007298:	108000b0 	cmpltui	r2,r2,2
 800729c:	1000071e 	bne	r2,zero,80072bc <_fwalk_reent+0x6c>
 80072a0:	8080038f 	ldh	r2,14(r16)
 80072a4:	800b883a 	mov	r5,r16
 80072a8:	a809883a 	mov	r4,r21
 80072ac:	10bfffe0 	cmpeqi	r2,r2,-1
 80072b0:	1000021e 	bne	r2,zero,80072bc <_fwalk_reent+0x6c>
 80072b4:	983ee83a 	callr	r19
 80072b8:	a0a8b03a 	or	r20,r20,r2
 80072bc:	88bfffd8 	cmpnei	r2,r17,-1
 80072c0:	84001a04 	addi	r16,r16,104
 80072c4:	103ff21e 	bne	r2,zero,8007290 <_fwalk_reent+0x40>
 80072c8:	94800017 	ldw	r18,0(r18)
 80072cc:	903fec1e 	bne	r18,zero,8007280 <_fwalk_reent+0x30>
 80072d0:	a005883a 	mov	r2,r20
 80072d4:	dfc00617 	ldw	ra,24(sp)
 80072d8:	dd400517 	ldw	r21,20(sp)
 80072dc:	dd000417 	ldw	r20,16(sp)
 80072e0:	dcc00317 	ldw	r19,12(sp)
 80072e4:	dc800217 	ldw	r18,8(sp)
 80072e8:	dc400117 	ldw	r17,4(sp)
 80072ec:	dc000017 	ldw	r16,0(sp)
 80072f0:	dec00704 	addi	sp,sp,28
 80072f4:	f800283a 	ret

080072f8 <__localeconv_l>:
 80072f8:	20803c04 	addi	r2,r4,240
 80072fc:	f800283a 	ret

08007300 <_localeconv_r>:
 8007300:	00820074 	movhi	r2,2049
 8007304:	108d5004 	addi	r2,r2,13632
 8007308:	f800283a 	ret

0800730c <localeconv>:
 800730c:	00820074 	movhi	r2,2049
 8007310:	108d5004 	addi	r2,r2,13632
 8007314:	f800283a 	ret

08007318 <__smakebuf_r>:
 8007318:	2880030b 	ldhu	r2,12(r5)
 800731c:	deffe804 	addi	sp,sp,-96
 8007320:	dc001215 	stw	r16,72(sp)
 8007324:	dfc01715 	stw	ra,92(sp)
 8007328:	dd001615 	stw	r20,88(sp)
 800732c:	dcc01515 	stw	r19,84(sp)
 8007330:	dc801415 	stw	r18,80(sp)
 8007334:	dc401315 	stw	r17,76(sp)
 8007338:	10c0008c 	andi	r3,r2,2
 800733c:	2821883a 	mov	r16,r5
 8007340:	18000d26 	beq	r3,zero,8007378 <__smakebuf_r+0x60>
 8007344:	288010c4 	addi	r2,r5,67
 8007348:	28800015 	stw	r2,0(r5)
 800734c:	28800415 	stw	r2,16(r5)
 8007350:	00800044 	movi	r2,1
 8007354:	28800515 	stw	r2,20(r5)
 8007358:	dfc01717 	ldw	ra,92(sp)
 800735c:	dd001617 	ldw	r20,88(sp)
 8007360:	dcc01517 	ldw	r19,84(sp)
 8007364:	dc801417 	ldw	r18,80(sp)
 8007368:	dc401317 	ldw	r17,76(sp)
 800736c:	dc001217 	ldw	r16,72(sp)
 8007370:	dec01804 	addi	sp,sp,96
 8007374:	f800283a 	ret
 8007378:	2940038f 	ldh	r5,14(r5)
 800737c:	2023883a 	mov	r17,r4
 8007380:	28002816 	blt	r5,zero,8007424 <__smakebuf_r+0x10c>
 8007384:	d80d883a 	mov	r6,sp
 8007388:	800b5340 	call	800b534 <_fstat_r>
 800738c:	10002416 	blt	r2,zero,8007420 <__smakebuf_r+0x108>
 8007390:	d8800117 	ldw	r2,4(sp)
 8007394:	10bc000c 	andi	r2,r2,61440
 8007398:	10880018 	cmpnei	r2,r2,8192
 800739c:	1000461e 	bne	r2,zero,80074b8 <__smakebuf_r+0x1a0>
 80073a0:	8140038f 	ldh	r5,14(r16)
 80073a4:	8809883a 	mov	r4,r17
 80073a8:	800b5940 	call	800b594 <_isatty_r>
 80073ac:	10003e26 	beq	r2,zero,80074a8 <__smakebuf_r+0x190>
 80073b0:	8080030b 	ldhu	r2,12(r16)
 80073b4:	80c010c4 	addi	r3,r16,67
 80073b8:	80c00015 	stw	r3,0(r16)
 80073bc:	10800054 	ori	r2,r2,1
 80073c0:	8080030d 	sth	r2,12(r16)
 80073c4:	00800044 	movi	r2,1
 80073c8:	80c00415 	stw	r3,16(r16)
 80073cc:	80800515 	stw	r2,20(r16)
 80073d0:	04c00044 	movi	r19,1
 80073d4:	05010004 	movi	r20,1024
 80073d8:	04820004 	movi	r18,2048
 80073dc:	a00b883a 	mov	r5,r20
 80073e0:	8809883a 	mov	r4,r17
 80073e4:	80075600 	call	8007560 <_malloc_r>
 80073e8:	10001726 	beq	r2,zero,8007448 <__smakebuf_r+0x130>
 80073ec:	80c0030b 	ldhu	r3,12(r16)
 80073f0:	01020034 	movhi	r4,2048
 80073f4:	21194d04 	addi	r4,r4,25908
 80073f8:	89000f15 	stw	r4,60(r17)
 80073fc:	18c02014 	ori	r3,r3,128
 8007400:	80c0030d 	sth	r3,12(r16)
 8007404:	80800015 	stw	r2,0(r16)
 8007408:	80800415 	stw	r2,16(r16)
 800740c:	85000515 	stw	r20,20(r16)
 8007410:	98001d1e 	bne	r19,zero,8007488 <__smakebuf_r+0x170>
 8007414:	90c6b03a 	or	r3,r18,r3
 8007418:	80c0030d 	sth	r3,12(r16)
 800741c:	003fce06 	br	8007358 <__smakebuf_r+0x40>
 8007420:	8080030b 	ldhu	r2,12(r16)
 8007424:	1080200c 	andi	r2,r2,128
 8007428:	0027883a 	mov	r19,zero
 800742c:	10001326 	beq	r2,zero,800747c <__smakebuf_r+0x164>
 8007430:	05001004 	movi	r20,64
 8007434:	a00b883a 	mov	r5,r20
 8007438:	8809883a 	mov	r4,r17
 800743c:	0025883a 	mov	r18,zero
 8007440:	80075600 	call	8007560 <_malloc_r>
 8007444:	103fe91e 	bne	r2,zero,80073ec <__smakebuf_r+0xd4>
 8007448:	8080030b 	ldhu	r2,12(r16)
 800744c:	10c0800c 	andi	r3,r2,512
 8007450:	183fc11e 	bne	r3,zero,8007358 <__smakebuf_r+0x40>
 8007454:	00ffff04 	movi	r3,-4
 8007458:	10c4703a 	and	r2,r2,r3
 800745c:	10800094 	ori	r2,r2,2
 8007460:	80c010c4 	addi	r3,r16,67
 8007464:	8080030d 	sth	r2,12(r16)
 8007468:	00800044 	movi	r2,1
 800746c:	80c00015 	stw	r3,0(r16)
 8007470:	80c00415 	stw	r3,16(r16)
 8007474:	80800515 	stw	r2,20(r16)
 8007478:	003fb706 	br	8007358 <__smakebuf_r+0x40>
 800747c:	05010004 	movi	r20,1024
 8007480:	0025883a 	mov	r18,zero
 8007484:	003fd506 	br	80073dc <__smakebuf_r+0xc4>
 8007488:	8140038f 	ldh	r5,14(r16)
 800748c:	8809883a 	mov	r4,r17
 8007490:	800b5940 	call	800b594 <_isatty_r>
 8007494:	80c0030b 	ldhu	r3,12(r16)
 8007498:	103fde26 	beq	r2,zero,8007414 <__smakebuf_r+0xfc>
 800749c:	18ffff0c 	andi	r3,r3,65532
 80074a0:	18c00054 	ori	r3,r3,1
 80074a4:	003fdb06 	br	8007414 <__smakebuf_r+0xfc>
 80074a8:	04c00044 	movi	r19,1
 80074ac:	05010004 	movi	r20,1024
 80074b0:	04820004 	movi	r18,2048
 80074b4:	003fc906 	br	80073dc <__smakebuf_r+0xc4>
 80074b8:	0027883a 	mov	r19,zero
 80074bc:	05010004 	movi	r20,1024
 80074c0:	04820004 	movi	r18,2048
 80074c4:	003fc506 	br	80073dc <__smakebuf_r+0xc4>

080074c8 <__swhatbuf_r>:
 80074c8:	deffea04 	addi	sp,sp,-88
 80074cc:	dc001215 	stw	r16,72(sp)
 80074d0:	2821883a 	mov	r16,r5
 80074d4:	2940038f 	ldh	r5,14(r5)
 80074d8:	dc801415 	stw	r18,80(sp)
 80074dc:	dc401315 	stw	r17,76(sp)
 80074e0:	dfc01515 	stw	ra,84(sp)
 80074e4:	3023883a 	mov	r17,r6
 80074e8:	3825883a 	mov	r18,r7
 80074ec:	28001016 	blt	r5,zero,8007530 <__swhatbuf_r+0x68>
 80074f0:	d80d883a 	mov	r6,sp
 80074f4:	800b5340 	call	800b534 <_fstat_r>
 80074f8:	10000d16 	blt	r2,zero,8007530 <__swhatbuf_r+0x68>
 80074fc:	d8c00117 	ldw	r3,4(sp)
 8007500:	00820004 	movi	r2,2048
 8007504:	18fc000c 	andi	r3,r3,61440
 8007508:	18c80020 	cmpeqi	r3,r3,8192
 800750c:	90c00015 	stw	r3,0(r18)
 8007510:	00c10004 	movi	r3,1024
 8007514:	88c00015 	stw	r3,0(r17)
 8007518:	dfc01517 	ldw	ra,84(sp)
 800751c:	dc801417 	ldw	r18,80(sp)
 8007520:	dc401317 	ldw	r17,76(sp)
 8007524:	dc001217 	ldw	r16,72(sp)
 8007528:	dec01604 	addi	sp,sp,88
 800752c:	f800283a 	ret
 8007530:	8080030b 	ldhu	r2,12(r16)
 8007534:	90000015 	stw	zero,0(r18)
 8007538:	1080200c 	andi	r2,r2,128
 800753c:	10000426 	beq	r2,zero,8007550 <__swhatbuf_r+0x88>
 8007540:	00801004 	movi	r2,64
 8007544:	88800015 	stw	r2,0(r17)
 8007548:	0005883a 	mov	r2,zero
 800754c:	003ff206 	br	8007518 <__swhatbuf_r+0x50>
 8007550:	00810004 	movi	r2,1024
 8007554:	88800015 	stw	r2,0(r17)
 8007558:	0005883a 	mov	r2,zero
 800755c:	003fee06 	br	8007518 <__swhatbuf_r+0x50>

08007560 <_malloc_r>:
 8007560:	defff604 	addi	sp,sp,-40
 8007564:	dc400115 	stw	r17,4(sp)
 8007568:	2c4002c4 	addi	r17,r5,11
 800756c:	dc800215 	stw	r18,8(sp)
 8007570:	dfc00915 	stw	ra,36(sp)
 8007574:	df000815 	stw	fp,32(sp)
 8007578:	ddc00715 	stw	r23,28(sp)
 800757c:	dd800615 	stw	r22,24(sp)
 8007580:	dd400515 	stw	r21,20(sp)
 8007584:	dd000415 	stw	r20,16(sp)
 8007588:	dcc00315 	stw	r19,12(sp)
 800758c:	dc000015 	stw	r16,0(sp)
 8007590:	888005e8 	cmpgeui	r2,r17,23
 8007594:	2025883a 	mov	r18,r4
 8007598:	10001b1e 	bne	r2,zero,8007608 <_malloc_r+0xa8>
 800759c:	29400468 	cmpgeui	r5,r5,17
 80075a0:	2800821e 	bne	r5,zero,80077ac <_malloc_r+0x24c>
 80075a4:	800fd180 	call	800fd18 <__malloc_lock>
 80075a8:	04400404 	movi	r17,16
 80075ac:	00800604 	movi	r2,24
 80075b0:	01c00084 	movi	r7,2
 80075b4:	04c20074 	movhi	r19,2049
 80075b8:	9ccc1204 	addi	r19,r19,12360
 80075bc:	9885883a 	add	r2,r19,r2
 80075c0:	14000117 	ldw	r16,4(r2)
 80075c4:	10fffe04 	addi	r3,r2,-8
 80075c8:	80c08b26 	beq	r16,r3,80077f8 <_malloc_r+0x298>
 80075cc:	80800117 	ldw	r2,4(r16)
 80075d0:	81000317 	ldw	r4,12(r16)
 80075d4:	00ffff04 	movi	r3,-4
 80075d8:	10c4703a 	and	r2,r2,r3
 80075dc:	81400217 	ldw	r5,8(r16)
 80075e0:	8085883a 	add	r2,r16,r2
 80075e4:	10c00117 	ldw	r3,4(r2)
 80075e8:	29000315 	stw	r4,12(r5)
 80075ec:	21400215 	stw	r5,8(r4)
 80075f0:	18c00054 	ori	r3,r3,1
 80075f4:	10c00115 	stw	r3,4(r2)
 80075f8:	9009883a 	mov	r4,r18
 80075fc:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8007600:	80800204 	addi	r2,r16,8
 8007604:	00006c06 	br	80077b8 <_malloc_r+0x258>
 8007608:	00bffe04 	movi	r2,-8
 800760c:	88a2703a 	and	r17,r17,r2
 8007610:	88006616 	blt	r17,zero,80077ac <_malloc_r+0x24c>
 8007614:	89406536 	bltu	r17,r5,80077ac <_malloc_r+0x24c>
 8007618:	800fd180 	call	800fd18 <__malloc_lock>
 800761c:	88807e28 	cmpgeui	r2,r17,504
 8007620:	10012226 	beq	r2,zero,8007aac <_malloc_r+0x54c>
 8007624:	8804d27a 	srli	r2,r17,9
 8007628:	10006f26 	beq	r2,zero,80077e8 <_malloc_r+0x288>
 800762c:	10c00168 	cmpgeui	r3,r2,5
 8007630:	1800fe1e 	bne	r3,zero,8007a2c <_malloc_r+0x4cc>
 8007634:	8804d1ba 	srli	r2,r17,6
 8007638:	11c00e44 	addi	r7,r2,57
 800763c:	380890fa 	slli	r4,r7,3
 8007640:	12000e04 	addi	r8,r2,56
 8007644:	04c20074 	movhi	r19,2049
 8007648:	9ccc1204 	addi	r19,r19,12360
 800764c:	9909883a 	add	r4,r19,r4
 8007650:	24000117 	ldw	r16,4(r4)
 8007654:	213ffe04 	addi	r4,r4,-8
 8007658:	24000b26 	beq	r4,r16,8007688 <_malloc_r+0x128>
 800765c:	01bfff04 	movi	r6,-4
 8007660:	00000306 	br	8007670 <_malloc_r+0x110>
 8007664:	1800d60e 	bge	r3,zero,80079c0 <_malloc_r+0x460>
 8007668:	84000317 	ldw	r16,12(r16)
 800766c:	24000626 	beq	r4,r16,8007688 <_malloc_r+0x128>
 8007670:	80800117 	ldw	r2,4(r16)
 8007674:	1184703a 	and	r2,r2,r6
 8007678:	1447c83a 	sub	r3,r2,r17
 800767c:	19400408 	cmpgei	r5,r3,16
 8007680:	283ff826 	beq	r5,zero,8007664 <_malloc_r+0x104>
 8007684:	400f883a 	mov	r7,r8
 8007688:	9c000417 	ldw	r16,16(r19)
 800768c:	02420074 	movhi	r9,2049
 8007690:	4a4c1404 	addi	r9,r9,12368
 8007694:	82405f26 	beq	r16,r9,8007814 <_malloc_r+0x2b4>
 8007698:	80c00117 	ldw	r3,4(r16)
 800769c:	00bfff04 	movi	r2,-4
 80076a0:	1884703a 	and	r2,r3,r2
 80076a4:	1447c83a 	sub	r3,r2,r17
 80076a8:	19000410 	cmplti	r4,r3,16
 80076ac:	20010a26 	beq	r4,zero,8007ad8 <_malloc_r+0x578>
 80076b0:	9a400515 	stw	r9,20(r19)
 80076b4:	9a400415 	stw	r9,16(r19)
 80076b8:	1800ff0e 	bge	r3,zero,8007ab8 <_malloc_r+0x558>
 80076bc:	10c08028 	cmpgeui	r3,r2,512
 80076c0:	1800c11e 	bne	r3,zero,80079c8 <_malloc_r+0x468>
 80076c4:	1006d0fa 	srli	r3,r2,3
 80076c8:	1008d17a 	srli	r4,r2,5
 80076cc:	00800044 	movi	r2,1
 80076d0:	18c00044 	addi	r3,r3,1
 80076d4:	180690fa 	slli	r3,r3,3
 80076d8:	99400117 	ldw	r5,4(r19)
 80076dc:	1104983a 	sll	r2,r2,r4
 80076e0:	98c7883a 	add	r3,r19,r3
 80076e4:	19000017 	ldw	r4,0(r3)
 80076e8:	1144b03a 	or	r2,r2,r5
 80076ec:	197ffe04 	addi	r5,r3,-8
 80076f0:	81400315 	stw	r5,12(r16)
 80076f4:	81000215 	stw	r4,8(r16)
 80076f8:	98800115 	stw	r2,4(r19)
 80076fc:	1c000015 	stw	r16,0(r3)
 8007700:	24000315 	stw	r16,12(r4)
 8007704:	3807d0ba 	srai	r3,r7,2
 8007708:	01000044 	movi	r4,1
 800770c:	20c8983a 	sll	r4,r4,r3
 8007710:	11004536 	bltu	r2,r4,8007828 <_malloc_r+0x2c8>
 8007714:	2086703a 	and	r3,r4,r2
 8007718:	18000a1e 	bne	r3,zero,8007744 <_malloc_r+0x1e4>
 800771c:	00ffff04 	movi	r3,-4
 8007720:	2109883a 	add	r4,r4,r4
 8007724:	38ce703a 	and	r7,r7,r3
 8007728:	2086703a 	and	r3,r4,r2
 800772c:	39c00104 	addi	r7,r7,4
 8007730:	1800041e 	bne	r3,zero,8007744 <_malloc_r+0x1e4>
 8007734:	2109883a 	add	r4,r4,r4
 8007738:	2086703a 	and	r3,r4,r2
 800773c:	39c00104 	addi	r7,r7,4
 8007740:	183ffc26 	beq	r3,zero,8007734 <_malloc_r+0x1d4>
 8007744:	02bfff04 	movi	r10,-4
 8007748:	381690fa 	slli	r11,r7,3
 800774c:	3819883a 	mov	r12,r7
 8007750:	9ad7883a 	add	r11,r19,r11
 8007754:	5811883a 	mov	r8,r11
 8007758:	40800317 	ldw	r2,12(r8)
 800775c:	4080bc26 	beq	r8,r2,8007a50 <_malloc_r+0x4f0>
 8007760:	10c00117 	ldw	r3,4(r2)
 8007764:	1021883a 	mov	r16,r2
 8007768:	10800317 	ldw	r2,12(r2)
 800776c:	1a86703a 	and	r3,r3,r10
 8007770:	1c4bc83a 	sub	r5,r3,r17
 8007774:	29800410 	cmplti	r6,r5,16
 8007778:	3000ba26 	beq	r6,zero,8007a64 <_malloc_r+0x504>
 800777c:	283ff716 	blt	r5,zero,800775c <_malloc_r+0x1fc>
 8007780:	80c7883a 	add	r3,r16,r3
 8007784:	19400117 	ldw	r5,4(r3)
 8007788:	81800217 	ldw	r6,8(r16)
 800778c:	9009883a 	mov	r4,r18
 8007790:	29400054 	ori	r5,r5,1
 8007794:	19400115 	stw	r5,4(r3)
 8007798:	30800315 	stw	r2,12(r6)
 800779c:	11800215 	stw	r6,8(r2)
 80077a0:	800fd3c0 	call	800fd3c <__malloc_unlock>
 80077a4:	80800204 	addi	r2,r16,8
 80077a8:	00000306 	br	80077b8 <_malloc_r+0x258>
 80077ac:	00800304 	movi	r2,12
 80077b0:	90800015 	stw	r2,0(r18)
 80077b4:	0005883a 	mov	r2,zero
 80077b8:	dfc00917 	ldw	ra,36(sp)
 80077bc:	df000817 	ldw	fp,32(sp)
 80077c0:	ddc00717 	ldw	r23,28(sp)
 80077c4:	dd800617 	ldw	r22,24(sp)
 80077c8:	dd400517 	ldw	r21,20(sp)
 80077cc:	dd000417 	ldw	r20,16(sp)
 80077d0:	dcc00317 	ldw	r19,12(sp)
 80077d4:	dc800217 	ldw	r18,8(sp)
 80077d8:	dc400117 	ldw	r17,4(sp)
 80077dc:	dc000017 	ldw	r16,0(sp)
 80077e0:	dec00a04 	addi	sp,sp,40
 80077e4:	f800283a 	ret
 80077e8:	01008004 	movi	r4,512
 80077ec:	01c01004 	movi	r7,64
 80077f0:	02000fc4 	movi	r8,63
 80077f4:	003f9306 	br	8007644 <_malloc_r+0xe4>
 80077f8:	14000317 	ldw	r16,12(r2)
 80077fc:	39c00084 	addi	r7,r7,2
 8007800:	143f721e 	bne	r2,r16,80075cc <_malloc_r+0x6c>
 8007804:	9c000417 	ldw	r16,16(r19)
 8007808:	02420074 	movhi	r9,2049
 800780c:	4a4c1404 	addi	r9,r9,12368
 8007810:	827fa11e 	bne	r16,r9,8007698 <_malloc_r+0x138>
 8007814:	3807d0ba 	srai	r3,r7,2
 8007818:	01000044 	movi	r4,1
 800781c:	98800117 	ldw	r2,4(r19)
 8007820:	20c8983a 	sll	r4,r4,r3
 8007824:	113fbb2e 	bgeu	r2,r4,8007714 <_malloc_r+0x1b4>
 8007828:	9c000217 	ldw	r16,8(r19)
 800782c:	00bfff04 	movi	r2,-4
 8007830:	85400117 	ldw	r21,4(r16)
 8007834:	a8ac703a 	and	r22,r21,r2
 8007838:	b4400336 	bltu	r22,r17,8007848 <_malloc_r+0x2e8>
 800783c:	b445c83a 	sub	r2,r22,r17
 8007840:	10c00408 	cmpgei	r3,r2,16
 8007844:	1800541e 	bne	r3,zero,8007998 <_malloc_r+0x438>
 8007848:	00820074 	movhi	r2,2049
 800784c:	1091f317 	ldw	r2,18380(r2)
 8007850:	00c20074 	movhi	r3,2049
 8007854:	1d58f817 	ldw	r21,25568(r3)
 8007858:	10bfffd8 	cmpnei	r2,r2,-1
 800785c:	85b9883a 	add	fp,r16,r22
 8007860:	8d6b883a 	add	r21,r17,r21
 8007864:	1000d626 	beq	r2,zero,8007bc0 <_malloc_r+0x660>
 8007868:	ad4403c4 	addi	r21,r21,4111
 800786c:	00bc0004 	movi	r2,-4096
 8007870:	a8aa703a 	and	r21,r21,r2
 8007874:	a80b883a 	mov	r5,r21
 8007878:	9009883a 	mov	r4,r18
 800787c:	80098800 	call	8009880 <_sbrk_r>
 8007880:	102f883a 	mov	r23,r2
 8007884:	10bfffd8 	cmpnei	r2,r2,-1
 8007888:	1000a826 	beq	r2,zero,8007b2c <_malloc_r+0x5cc>
 800788c:	bf00a636 	bltu	r23,fp,8007b28 <_malloc_r+0x5c8>
 8007890:	00820074 	movhi	r2,2049
 8007894:	15190217 	ldw	r20,25608(r2)
 8007898:	ad29883a 	add	r20,r21,r20
 800789c:	15190215 	stw	r20,25608(r2)
 80078a0:	a007883a 	mov	r3,r20
 80078a4:	e5c0ec26 	beq	fp,r23,8007c58 <_malloc_r+0x6f8>
 80078a8:	00820074 	movhi	r2,2049
 80078ac:	1091f317 	ldw	r2,18380(r2)
 80078b0:	10bfffd8 	cmpnei	r2,r2,-1
 80078b4:	1000ef26 	beq	r2,zero,8007c74 <_malloc_r+0x714>
 80078b8:	bf39c83a 	sub	fp,r23,fp
 80078bc:	e0c7883a 	add	r3,fp,r3
 80078c0:	00820074 	movhi	r2,2049
 80078c4:	10d90215 	stw	r3,25608(r2)
 80078c8:	bf0001cc 	andi	fp,r23,7
 80078cc:	e000c526 	beq	fp,zero,8007be4 <_malloc_r+0x684>
 80078d0:	bf2fc83a 	sub	r23,r23,fp
 80078d4:	bdc00204 	addi	r23,r23,8
 80078d8:	05040204 	movi	r20,4104
 80078dc:	a729c83a 	sub	r20,r20,fp
 80078e0:	bd6b883a 	add	r21,r23,r21
 80078e4:	a569c83a 	sub	r20,r20,r21
 80078e8:	a503ffcc 	andi	r20,r20,4095
 80078ec:	a00b883a 	mov	r5,r20
 80078f0:	9009883a 	mov	r4,r18
 80078f4:	80098800 	call	8009880 <_sbrk_r>
 80078f8:	10ffffe0 	cmpeqi	r3,r2,-1
 80078fc:	1800f31e 	bne	r3,zero,8007ccc <_malloc_r+0x76c>
 8007900:	15c5c83a 	sub	r2,r2,r23
 8007904:	152b883a 	add	r21,r2,r20
 8007908:	00820074 	movhi	r2,2049
 800790c:	11590217 	ldw	r5,25608(r2)
 8007910:	9dc00215 	stw	r23,8(r19)
 8007914:	ad400054 	ori	r21,r21,1
 8007918:	a169883a 	add	r20,r20,r5
 800791c:	15190215 	stw	r20,25608(r2)
 8007920:	bd400115 	stw	r21,4(r23)
 8007924:	84c0d626 	beq	r16,r19,8007c80 <_malloc_r+0x720>
 8007928:	b0800428 	cmpgeui	r2,r22,16
 800792c:	1000d626 	beq	r2,zero,8007c88 <_malloc_r+0x728>
 8007930:	80c00117 	ldw	r3,4(r16)
 8007934:	013ffe04 	movi	r4,-8
 8007938:	b0bffd04 	addi	r2,r22,-12
 800793c:	1104703a 	and	r2,r2,r4
 8007940:	18c0004c 	andi	r3,r3,1
 8007944:	1886b03a 	or	r3,r3,r2
 8007948:	80c00115 	stw	r3,4(r16)
 800794c:	01000144 	movi	r4,5
 8007950:	8087883a 	add	r3,r16,r2
 8007954:	19000115 	stw	r4,4(r3)
 8007958:	19000215 	stw	r4,8(r3)
 800795c:	10800428 	cmpgeui	r2,r2,16
 8007960:	1000df1e 	bne	r2,zero,8007ce0 <_malloc_r+0x780>
 8007964:	bd400117 	ldw	r21,4(r23)
 8007968:	b821883a 	mov	r16,r23
 800796c:	00820074 	movhi	r2,2049
 8007970:	1098f717 	ldw	r2,25564(r2)
 8007974:	1500022e 	bgeu	r2,r20,8007980 <_malloc_r+0x420>
 8007978:	00820074 	movhi	r2,2049
 800797c:	1518f715 	stw	r20,25564(r2)
 8007980:	00820074 	movhi	r2,2049
 8007984:	1098f617 	ldw	r2,25560(r2)
 8007988:	15006a2e 	bgeu	r2,r20,8007b34 <_malloc_r+0x5d4>
 800798c:	00820074 	movhi	r2,2049
 8007990:	1518f615 	stw	r20,25560(r2)
 8007994:	00006706 	br	8007b34 <_malloc_r+0x5d4>
 8007998:	88c00054 	ori	r3,r17,1
 800799c:	80c00115 	stw	r3,4(r16)
 80079a0:	8463883a 	add	r17,r16,r17
 80079a4:	10800054 	ori	r2,r2,1
 80079a8:	9c400215 	stw	r17,8(r19)
 80079ac:	88800115 	stw	r2,4(r17)
 80079b0:	9009883a 	mov	r4,r18
 80079b4:	800fd3c0 	call	800fd3c <__malloc_unlock>
 80079b8:	80800204 	addi	r2,r16,8
 80079bc:	003f7e06 	br	80077b8 <_malloc_r+0x258>
 80079c0:	81000317 	ldw	r4,12(r16)
 80079c4:	003f0506 	br	80075dc <_malloc_r+0x7c>
 80079c8:	1006d27a 	srli	r3,r2,9
 80079cc:	19000168 	cmpgeui	r4,r3,5
 80079d0:	20005026 	beq	r4,zero,8007b14 <_malloc_r+0x5b4>
 80079d4:	19000568 	cmpgeui	r4,r3,21
 80079d8:	20008c1e 	bne	r4,zero,8007c0c <_malloc_r+0x6ac>
 80079dc:	19401704 	addi	r5,r3,92
 80079e0:	280a90fa 	slli	r5,r5,3
 80079e4:	190016c4 	addi	r4,r3,91
 80079e8:	994b883a 	add	r5,r19,r5
 80079ec:	28c00017 	ldw	r3,0(r5)
 80079f0:	297ffe04 	addi	r5,r5,-8
 80079f4:	28c07426 	beq	r5,r3,8007bc8 <_malloc_r+0x668>
 80079f8:	01bfff04 	movi	r6,-4
 80079fc:	19000117 	ldw	r4,4(r3)
 8007a00:	2188703a 	and	r4,r4,r6
 8007a04:	1100022e 	bgeu	r2,r4,8007a10 <_malloc_r+0x4b0>
 8007a08:	18c00217 	ldw	r3,8(r3)
 8007a0c:	28fffb1e 	bne	r5,r3,80079fc <_malloc_r+0x49c>
 8007a10:	19400317 	ldw	r5,12(r3)
 8007a14:	98800117 	ldw	r2,4(r19)
 8007a18:	81400315 	stw	r5,12(r16)
 8007a1c:	80c00215 	stw	r3,8(r16)
 8007a20:	2c000215 	stw	r16,8(r5)
 8007a24:	1c000315 	stw	r16,12(r3)
 8007a28:	003f3606 	br	8007704 <_malloc_r+0x1a4>
 8007a2c:	10c00568 	cmpgeui	r3,r2,21
 8007a30:	18004a26 	beq	r3,zero,8007b5c <_malloc_r+0x5fc>
 8007a34:	10c01568 	cmpgeui	r3,r2,85
 8007a38:	18007b1e 	bne	r3,zero,8007c28 <_malloc_r+0x6c8>
 8007a3c:	8804d33a 	srli	r2,r17,12
 8007a40:	11c01bc4 	addi	r7,r2,111
 8007a44:	380890fa 	slli	r4,r7,3
 8007a48:	12001b84 	addi	r8,r2,110
 8007a4c:	003efd06 	br	8007644 <_malloc_r+0xe4>
 8007a50:	63000044 	addi	r12,r12,1
 8007a54:	608000cc 	andi	r2,r12,3
 8007a58:	42000204 	addi	r8,r8,8
 8007a5c:	103f3e1e 	bne	r2,zero,8007758 <_malloc_r+0x1f8>
 8007a60:	00004506 	br	8007b78 <_malloc_r+0x618>
 8007a64:	81000217 	ldw	r4,8(r16)
 8007a68:	89800054 	ori	r6,r17,1
 8007a6c:	81800115 	stw	r6,4(r16)
 8007a70:	20800315 	stw	r2,12(r4)
 8007a74:	11000215 	stw	r4,8(r2)
 8007a78:	8463883a 	add	r17,r16,r17
 8007a7c:	9c400515 	stw	r17,20(r19)
 8007a80:	9c400415 	stw	r17,16(r19)
 8007a84:	28800054 	ori	r2,r5,1
 8007a88:	88800115 	stw	r2,4(r17)
 8007a8c:	8a400315 	stw	r9,12(r17)
 8007a90:	8a400215 	stw	r9,8(r17)
 8007a94:	80c7883a 	add	r3,r16,r3
 8007a98:	19400015 	stw	r5,0(r3)
 8007a9c:	9009883a 	mov	r4,r18
 8007aa0:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8007aa4:	80800204 	addi	r2,r16,8
 8007aa8:	003f4306 	br	80077b8 <_malloc_r+0x258>
 8007aac:	880ed0fa 	srli	r7,r17,3
 8007ab0:	88800204 	addi	r2,r17,8
 8007ab4:	003ebf06 	br	80075b4 <_malloc_r+0x54>
 8007ab8:	8085883a 	add	r2,r16,r2
 8007abc:	10c00117 	ldw	r3,4(r2)
 8007ac0:	9009883a 	mov	r4,r18
 8007ac4:	18c00054 	ori	r3,r3,1
 8007ac8:	10c00115 	stw	r3,4(r2)
 8007acc:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8007ad0:	80800204 	addi	r2,r16,8
 8007ad4:	003f3806 	br	80077b8 <_malloc_r+0x258>
 8007ad8:	89000054 	ori	r4,r17,1
 8007adc:	81000115 	stw	r4,4(r16)
 8007ae0:	8463883a 	add	r17,r16,r17
 8007ae4:	9c400515 	stw	r17,20(r19)
 8007ae8:	9c400415 	stw	r17,16(r19)
 8007aec:	19000054 	ori	r4,r3,1
 8007af0:	89000115 	stw	r4,4(r17)
 8007af4:	8085883a 	add	r2,r16,r2
 8007af8:	8a400315 	stw	r9,12(r17)
 8007afc:	8a400215 	stw	r9,8(r17)
 8007b00:	10c00015 	stw	r3,0(r2)
 8007b04:	9009883a 	mov	r4,r18
 8007b08:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8007b0c:	80800204 	addi	r2,r16,8
 8007b10:	003f2906 	br	80077b8 <_malloc_r+0x258>
 8007b14:	1006d1ba 	srli	r3,r2,6
 8007b18:	19400e44 	addi	r5,r3,57
 8007b1c:	280a90fa 	slli	r5,r5,3
 8007b20:	19000e04 	addi	r4,r3,56
 8007b24:	003fb006 	br	80079e8 <_malloc_r+0x488>
 8007b28:	84c04626 	beq	r16,r19,8007c44 <_malloc_r+0x6e4>
 8007b2c:	9c000217 	ldw	r16,8(r19)
 8007b30:	85400117 	ldw	r21,4(r16)
 8007b34:	00bfff04 	movi	r2,-4
 8007b38:	a8aa703a 	and	r21,r21,r2
 8007b3c:	ac45c83a 	sub	r2,r21,r17
 8007b40:	ac400236 	bltu	r21,r17,8007b4c <_malloc_r+0x5ec>
 8007b44:	10c00408 	cmpgei	r3,r2,16
 8007b48:	183f931e 	bne	r3,zero,8007998 <_malloc_r+0x438>
 8007b4c:	9009883a 	mov	r4,r18
 8007b50:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8007b54:	0005883a 	mov	r2,zero
 8007b58:	003f1706 	br	80077b8 <_malloc_r+0x258>
 8007b5c:	11c01704 	addi	r7,r2,92
 8007b60:	380890fa 	slli	r4,r7,3
 8007b64:	120016c4 	addi	r8,r2,91
 8007b68:	003eb606 	br	8007644 <_malloc_r+0xe4>
 8007b6c:	58800217 	ldw	r2,8(r11)
 8007b70:	39ffffc4 	addi	r7,r7,-1
 8007b74:	12c0701e 	bne	r2,r11,8007d38 <_malloc_r+0x7d8>
 8007b78:	388000cc 	andi	r2,r7,3
 8007b7c:	5afffe04 	addi	r11,r11,-8
 8007b80:	103ffa1e 	bne	r2,zero,8007b6c <_malloc_r+0x60c>
 8007b84:	98c00117 	ldw	r3,4(r19)
 8007b88:	0104303a 	nor	r2,zero,r4
 8007b8c:	10c4703a 	and	r2,r2,r3
 8007b90:	98800115 	stw	r2,4(r19)
 8007b94:	2109883a 	add	r4,r4,r4
 8007b98:	113f2336 	bltu	r2,r4,8007828 <_malloc_r+0x2c8>
 8007b9c:	203f2226 	beq	r4,zero,8007828 <_malloc_r+0x2c8>
 8007ba0:	2086703a 	and	r3,r4,r2
 8007ba4:	1800041e 	bne	r3,zero,8007bb8 <_malloc_r+0x658>
 8007ba8:	2109883a 	add	r4,r4,r4
 8007bac:	2086703a 	and	r3,r4,r2
 8007bb0:	63000104 	addi	r12,r12,4
 8007bb4:	183ffc26 	beq	r3,zero,8007ba8 <_malloc_r+0x648>
 8007bb8:	600f883a 	mov	r7,r12
 8007bbc:	003ee206 	br	8007748 <_malloc_r+0x1e8>
 8007bc0:	ad400404 	addi	r21,r21,16
 8007bc4:	003f2b06 	br	8007874 <_malloc_r+0x314>
 8007bc8:	2009d0ba 	srai	r4,r4,2
 8007bcc:	00800044 	movi	r2,1
 8007bd0:	99800117 	ldw	r6,4(r19)
 8007bd4:	1104983a 	sll	r2,r2,r4
 8007bd8:	1184b03a 	or	r2,r2,r6
 8007bdc:	98800115 	stw	r2,4(r19)
 8007be0:	003f8d06 	br	8007a18 <_malloc_r+0x4b8>
 8007be4:	bd69883a 	add	r20,r23,r21
 8007be8:	0529c83a 	sub	r20,zero,r20
 8007bec:	a503ffcc 	andi	r20,r20,4095
 8007bf0:	a00b883a 	mov	r5,r20
 8007bf4:	9009883a 	mov	r4,r18
 8007bf8:	80098800 	call	8009880 <_sbrk_r>
 8007bfc:	10ffffe0 	cmpeqi	r3,r2,-1
 8007c00:	183f3f26 	beq	r3,zero,8007900 <_malloc_r+0x3a0>
 8007c04:	0029883a 	mov	r20,zero
 8007c08:	003f3f06 	br	8007908 <_malloc_r+0x3a8>
 8007c0c:	19001568 	cmpgeui	r4,r3,85
 8007c10:	2000201e 	bne	r4,zero,8007c94 <_malloc_r+0x734>
 8007c14:	1006d33a 	srli	r3,r2,12
 8007c18:	19401bc4 	addi	r5,r3,111
 8007c1c:	280a90fa 	slli	r5,r5,3
 8007c20:	19001b84 	addi	r4,r3,110
 8007c24:	003f7006 	br	80079e8 <_malloc_r+0x488>
 8007c28:	10c05568 	cmpgeui	r3,r2,341
 8007c2c:	1800201e 	bne	r3,zero,8007cb0 <_malloc_r+0x750>
 8007c30:	8804d3fa 	srli	r2,r17,15
 8007c34:	11c01e04 	addi	r7,r2,120
 8007c38:	380890fa 	slli	r4,r7,3
 8007c3c:	12001dc4 	addi	r8,r2,119
 8007c40:	003e8006 	br	8007644 <_malloc_r+0xe4>
 8007c44:	00820074 	movhi	r2,2049
 8007c48:	10d90217 	ldw	r3,25608(r2)
 8007c4c:	a8c7883a 	add	r3,r21,r3
 8007c50:	10d90215 	stw	r3,25608(r2)
 8007c54:	003f1406 	br	80078a8 <_malloc_r+0x348>
 8007c58:	e083ffcc 	andi	r2,fp,4095
 8007c5c:	103f121e 	bne	r2,zero,80078a8 <_malloc_r+0x348>
 8007c60:	9c000217 	ldw	r16,8(r19)
 8007c64:	b56b883a 	add	r21,r22,r21
 8007c68:	ad400054 	ori	r21,r21,1
 8007c6c:	85400115 	stw	r21,4(r16)
 8007c70:	003f3e06 	br	800796c <_malloc_r+0x40c>
 8007c74:	00820074 	movhi	r2,2049
 8007c78:	15d1f315 	stw	r23,18380(r2)
 8007c7c:	003f1206 	br	80078c8 <_malloc_r+0x368>
 8007c80:	b821883a 	mov	r16,r23
 8007c84:	003f3906 	br	800796c <_malloc_r+0x40c>
 8007c88:	00800044 	movi	r2,1
 8007c8c:	b8800115 	stw	r2,4(r23)
 8007c90:	003fae06 	br	8007b4c <_malloc_r+0x5ec>
 8007c94:	19005568 	cmpgeui	r4,r3,341
 8007c98:	2000191e 	bne	r4,zero,8007d00 <_malloc_r+0x7a0>
 8007c9c:	1006d3fa 	srli	r3,r2,15
 8007ca0:	19401e04 	addi	r5,r3,120
 8007ca4:	280a90fa 	slli	r5,r5,3
 8007ca8:	19001dc4 	addi	r4,r3,119
 8007cac:	003f4e06 	br	80079e8 <_malloc_r+0x488>
 8007cb0:	10815568 	cmpgeui	r2,r2,1365
 8007cb4:	1000191e 	bne	r2,zero,8007d1c <_malloc_r+0x7bc>
 8007cb8:	8804d4ba 	srli	r2,r17,18
 8007cbc:	11c01f44 	addi	r7,r2,125
 8007cc0:	380890fa 	slli	r4,r7,3
 8007cc4:	12001f04 	addi	r8,r2,124
 8007cc8:	003e5e06 	br	8007644 <_malloc_r+0xe4>
 8007ccc:	e73ffe04 	addi	fp,fp,-8
 8007cd0:	af2b883a 	add	r21,r21,fp
 8007cd4:	adebc83a 	sub	r21,r21,r23
 8007cd8:	0029883a 	mov	r20,zero
 8007cdc:	003f0a06 	br	8007908 <_malloc_r+0x3a8>
 8007ce0:	81400204 	addi	r5,r16,8
 8007ce4:	9009883a 	mov	r4,r18
 8007ce8:	80069f40 	call	80069f4 <_free_r>
 8007cec:	9c000217 	ldw	r16,8(r19)
 8007cf0:	00820074 	movhi	r2,2049
 8007cf4:	15190217 	ldw	r20,25608(r2)
 8007cf8:	85400117 	ldw	r21,4(r16)
 8007cfc:	003f1b06 	br	800796c <_malloc_r+0x40c>
 8007d00:	18c15568 	cmpgeui	r3,r3,1365
 8007d04:	1800091e 	bne	r3,zero,8007d2c <_malloc_r+0x7cc>
 8007d08:	1006d4ba 	srli	r3,r2,18
 8007d0c:	19401f44 	addi	r5,r3,125
 8007d10:	280a90fa 	slli	r5,r5,3
 8007d14:	19001f04 	addi	r4,r3,124
 8007d18:	003f3306 	br	80079e8 <_malloc_r+0x488>
 8007d1c:	0100fe04 	movi	r4,1016
 8007d20:	01c01fc4 	movi	r7,127
 8007d24:	02001f84 	movi	r8,126
 8007d28:	003e4606 	br	8007644 <_malloc_r+0xe4>
 8007d2c:	0140fe04 	movi	r5,1016
 8007d30:	01001f84 	movi	r4,126
 8007d34:	003f2c06 	br	80079e8 <_malloc_r+0x488>
 8007d38:	98800117 	ldw	r2,4(r19)
 8007d3c:	003f9506 	br	8007b94 <_malloc_r+0x634>

08007d40 <memchr>:
 8007d40:	208000cc 	andi	r2,r4,3
 8007d44:	280f883a 	mov	r7,r5
 8007d48:	10000e26 	beq	r2,zero,8007d84 <memchr+0x44>
 8007d4c:	30bfffc4 	addi	r2,r6,-1
 8007d50:	30001726 	beq	r6,zero,8007db0 <memchr+0x70>
 8007d54:	29803fcc 	andi	r6,r5,255
 8007d58:	00000606 	br	8007d74 <memchr+0x34>
 8007d5c:	21000044 	addi	r4,r4,1
 8007d60:	20c000cc 	andi	r3,r4,3
 8007d64:	18000826 	beq	r3,zero,8007d88 <memchr+0x48>
 8007d68:	10bfffc4 	addi	r2,r2,-1
 8007d6c:	10ffffe0 	cmpeqi	r3,r2,-1
 8007d70:	18000f1e 	bne	r3,zero,8007db0 <memchr+0x70>
 8007d74:	20c00003 	ldbu	r3,0(r4)
 8007d78:	19bff81e 	bne	r3,r6,8007d5c <memchr+0x1c>
 8007d7c:	2005883a 	mov	r2,r4
 8007d80:	f800283a 	ret
 8007d84:	3005883a 	mov	r2,r6
 8007d88:	10c00128 	cmpgeui	r3,r2,4
 8007d8c:	18000a1e 	bne	r3,zero,8007db8 <memchr+0x78>
 8007d90:	10001e26 	beq	r2,zero,8007e0c <memchr+0xcc>
 8007d94:	2087883a 	add	r3,r4,r2
 8007d98:	39803fcc 	andi	r6,r7,255
 8007d9c:	2005883a 	mov	r2,r4
 8007da0:	11000003 	ldbu	r4,0(r2)
 8007da4:	21bff626 	beq	r4,r6,8007d80 <memchr+0x40>
 8007da8:	10800044 	addi	r2,r2,1
 8007dac:	18bffc1e 	bne	r3,r2,8007da0 <memchr+0x60>
 8007db0:	0005883a 	mov	r2,zero
 8007db4:	f800283a 	ret
 8007db8:	29403fcc 	andi	r5,r5,255
 8007dbc:	280c923a 	slli	r6,r5,8
 8007dc0:	027fbff4 	movhi	r9,65279
 8007dc4:	02202074 	movhi	r8,32897
 8007dc8:	314ab03a 	or	r5,r6,r5
 8007dcc:	280c943a 	slli	r6,r5,16
 8007dd0:	4a7fbfc4 	addi	r9,r9,-257
 8007dd4:	42202004 	addi	r8,r8,-32640
 8007dd8:	314cb03a 	or	r6,r6,r5
 8007ddc:	20c00017 	ldw	r3,0(r4)
 8007de0:	30c6f03a 	xor	r3,r6,r3
 8007de4:	1a4b883a 	add	r5,r3,r9
 8007de8:	00c6303a 	nor	r3,zero,r3
 8007dec:	28c6703a 	and	r3,r5,r3
 8007df0:	1a06703a 	and	r3,r3,r8
 8007df4:	183fe71e 	bne	r3,zero,8007d94 <memchr+0x54>
 8007df8:	10bfff04 	addi	r2,r2,-4
 8007dfc:	10c00128 	cmpgeui	r3,r2,4
 8007e00:	21000104 	addi	r4,r4,4
 8007e04:	183ff51e 	bne	r3,zero,8007ddc <memchr+0x9c>
 8007e08:	003fe106 	br	8007d90 <memchr+0x50>
 8007e0c:	f800283a 	ret

08007e10 <memcpy>:
 8007e10:	30c00430 	cmpltui	r3,r6,16
 8007e14:	2005883a 	mov	r2,r4
 8007e18:	18002d1e 	bne	r3,zero,8007ed0 <memcpy+0xc0>
 8007e1c:	2906b03a 	or	r3,r5,r4
 8007e20:	18c000cc 	andi	r3,r3,3
 8007e24:	1800351e 	bne	r3,zero,8007efc <memcpy+0xec>
 8007e28:	32fffc04 	addi	r11,r6,-16
 8007e2c:	5816d13a 	srli	r11,r11,4
 8007e30:	280f883a 	mov	r7,r5
 8007e34:	2007883a 	mov	r3,r4
 8007e38:	5ac00044 	addi	r11,r11,1
 8007e3c:	5816913a 	slli	r11,r11,4
 8007e40:	22d5883a 	add	r10,r4,r11
 8007e44:	39000117 	ldw	r4,4(r7)
 8007e48:	3a400017 	ldw	r9,0(r7)
 8007e4c:	3a000217 	ldw	r8,8(r7)
 8007e50:	19000115 	stw	r4,4(r3)
 8007e54:	39000317 	ldw	r4,12(r7)
 8007e58:	1a400015 	stw	r9,0(r3)
 8007e5c:	1a000215 	stw	r8,8(r3)
 8007e60:	19000315 	stw	r4,12(r3)
 8007e64:	18c00404 	addi	r3,r3,16
 8007e68:	39c00404 	addi	r7,r7,16
 8007e6c:	50fff51e 	bne	r10,r3,8007e44 <memcpy+0x34>
 8007e70:	3100030c 	andi	r4,r6,12
 8007e74:	2acb883a 	add	r5,r5,r11
 8007e78:	320003cc 	andi	r8,r6,15
 8007e7c:	20002226 	beq	r4,zero,8007f08 <memcpy+0xf8>
 8007e80:	280f883a 	mov	r7,r5
 8007e84:	1813883a 	mov	r9,r3
 8007e88:	39c00104 	addi	r7,r7,4
 8007e8c:	3abfff17 	ldw	r10,-4(r7)
 8007e90:	41c9c83a 	sub	r4,r8,r7
 8007e94:	2909883a 	add	r4,r5,r4
 8007e98:	4a800015 	stw	r10,0(r9)
 8007e9c:	21000128 	cmpgeui	r4,r4,4
 8007ea0:	4a400104 	addi	r9,r9,4
 8007ea4:	203ff81e 	bne	r4,zero,8007e88 <memcpy+0x78>
 8007ea8:	413fff04 	addi	r4,r8,-4
 8007eac:	2008d0ba 	srli	r4,r4,2
 8007eb0:	318000cc 	andi	r6,r6,3
 8007eb4:	31ffffc4 	addi	r7,r6,-1
 8007eb8:	21000044 	addi	r4,r4,1
 8007ebc:	200890ba 	slli	r4,r4,2
 8007ec0:	1907883a 	add	r3,r3,r4
 8007ec4:	290b883a 	add	r5,r5,r4
 8007ec8:	3000041e 	bne	r6,zero,8007edc <memcpy+0xcc>
 8007ecc:	f800283a 	ret
 8007ed0:	2007883a 	mov	r3,r4
 8007ed4:	31ffffc4 	addi	r7,r6,-1
 8007ed8:	303ffc26 	beq	r6,zero,8007ecc <memcpy+0xbc>
 8007edc:	39c00044 	addi	r7,r7,1
 8007ee0:	19cf883a 	add	r7,r3,r7
 8007ee4:	29800003 	ldbu	r6,0(r5)
 8007ee8:	18c00044 	addi	r3,r3,1
 8007eec:	29400044 	addi	r5,r5,1
 8007ef0:	19bfffc5 	stb	r6,-1(r3)
 8007ef4:	38fffb1e 	bne	r7,r3,8007ee4 <memcpy+0xd4>
 8007ef8:	f800283a 	ret
 8007efc:	31ffffc4 	addi	r7,r6,-1
 8007f00:	2007883a 	mov	r3,r4
 8007f04:	003ff506 	br	8007edc <memcpy+0xcc>
 8007f08:	400d883a 	mov	r6,r8
 8007f0c:	003ff106 	br	8007ed4 <memcpy+0xc4>

08007f10 <memmove>:
 8007f10:	2005883a 	mov	r2,r4
 8007f14:	29000a2e 	bgeu	r5,r4,8007f40 <memmove+0x30>
 8007f18:	2989883a 	add	r4,r5,r6
 8007f1c:	1100082e 	bgeu	r2,r4,8007f40 <memmove+0x30>
 8007f20:	1187883a 	add	r3,r2,r6
 8007f24:	30003e26 	beq	r6,zero,8008020 <memmove+0x110>
 8007f28:	217fffc3 	ldbu	r5,-1(r4)
 8007f2c:	18ffffc4 	addi	r3,r3,-1
 8007f30:	213fffc4 	addi	r4,r4,-1
 8007f34:	19400005 	stb	r5,0(r3)
 8007f38:	10fffb1e 	bne	r2,r3,8007f28 <memmove+0x18>
 8007f3c:	f800283a 	ret
 8007f40:	30c00430 	cmpltui	r3,r6,16
 8007f44:	18000b26 	beq	r3,zero,8007f74 <memmove+0x64>
 8007f48:	1007883a 	mov	r3,r2
 8007f4c:	31ffffc4 	addi	r7,r6,-1
 8007f50:	30003726 	beq	r6,zero,8008030 <memmove+0x120>
 8007f54:	39c00044 	addi	r7,r7,1
 8007f58:	29cf883a 	add	r7,r5,r7
 8007f5c:	29800003 	ldbu	r6,0(r5)
 8007f60:	29400044 	addi	r5,r5,1
 8007f64:	18c00044 	addi	r3,r3,1
 8007f68:	19bfffc5 	stb	r6,-1(r3)
 8007f6c:	29fffb1e 	bne	r5,r7,8007f5c <memmove+0x4c>
 8007f70:	f800283a 	ret
 8007f74:	2886b03a 	or	r3,r5,r2
 8007f78:	18c000cc 	andi	r3,r3,3
 8007f7c:	1800291e 	bne	r3,zero,8008024 <memmove+0x114>
 8007f80:	327ffc04 	addi	r9,r6,-16
 8007f84:	4812d13a 	srli	r9,r9,4
 8007f88:	280f883a 	mov	r7,r5
 8007f8c:	1007883a 	mov	r3,r2
 8007f90:	4a400044 	addi	r9,r9,1
 8007f94:	4812913a 	slli	r9,r9,4
 8007f98:	1251883a 	add	r8,r2,r9
 8007f9c:	39000017 	ldw	r4,0(r7)
 8007fa0:	39c00404 	addi	r7,r7,16
 8007fa4:	18c00404 	addi	r3,r3,16
 8007fa8:	193ffc15 	stw	r4,-16(r3)
 8007fac:	393ffd17 	ldw	r4,-12(r7)
 8007fb0:	193ffd15 	stw	r4,-12(r3)
 8007fb4:	393ffe17 	ldw	r4,-8(r7)
 8007fb8:	193ffe15 	stw	r4,-8(r3)
 8007fbc:	393fff17 	ldw	r4,-4(r7)
 8007fc0:	193fff15 	stw	r4,-4(r3)
 8007fc4:	40fff51e 	bne	r8,r3,8007f9c <memmove+0x8c>
 8007fc8:	3100030c 	andi	r4,r6,12
 8007fcc:	2a4b883a 	add	r5,r5,r9
 8007fd0:	320003cc 	andi	r8,r6,15
 8007fd4:	20001726 	beq	r4,zero,8008034 <memmove+0x124>
 8007fd8:	2813883a 	mov	r9,r5
 8007fdc:	180f883a 	mov	r7,r3
 8007fe0:	4a800017 	ldw	r10,0(r9)
 8007fe4:	39c00104 	addi	r7,r7,4
 8007fe8:	41c9c83a 	sub	r4,r8,r7
 8007fec:	1909883a 	add	r4,r3,r4
 8007ff0:	21000128 	cmpgeui	r4,r4,4
 8007ff4:	3abfff15 	stw	r10,-4(r7)
 8007ff8:	4a400104 	addi	r9,r9,4
 8007ffc:	203ff81e 	bne	r4,zero,8007fe0 <memmove+0xd0>
 8008000:	413fff04 	addi	r4,r8,-4
 8008004:	2008d0ba 	srli	r4,r4,2
 8008008:	318000cc 	andi	r6,r6,3
 800800c:	21000044 	addi	r4,r4,1
 8008010:	200890ba 	slli	r4,r4,2
 8008014:	1907883a 	add	r3,r3,r4
 8008018:	290b883a 	add	r5,r5,r4
 800801c:	003fcb06 	br	8007f4c <memmove+0x3c>
 8008020:	f800283a 	ret
 8008024:	31ffffc4 	addi	r7,r6,-1
 8008028:	1007883a 	mov	r3,r2
 800802c:	003fc906 	br	8007f54 <memmove+0x44>
 8008030:	f800283a 	ret
 8008034:	400d883a 	mov	r6,r8
 8008038:	003fc406 	br	8007f4c <memmove+0x3c>

0800803c <memset>:
 800803c:	20c000cc 	andi	r3,r4,3
 8008040:	2005883a 	mov	r2,r4
 8008044:	18003626 	beq	r3,zero,8008120 <memset+0xe4>
 8008048:	31ffffc4 	addi	r7,r6,-1
 800804c:	30003326 	beq	r6,zero,800811c <memset+0xe0>
 8008050:	2811883a 	mov	r8,r5
 8008054:	2007883a 	mov	r3,r4
 8008058:	00000306 	br	8008068 <memset+0x2c>
 800805c:	39ffffc4 	addi	r7,r7,-1
 8008060:	39bfffe0 	cmpeqi	r6,r7,-1
 8008064:	30002d1e 	bne	r6,zero,800811c <memset+0xe0>
 8008068:	18c00044 	addi	r3,r3,1
 800806c:	198000cc 	andi	r6,r3,3
 8008070:	1a3fffc5 	stb	r8,-1(r3)
 8008074:	303ff91e 	bne	r6,zero,800805c <memset+0x20>
 8008078:	39000130 	cmpltui	r4,r7,4
 800807c:	2000221e 	bne	r4,zero,8008108 <memset+0xcc>
 8008080:	29003fcc 	andi	r4,r5,255
 8008084:	200c923a 	slli	r6,r4,8
 8008088:	3a000430 	cmpltui	r8,r7,16
 800808c:	3108b03a 	or	r4,r6,r4
 8008090:	200c943a 	slli	r6,r4,16
 8008094:	310cb03a 	or	r6,r6,r4
 8008098:	40000e1e 	bne	r8,zero,80080d4 <memset+0x98>
 800809c:	393ffc04 	addi	r4,r7,-16
 80080a0:	2008d13a 	srli	r4,r4,4
 80080a4:	21000044 	addi	r4,r4,1
 80080a8:	2008913a 	slli	r4,r4,4
 80080ac:	1909883a 	add	r4,r3,r4
 80080b0:	19800015 	stw	r6,0(r3)
 80080b4:	19800115 	stw	r6,4(r3)
 80080b8:	19800215 	stw	r6,8(r3)
 80080bc:	19800315 	stw	r6,12(r3)
 80080c0:	18c00404 	addi	r3,r3,16
 80080c4:	20fffa1e 	bne	r4,r3,80080b0 <memset+0x74>
 80080c8:	3900030c 	andi	r4,r7,12
 80080cc:	39c003cc 	andi	r7,r7,15
 80080d0:	20000d26 	beq	r4,zero,8008108 <memset+0xcc>
 80080d4:	1811883a 	mov	r8,r3
 80080d8:	42000104 	addi	r8,r8,4
 80080dc:	3a09c83a 	sub	r4,r7,r8
 80080e0:	1909883a 	add	r4,r3,r4
 80080e4:	21000128 	cmpgeui	r4,r4,4
 80080e8:	41bfff15 	stw	r6,-4(r8)
 80080ec:	203ffa1e 	bne	r4,zero,80080d8 <memset+0x9c>
 80080f0:	393fff04 	addi	r4,r7,-4
 80080f4:	2008d0ba 	srli	r4,r4,2
 80080f8:	39c000cc 	andi	r7,r7,3
 80080fc:	21000044 	addi	r4,r4,1
 8008100:	200890ba 	slli	r4,r4,2
 8008104:	1907883a 	add	r3,r3,r4
 8008108:	38000426 	beq	r7,zero,800811c <memset+0xe0>
 800810c:	19cf883a 	add	r7,r3,r7
 8008110:	18c00044 	addi	r3,r3,1
 8008114:	197fffc5 	stb	r5,-1(r3)
 8008118:	38fffd1e 	bne	r7,r3,8008110 <memset+0xd4>
 800811c:	f800283a 	ret
 8008120:	2007883a 	mov	r3,r4
 8008124:	300f883a 	mov	r7,r6
 8008128:	003fd306 	br	8008078 <memset+0x3c>

0800812c <_Balloc>:
 800812c:	20801317 	ldw	r2,76(r4)
 8008130:	defffc04 	addi	sp,sp,-16
 8008134:	dc400115 	stw	r17,4(sp)
 8008138:	dc000015 	stw	r16,0(sp)
 800813c:	dfc00315 	stw	ra,12(sp)
 8008140:	dc800215 	stw	r18,8(sp)
 8008144:	2021883a 	mov	r16,r4
 8008148:	2823883a 	mov	r17,r5
 800814c:	10000e26 	beq	r2,zero,8008188 <_Balloc+0x5c>
 8008150:	880690ba 	slli	r3,r17,2
 8008154:	10c7883a 	add	r3,r2,r3
 8008158:	18800017 	ldw	r2,0(r3)
 800815c:	10001126 	beq	r2,zero,80081a4 <_Balloc+0x78>
 8008160:	11000017 	ldw	r4,0(r2)
 8008164:	19000015 	stw	r4,0(r3)
 8008168:	10000415 	stw	zero,16(r2)
 800816c:	10000315 	stw	zero,12(r2)
 8008170:	dfc00317 	ldw	ra,12(sp)
 8008174:	dc800217 	ldw	r18,8(sp)
 8008178:	dc400117 	ldw	r17,4(sp)
 800817c:	dc000017 	ldw	r16,0(sp)
 8008180:	dec00404 	addi	sp,sp,16
 8008184:	f800283a 	ret
 8008188:	01800844 	movi	r6,33
 800818c:	01400104 	movi	r5,4
 8008190:	800b0780 	call	800b078 <_calloc_r>
 8008194:	80801315 	stw	r2,76(r16)
 8008198:	103fed1e 	bne	r2,zero,8008150 <_Balloc+0x24>
 800819c:	0005883a 	mov	r2,zero
 80081a0:	003ff306 	br	8008170 <_Balloc+0x44>
 80081a4:	04800044 	movi	r18,1
 80081a8:	9464983a 	sll	r18,r18,r17
 80081ac:	01400044 	movi	r5,1
 80081b0:	8009883a 	mov	r4,r16
 80081b4:	91800144 	addi	r6,r18,5
 80081b8:	300c90ba 	slli	r6,r6,2
 80081bc:	800b0780 	call	800b078 <_calloc_r>
 80081c0:	103ff626 	beq	r2,zero,800819c <_Balloc+0x70>
 80081c4:	14400115 	stw	r17,4(r2)
 80081c8:	14800215 	stw	r18,8(r2)
 80081cc:	003fe606 	br	8008168 <_Balloc+0x3c>

080081d0 <_Bfree>:
 80081d0:	28000726 	beq	r5,zero,80081f0 <_Bfree+0x20>
 80081d4:	28c00117 	ldw	r3,4(r5)
 80081d8:	20801317 	ldw	r2,76(r4)
 80081dc:	180690ba 	slli	r3,r3,2
 80081e0:	10c5883a 	add	r2,r2,r3
 80081e4:	10c00017 	ldw	r3,0(r2)
 80081e8:	28c00015 	stw	r3,0(r5)
 80081ec:	11400015 	stw	r5,0(r2)
 80081f0:	f800283a 	ret

080081f4 <__multadd>:
 80081f4:	defff704 	addi	sp,sp,-36
 80081f8:	dc800215 	stw	r18,8(sp)
 80081fc:	2c800417 	ldw	r18,16(r5)
 8008200:	ddc00715 	stw	r23,28(sp)
 8008204:	dd800615 	stw	r22,24(sp)
 8008208:	dd400515 	stw	r21,20(sp)
 800820c:	dd000415 	stw	r20,16(sp)
 8008210:	dcc00315 	stw	r19,12(sp)
 8008214:	dc400115 	stw	r17,4(sp)
 8008218:	dfc00815 	stw	ra,32(sp)
 800821c:	dc000015 	stw	r16,0(sp)
 8008220:	2827883a 	mov	r19,r5
 8008224:	2029883a 	mov	r20,r4
 8008228:	302b883a 	mov	r21,r6
 800822c:	3823883a 	mov	r17,r7
 8008230:	2d800504 	addi	r22,r5,20
 8008234:	002f883a 	mov	r23,zero
 8008238:	b4000017 	ldw	r16,0(r22)
 800823c:	a80b883a 	mov	r5,r21
 8008240:	b5800104 	addi	r22,r22,4
 8008244:	813fffcc 	andi	r4,r16,65535
 8008248:	800ce440 	call	800ce44 <__mulsi3>
 800824c:	8008d43a 	srli	r4,r16,16
 8008250:	a80b883a 	mov	r5,r21
 8008254:	1461883a 	add	r16,r2,r17
 8008258:	800ce440 	call	800ce44 <__mulsi3>
 800825c:	800ed43a 	srli	r7,r16,16
 8008260:	843fffcc 	andi	r16,r16,65535
 8008264:	bdc00044 	addi	r23,r23,1
 8008268:	11c5883a 	add	r2,r2,r7
 800826c:	1006943a 	slli	r3,r2,16
 8008270:	1022d43a 	srli	r17,r2,16
 8008274:	1c21883a 	add	r16,r3,r16
 8008278:	b43fff15 	stw	r16,-4(r22)
 800827c:	bcbfee16 	blt	r23,r18,8008238 <__multadd+0x44>
 8008280:	88000826 	beq	r17,zero,80082a4 <__multadd+0xb0>
 8008284:	98800217 	ldw	r2,8(r19)
 8008288:	9080120e 	bge	r18,r2,80082d4 <__multadd+0xe0>
 800828c:	90800144 	addi	r2,r18,5
 8008290:	100490ba 	slli	r2,r2,2
 8008294:	94800044 	addi	r18,r18,1
 8008298:	9885883a 	add	r2,r19,r2
 800829c:	14400015 	stw	r17,0(r2)
 80082a0:	9c800415 	stw	r18,16(r19)
 80082a4:	9805883a 	mov	r2,r19
 80082a8:	dfc00817 	ldw	ra,32(sp)
 80082ac:	ddc00717 	ldw	r23,28(sp)
 80082b0:	dd800617 	ldw	r22,24(sp)
 80082b4:	dd400517 	ldw	r21,20(sp)
 80082b8:	dd000417 	ldw	r20,16(sp)
 80082bc:	dcc00317 	ldw	r19,12(sp)
 80082c0:	dc800217 	ldw	r18,8(sp)
 80082c4:	dc400117 	ldw	r17,4(sp)
 80082c8:	dc000017 	ldw	r16,0(sp)
 80082cc:	dec00904 	addi	sp,sp,36
 80082d0:	f800283a 	ret
 80082d4:	99400117 	ldw	r5,4(r19)
 80082d8:	a009883a 	mov	r4,r20
 80082dc:	29400044 	addi	r5,r5,1
 80082e0:	800812c0 	call	800812c <_Balloc>
 80082e4:	1021883a 	mov	r16,r2
 80082e8:	10001226 	beq	r2,zero,8008334 <__multadd+0x140>
 80082ec:	99800417 	ldw	r6,16(r19)
 80082f0:	99400304 	addi	r5,r19,12
 80082f4:	11000304 	addi	r4,r2,12
 80082f8:	31800084 	addi	r6,r6,2
 80082fc:	300c90ba 	slli	r6,r6,2
 8008300:	8007e100 	call	8007e10 <memcpy>
 8008304:	98000926 	beq	r19,zero,800832c <__multadd+0x138>
 8008308:	98c00117 	ldw	r3,4(r19)
 800830c:	a0801317 	ldw	r2,76(r20)
 8008310:	180690ba 	slli	r3,r3,2
 8008314:	10c5883a 	add	r2,r2,r3
 8008318:	10c00017 	ldw	r3,0(r2)
 800831c:	98c00015 	stw	r3,0(r19)
 8008320:	14c00015 	stw	r19,0(r2)
 8008324:	8027883a 	mov	r19,r16
 8008328:	003fd806 	br	800828c <__multadd+0x98>
 800832c:	8027883a 	mov	r19,r16
 8008330:	003fd606 	br	800828c <__multadd+0x98>
 8008334:	01c20074 	movhi	r7,2049
 8008338:	01020074 	movhi	r4,2049
 800833c:	39c99104 	addi	r7,r7,9796
 8008340:	000d883a 	mov	r6,zero
 8008344:	01402d44 	movi	r5,181
 8008348:	2109a604 	addi	r4,r4,9880
 800834c:	800b0000 	call	800b000 <__assert_func>

08008350 <__s2b>:
 8008350:	defff904 	addi	sp,sp,-28
 8008354:	dc800215 	stw	r18,8(sp)
 8008358:	dc000015 	stw	r16,0(sp)
 800835c:	2025883a 	mov	r18,r4
 8008360:	2821883a 	mov	r16,r5
 8008364:	39000204 	addi	r4,r7,8
 8008368:	01400244 	movi	r5,9
 800836c:	dcc00315 	stw	r19,12(sp)
 8008370:	dc400115 	stw	r17,4(sp)
 8008374:	dfc00615 	stw	ra,24(sp)
 8008378:	3823883a 	mov	r17,r7
 800837c:	dd400515 	stw	r21,20(sp)
 8008380:	dd000415 	stw	r20,16(sp)
 8008384:	3027883a 	mov	r19,r6
 8008388:	800cc900 	call	800cc90 <__divsi3>
 800838c:	88c00290 	cmplti	r3,r17,10
 8008390:	1800341e 	bne	r3,zero,8008464 <__s2b+0x114>
 8008394:	00c00044 	movi	r3,1
 8008398:	000b883a 	mov	r5,zero
 800839c:	18c7883a 	add	r3,r3,r3
 80083a0:	29400044 	addi	r5,r5,1
 80083a4:	18bffd16 	blt	r3,r2,800839c <__s2b+0x4c>
 80083a8:	9009883a 	mov	r4,r18
 80083ac:	800812c0 	call	800812c <_Balloc>
 80083b0:	100b883a 	mov	r5,r2
 80083b4:	10002d26 	beq	r2,zero,800846c <__s2b+0x11c>
 80083b8:	d8800717 	ldw	r2,28(sp)
 80083bc:	28800515 	stw	r2,20(r5)
 80083c0:	00800044 	movi	r2,1
 80083c4:	28800415 	stw	r2,16(r5)
 80083c8:	98800290 	cmplti	r2,r19,10
 80083cc:	1000221e 	bne	r2,zero,8008458 <__s2b+0x108>
 80083d0:	85400244 	addi	r21,r16,9
 80083d4:	a829883a 	mov	r20,r21
 80083d8:	84e1883a 	add	r16,r16,r19
 80083dc:	a1c00007 	ldb	r7,0(r20)
 80083e0:	01800284 	movi	r6,10
 80083e4:	9009883a 	mov	r4,r18
 80083e8:	39fff404 	addi	r7,r7,-48
 80083ec:	80081f40 	call	80081f4 <__multadd>
 80083f0:	a5000044 	addi	r20,r20,1
 80083f4:	100b883a 	mov	r5,r2
 80083f8:	a43ff81e 	bne	r20,r16,80083dc <__s2b+0x8c>
 80083fc:	9c3ffe04 	addi	r16,r19,-8
 8008400:	ac21883a 	add	r16,r21,r16
 8008404:	9c400a0e 	bge	r19,r17,8008430 <__s2b+0xe0>
 8008408:	8ce3c83a 	sub	r17,r17,r19
 800840c:	8463883a 	add	r17,r16,r17
 8008410:	81c00007 	ldb	r7,0(r16)
 8008414:	01800284 	movi	r6,10
 8008418:	9009883a 	mov	r4,r18
 800841c:	39fff404 	addi	r7,r7,-48
 8008420:	80081f40 	call	80081f4 <__multadd>
 8008424:	84000044 	addi	r16,r16,1
 8008428:	100b883a 	mov	r5,r2
 800842c:	8c3ff81e 	bne	r17,r16,8008410 <__s2b+0xc0>
 8008430:	2805883a 	mov	r2,r5
 8008434:	dfc00617 	ldw	ra,24(sp)
 8008438:	dd400517 	ldw	r21,20(sp)
 800843c:	dd000417 	ldw	r20,16(sp)
 8008440:	dcc00317 	ldw	r19,12(sp)
 8008444:	dc800217 	ldw	r18,8(sp)
 8008448:	dc400117 	ldw	r17,4(sp)
 800844c:	dc000017 	ldw	r16,0(sp)
 8008450:	dec00704 	addi	sp,sp,28
 8008454:	f800283a 	ret
 8008458:	84000284 	addi	r16,r16,10
 800845c:	04c00244 	movi	r19,9
 8008460:	003fe806 	br	8008404 <__s2b+0xb4>
 8008464:	000b883a 	mov	r5,zero
 8008468:	003fcf06 	br	80083a8 <__s2b+0x58>
 800846c:	01c20074 	movhi	r7,2049
 8008470:	01020074 	movhi	r4,2049
 8008474:	39c99104 	addi	r7,r7,9796
 8008478:	000d883a 	mov	r6,zero
 800847c:	01403384 	movi	r5,206
 8008480:	2109a604 	addi	r4,r4,9880
 8008484:	800b0000 	call	800b000 <__assert_func>

08008488 <__hi0bits>:
 8008488:	20bfffec 	andhi	r2,r4,65535
 800848c:	1000131e 	bne	r2,zero,80084dc <__hi0bits+0x54>
 8008490:	2008943a 	slli	r4,r4,16
 8008494:	00800404 	movi	r2,16
 8008498:	20ffc02c 	andhi	r3,r4,65280
 800849c:	1800021e 	bne	r3,zero,80084a8 <__hi0bits+0x20>
 80084a0:	2008923a 	slli	r4,r4,8
 80084a4:	10800204 	addi	r2,r2,8
 80084a8:	20fc002c 	andhi	r3,r4,61440
 80084ac:	1800021e 	bne	r3,zero,80084b8 <__hi0bits+0x30>
 80084b0:	2008913a 	slli	r4,r4,4
 80084b4:	10800104 	addi	r2,r2,4
 80084b8:	20f0002c 	andhi	r3,r4,49152
 80084bc:	1800021e 	bne	r3,zero,80084c8 <__hi0bits+0x40>
 80084c0:	200890ba 	slli	r4,r4,2
 80084c4:	10800084 	addi	r2,r2,2
 80084c8:	20000316 	blt	r4,zero,80084d8 <__hi0bits+0x50>
 80084cc:	2110002c 	andhi	r4,r4,16384
 80084d0:	10800044 	addi	r2,r2,1
 80084d4:	20000326 	beq	r4,zero,80084e4 <__hi0bits+0x5c>
 80084d8:	f800283a 	ret
 80084dc:	0005883a 	mov	r2,zero
 80084e0:	003fed06 	br	8008498 <__hi0bits+0x10>
 80084e4:	00800804 	movi	r2,32
 80084e8:	f800283a 	ret

080084ec <__lo0bits>:
 80084ec:	20c00017 	ldw	r3,0(r4)
 80084f0:	188001cc 	andi	r2,r3,7
 80084f4:	10000826 	beq	r2,zero,8008518 <__lo0bits+0x2c>
 80084f8:	1880004c 	andi	r2,r3,1
 80084fc:	10001f1e 	bne	r2,zero,800857c <__lo0bits+0x90>
 8008500:	1880008c 	andi	r2,r3,2
 8008504:	10002126 	beq	r2,zero,800858c <__lo0bits+0xa0>
 8008508:	1806d07a 	srli	r3,r3,1
 800850c:	00800044 	movi	r2,1
 8008510:	20c00015 	stw	r3,0(r4)
 8008514:	f800283a 	ret
 8008518:	18bfffcc 	andi	r2,r3,65535
 800851c:	10001426 	beq	r2,zero,8008570 <__lo0bits+0x84>
 8008520:	0005883a 	mov	r2,zero
 8008524:	19403fcc 	andi	r5,r3,255
 8008528:	2800021e 	bne	r5,zero,8008534 <__lo0bits+0x48>
 800852c:	1806d23a 	srli	r3,r3,8
 8008530:	10800204 	addi	r2,r2,8
 8008534:	194003cc 	andi	r5,r3,15
 8008538:	2800021e 	bne	r5,zero,8008544 <__lo0bits+0x58>
 800853c:	1806d13a 	srli	r3,r3,4
 8008540:	10800104 	addi	r2,r2,4
 8008544:	194000cc 	andi	r5,r3,3
 8008548:	2800021e 	bne	r5,zero,8008554 <__lo0bits+0x68>
 800854c:	1806d0ba 	srli	r3,r3,2
 8008550:	10800084 	addi	r2,r2,2
 8008554:	1940004c 	andi	r5,r3,1
 8008558:	2800031e 	bne	r5,zero,8008568 <__lo0bits+0x7c>
 800855c:	1806d07a 	srli	r3,r3,1
 8008560:	10800044 	addi	r2,r2,1
 8008564:	18000726 	beq	r3,zero,8008584 <__lo0bits+0x98>
 8008568:	20c00015 	stw	r3,0(r4)
 800856c:	f800283a 	ret
 8008570:	1806d43a 	srli	r3,r3,16
 8008574:	00800404 	movi	r2,16
 8008578:	003fea06 	br	8008524 <__lo0bits+0x38>
 800857c:	0005883a 	mov	r2,zero
 8008580:	f800283a 	ret
 8008584:	00800804 	movi	r2,32
 8008588:	f800283a 	ret
 800858c:	1806d0ba 	srli	r3,r3,2
 8008590:	00800084 	movi	r2,2
 8008594:	20c00015 	stw	r3,0(r4)
 8008598:	f800283a 	ret

0800859c <__i2b>:
 800859c:	20c01317 	ldw	r3,76(r4)
 80085a0:	defffd04 	addi	sp,sp,-12
 80085a4:	dc400115 	stw	r17,4(sp)
 80085a8:	dc000015 	stw	r16,0(sp)
 80085ac:	dfc00215 	stw	ra,8(sp)
 80085b0:	2021883a 	mov	r16,r4
 80085b4:	2823883a 	mov	r17,r5
 80085b8:	18000d26 	beq	r3,zero,80085f0 <__i2b+0x54>
 80085bc:	18800117 	ldw	r2,4(r3)
 80085c0:	10001826 	beq	r2,zero,8008624 <__i2b+0x88>
 80085c4:	11000017 	ldw	r4,0(r2)
 80085c8:	19000115 	stw	r4,4(r3)
 80085cc:	00c00044 	movi	r3,1
 80085d0:	10000315 	stw	zero,12(r2)
 80085d4:	14400515 	stw	r17,20(r2)
 80085d8:	10c00415 	stw	r3,16(r2)
 80085dc:	dfc00217 	ldw	ra,8(sp)
 80085e0:	dc400117 	ldw	r17,4(sp)
 80085e4:	dc000017 	ldw	r16,0(sp)
 80085e8:	dec00304 	addi	sp,sp,12
 80085ec:	f800283a 	ret
 80085f0:	01800844 	movi	r6,33
 80085f4:	01400104 	movi	r5,4
 80085f8:	800b0780 	call	800b078 <_calloc_r>
 80085fc:	80801315 	stw	r2,76(r16)
 8008600:	1007883a 	mov	r3,r2
 8008604:	103fed1e 	bne	r2,zero,80085bc <__i2b+0x20>
 8008608:	01c20074 	movhi	r7,2049
 800860c:	01020074 	movhi	r4,2049
 8008610:	39c99104 	addi	r7,r7,9796
 8008614:	000d883a 	mov	r6,zero
 8008618:	01405004 	movi	r5,320
 800861c:	2109a604 	addi	r4,r4,9880
 8008620:	800b0000 	call	800b000 <__assert_func>
 8008624:	01800704 	movi	r6,28
 8008628:	01400044 	movi	r5,1
 800862c:	8009883a 	mov	r4,r16
 8008630:	800b0780 	call	800b078 <_calloc_r>
 8008634:	103ff426 	beq	r2,zero,8008608 <__i2b+0x6c>
 8008638:	00c00044 	movi	r3,1
 800863c:	10c00115 	stw	r3,4(r2)
 8008640:	00c00084 	movi	r3,2
 8008644:	10c00215 	stw	r3,8(r2)
 8008648:	003fe006 	br	80085cc <__i2b+0x30>

0800864c <__multiply>:
 800864c:	defff004 	addi	sp,sp,-64
 8008650:	dd800c15 	stw	r22,48(sp)
 8008654:	dc400715 	stw	r17,28(sp)
 8008658:	2d800417 	ldw	r22,16(r5)
 800865c:	34400417 	ldw	r17,16(r6)
 8008660:	dc800815 	stw	r18,32(sp)
 8008664:	dc000615 	stw	r16,24(sp)
 8008668:	dfc00f15 	stw	ra,60(sp)
 800866c:	df000e15 	stw	fp,56(sp)
 8008670:	ddc00d15 	stw	r23,52(sp)
 8008674:	dd400b15 	stw	r21,44(sp)
 8008678:	dd000a15 	stw	r20,40(sp)
 800867c:	dcc00915 	stw	r19,36(sp)
 8008680:	2825883a 	mov	r18,r5
 8008684:	3021883a 	mov	r16,r6
 8008688:	b4400516 	blt	r22,r17,80086a0 <__multiply+0x54>
 800868c:	8807883a 	mov	r3,r17
 8008690:	2821883a 	mov	r16,r5
 8008694:	b023883a 	mov	r17,r22
 8008698:	3025883a 	mov	r18,r6
 800869c:	182d883a 	mov	r22,r3
 80086a0:	80800217 	ldw	r2,8(r16)
 80086a4:	8d87883a 	add	r3,r17,r22
 80086a8:	d8c00015 	stw	r3,0(sp)
 80086ac:	81400117 	ldw	r5,4(r16)
 80086b0:	10c0010e 	bge	r2,r3,80086b8 <__multiply+0x6c>
 80086b4:	29400044 	addi	r5,r5,1
 80086b8:	800812c0 	call	800812c <_Balloc>
 80086bc:	d8800515 	stw	r2,20(sp)
 80086c0:	10008c26 	beq	r2,zero,80088f4 <__multiply+0x2a8>
 80086c4:	d8800017 	ldw	r2,0(sp)
 80086c8:	102690ba 	slli	r19,r2,2
 80086cc:	d8800517 	ldw	r2,20(sp)
 80086d0:	15000504 	addi	r20,r2,20
 80086d4:	a4c5883a 	add	r2,r20,r19
 80086d8:	d8800115 	stw	r2,4(sp)
 80086dc:	a0800a2e 	bgeu	r20,r2,8008708 <__multiply+0xbc>
 80086e0:	d8800117 	ldw	r2,4(sp)
 80086e4:	d8c00517 	ldw	r3,20(sp)
 80086e8:	000b883a 	mov	r5,zero
 80086ec:	a009883a 	mov	r4,r20
 80086f0:	10cdc83a 	sub	r6,r2,r3
 80086f4:	31bffac4 	addi	r6,r6,-21
 80086f8:	300cd0ba 	srli	r6,r6,2
 80086fc:	31800044 	addi	r6,r6,1
 8008700:	300c90ba 	slli	r6,r6,2
 8008704:	800803c0 	call	800803c <memset>
 8008708:	b02c90ba 	slli	r22,r22,2
 800870c:	882290ba 	slli	r17,r17,2
 8008710:	94800504 	addi	r18,r18,20
 8008714:	80800504 	addi	r2,r16,20
 8008718:	9587883a 	add	r3,r18,r22
 800871c:	d8800315 	stw	r2,12(sp)
 8008720:	d8c00215 	stw	r3,8(sp)
 8008724:	1463883a 	add	r17,r2,r17
 8008728:	90c0542e 	bgeu	r18,r3,800887c <__multiply+0x230>
 800872c:	80800544 	addi	r2,r16,21
 8008730:	88806d36 	bltu	r17,r2,80088e8 <__multiply+0x29c>
 8008734:	8c05c83a 	sub	r2,r17,r16
 8008738:	10bffac4 	addi	r2,r2,-21
 800873c:	1004d0ba 	srli	r2,r2,2
 8008740:	10800044 	addi	r2,r2,1
 8008744:	100490ba 	slli	r2,r2,2
 8008748:	d8800415 	stw	r2,16(sp)
 800874c:	00000606 	br	8008768 <__multiply+0x11c>
 8008750:	102ad43a 	srli	r21,r2,16
 8008754:	a800271e 	bne	r21,zero,80087f4 <__multiply+0x1a8>
 8008758:	d8800217 	ldw	r2,8(sp)
 800875c:	94800104 	addi	r18,r18,4
 8008760:	a5000104 	addi	r20,r20,4
 8008764:	9080452e 	bgeu	r18,r2,800887c <__multiply+0x230>
 8008768:	90800017 	ldw	r2,0(r18)
 800876c:	15ffffcc 	andi	r23,r2,65535
 8008770:	b83ff726 	beq	r23,zero,8008750 <__multiply+0x104>
 8008774:	dd400317 	ldw	r21,12(sp)
 8008778:	a02d883a 	mov	r22,r20
 800877c:	0027883a 	mov	r19,zero
 8008780:	af000017 	ldw	fp,0(r21)
 8008784:	b4000017 	ldw	r16,0(r22)
 8008788:	b80b883a 	mov	r5,r23
 800878c:	e13fffcc 	andi	r4,fp,65535
 8008790:	800ce440 	call	800ce44 <__mulsi3>
 8008794:	e008d43a 	srli	r4,fp,16
 8008798:	823fffcc 	andi	r8,r16,65535
 800879c:	1205883a 	add	r2,r2,r8
 80087a0:	b80b883a 	mov	r5,r23
 80087a4:	14e7883a 	add	r19,r2,r19
 80087a8:	8020d43a 	srli	r16,r16,16
 80087ac:	800ce440 	call	800ce44 <__mulsi3>
 80087b0:	9808d43a 	srli	r4,r19,16
 80087b4:	1405883a 	add	r2,r2,r16
 80087b8:	98ffffcc 	andi	r3,r19,65535
 80087bc:	1105883a 	add	r2,r2,r4
 80087c0:	1008943a 	slli	r4,r2,16
 80087c4:	b5800104 	addi	r22,r22,4
 80087c8:	ad400104 	addi	r21,r21,4
 80087cc:	20c6b03a 	or	r3,r4,r3
 80087d0:	b0ffff15 	stw	r3,-4(r22)
 80087d4:	1026d43a 	srli	r19,r2,16
 80087d8:	ac7fe936 	bltu	r21,r17,8008780 <__multiply+0x134>
 80087dc:	d8800417 	ldw	r2,16(sp)
 80087e0:	a085883a 	add	r2,r20,r2
 80087e4:	14c00015 	stw	r19,0(r2)
 80087e8:	90800017 	ldw	r2,0(r18)
 80087ec:	102ad43a 	srli	r21,r2,16
 80087f0:	a83fd926 	beq	r21,zero,8008758 <__multiply+0x10c>
 80087f4:	a5c00017 	ldw	r23,0(r20)
 80087f8:	dd800317 	ldw	r22,12(sp)
 80087fc:	a027883a 	mov	r19,r20
 8008800:	b821883a 	mov	r16,r23
 8008804:	0039883a 	mov	fp,zero
 8008808:	b100000b 	ldhu	r4,0(r22)
 800880c:	a80b883a 	mov	r5,r21
 8008810:	9cc00104 	addi	r19,r19,4
 8008814:	800ce440 	call	800ce44 <__mulsi3>
 8008818:	800cd43a 	srli	r6,r16,16
 800881c:	b8ffffcc 	andi	r3,r23,65535
 8008820:	b5800104 	addi	r22,r22,4
 8008824:	118d883a 	add	r6,r2,r6
 8008828:	3739883a 	add	fp,r6,fp
 800882c:	e004943a 	slli	r2,fp,16
 8008830:	9c000017 	ldw	r16,0(r19)
 8008834:	a80b883a 	mov	r5,r21
 8008838:	10c6b03a 	or	r3,r2,r3
 800883c:	98ffff15 	stw	r3,-4(r19)
 8008840:	b13fff8b 	ldhu	r4,-2(r22)
 8008844:	800ce440 	call	800ce44 <__mulsi3>
 8008848:	e00cd43a 	srli	r6,fp,16
 800884c:	80ffffcc 	andi	r3,r16,65535
 8008850:	10c7883a 	add	r3,r2,r3
 8008854:	19af883a 	add	r23,r3,r6
 8008858:	b838d43a 	srli	fp,r23,16
 800885c:	b47fea36 	bltu	r22,r17,8008808 <__multiply+0x1bc>
 8008860:	d8800417 	ldw	r2,16(sp)
 8008864:	94800104 	addi	r18,r18,4
 8008868:	a085883a 	add	r2,r20,r2
 800886c:	15c00015 	stw	r23,0(r2)
 8008870:	d8800217 	ldw	r2,8(sp)
 8008874:	a5000104 	addi	r20,r20,4
 8008878:	90bfbb36 	bltu	r18,r2,8008768 <__multiply+0x11c>
 800887c:	d8800017 	ldw	r2,0(sp)
 8008880:	00800516 	blt	zero,r2,8008898 <__multiply+0x24c>
 8008884:	00000906 	br	80088ac <__multiply+0x260>
 8008888:	d8800017 	ldw	r2,0(sp)
 800888c:	10bfffc4 	addi	r2,r2,-1
 8008890:	d8800015 	stw	r2,0(sp)
 8008894:	10000526 	beq	r2,zero,80088ac <__multiply+0x260>
 8008898:	d8c00117 	ldw	r3,4(sp)
 800889c:	18bfff17 	ldw	r2,-4(r3)
 80088a0:	18ffff04 	addi	r3,r3,-4
 80088a4:	d8c00115 	stw	r3,4(sp)
 80088a8:	103ff726 	beq	r2,zero,8008888 <__multiply+0x23c>
 80088ac:	d8800517 	ldw	r2,20(sp)
 80088b0:	d8c00017 	ldw	r3,0(sp)
 80088b4:	10c00415 	stw	r3,16(r2)
 80088b8:	dfc00f17 	ldw	ra,60(sp)
 80088bc:	df000e17 	ldw	fp,56(sp)
 80088c0:	ddc00d17 	ldw	r23,52(sp)
 80088c4:	dd800c17 	ldw	r22,48(sp)
 80088c8:	dd400b17 	ldw	r21,44(sp)
 80088cc:	dd000a17 	ldw	r20,40(sp)
 80088d0:	dcc00917 	ldw	r19,36(sp)
 80088d4:	dc800817 	ldw	r18,32(sp)
 80088d8:	dc400717 	ldw	r17,28(sp)
 80088dc:	dc000617 	ldw	r16,24(sp)
 80088e0:	dec01004 	addi	sp,sp,64
 80088e4:	f800283a 	ret
 80088e8:	00800104 	movi	r2,4
 80088ec:	d8800415 	stw	r2,16(sp)
 80088f0:	003f9d06 	br	8008768 <__multiply+0x11c>
 80088f4:	01c20074 	movhi	r7,2049
 80088f8:	01020074 	movhi	r4,2049
 80088fc:	39c99104 	addi	r7,r7,9796
 8008900:	000d883a 	mov	r6,zero
 8008904:	01405744 	movi	r5,349
 8008908:	2109a604 	addi	r4,r4,9880
 800890c:	800b0000 	call	800b000 <__assert_func>

08008910 <__pow5mult>:
 8008910:	defffb04 	addi	sp,sp,-20
 8008914:	dcc00315 	stw	r19,12(sp)
 8008918:	dc000015 	stw	r16,0(sp)
 800891c:	dfc00415 	stw	ra,16(sp)
 8008920:	dc800215 	stw	r18,8(sp)
 8008924:	dc400115 	stw	r17,4(sp)
 8008928:	308000cc 	andi	r2,r6,3
 800892c:	3021883a 	mov	r16,r6
 8008930:	2027883a 	mov	r19,r4
 8008934:	10002d1e 	bne	r2,zero,80089ec <__pow5mult+0xdc>
 8008938:	2825883a 	mov	r18,r5
 800893c:	8021d0ba 	srai	r16,r16,2
 8008940:	80001926 	beq	r16,zero,80089a8 <__pow5mult+0x98>
 8008944:	9c401217 	ldw	r17,72(r19)
 8008948:	8800061e 	bne	r17,zero,8008964 <__pow5mult+0x54>
 800894c:	00002f06 	br	8008a0c <__pow5mult+0xfc>
 8008950:	8021d07a 	srai	r16,r16,1
 8008954:	80001426 	beq	r16,zero,80089a8 <__pow5mult+0x98>
 8008958:	88800017 	ldw	r2,0(r17)
 800895c:	10001a26 	beq	r2,zero,80089c8 <__pow5mult+0xb8>
 8008960:	1023883a 	mov	r17,r2
 8008964:	8080004c 	andi	r2,r16,1
 8008968:	103ff926 	beq	r2,zero,8008950 <__pow5mult+0x40>
 800896c:	880d883a 	mov	r6,r17
 8008970:	900b883a 	mov	r5,r18
 8008974:	9809883a 	mov	r4,r19
 8008978:	800864c0 	call	800864c <__multiply>
 800897c:	90001926 	beq	r18,zero,80089e4 <__pow5mult+0xd4>
 8008980:	91000117 	ldw	r4,4(r18)
 8008984:	98c01317 	ldw	r3,76(r19)
 8008988:	8021d07a 	srai	r16,r16,1
 800898c:	200890ba 	slli	r4,r4,2
 8008990:	1907883a 	add	r3,r3,r4
 8008994:	19000017 	ldw	r4,0(r3)
 8008998:	91000015 	stw	r4,0(r18)
 800899c:	1c800015 	stw	r18,0(r3)
 80089a0:	1025883a 	mov	r18,r2
 80089a4:	803fec1e 	bne	r16,zero,8008958 <__pow5mult+0x48>
 80089a8:	9005883a 	mov	r2,r18
 80089ac:	dfc00417 	ldw	ra,16(sp)
 80089b0:	dcc00317 	ldw	r19,12(sp)
 80089b4:	dc800217 	ldw	r18,8(sp)
 80089b8:	dc400117 	ldw	r17,4(sp)
 80089bc:	dc000017 	ldw	r16,0(sp)
 80089c0:	dec00504 	addi	sp,sp,20
 80089c4:	f800283a 	ret
 80089c8:	880d883a 	mov	r6,r17
 80089cc:	880b883a 	mov	r5,r17
 80089d0:	9809883a 	mov	r4,r19
 80089d4:	800864c0 	call	800864c <__multiply>
 80089d8:	88800015 	stw	r2,0(r17)
 80089dc:	10000015 	stw	zero,0(r2)
 80089e0:	003fdf06 	br	8008960 <__pow5mult+0x50>
 80089e4:	1025883a 	mov	r18,r2
 80089e8:	003fd906 	br	8008950 <__pow5mult+0x40>
 80089ec:	100490ba 	slli	r2,r2,2
 80089f0:	00c20074 	movhi	r3,2049
 80089f4:	000f883a 	mov	r7,zero
 80089f8:	10c7883a 	add	r3,r2,r3
 80089fc:	1989b517 	ldw	r6,9940(r3)
 8008a00:	80081f40 	call	80081f4 <__multadd>
 8008a04:	1025883a 	mov	r18,r2
 8008a08:	003fcc06 	br	800893c <__pow5mult+0x2c>
 8008a0c:	01400044 	movi	r5,1
 8008a10:	9809883a 	mov	r4,r19
 8008a14:	800812c0 	call	800812c <_Balloc>
 8008a18:	1023883a 	mov	r17,r2
 8008a1c:	10000726 	beq	r2,zero,8008a3c <__pow5mult+0x12c>
 8008a20:	00809c44 	movi	r2,625
 8008a24:	88800515 	stw	r2,20(r17)
 8008a28:	00800044 	movi	r2,1
 8008a2c:	88800415 	stw	r2,16(r17)
 8008a30:	9c401215 	stw	r17,72(r19)
 8008a34:	88000015 	stw	zero,0(r17)
 8008a38:	003fca06 	br	8008964 <__pow5mult+0x54>
 8008a3c:	01c20074 	movhi	r7,2049
 8008a40:	01020074 	movhi	r4,2049
 8008a44:	39c99104 	addi	r7,r7,9796
 8008a48:	000d883a 	mov	r6,zero
 8008a4c:	01405004 	movi	r5,320
 8008a50:	2109a604 	addi	r4,r4,9880
 8008a54:	800b0000 	call	800b000 <__assert_func>

08008a58 <__lshift>:
 8008a58:	defff804 	addi	sp,sp,-32
 8008a5c:	dd800615 	stw	r22,24(sp)
 8008a60:	dc000015 	stw	r16,0(sp)
 8008a64:	302dd17a 	srai	r22,r6,5
 8008a68:	2c000417 	ldw	r16,16(r5)
 8008a6c:	28800217 	ldw	r2,8(r5)
 8008a70:	dd000415 	stw	r20,16(sp)
 8008a74:	b421883a 	add	r16,r22,r16
 8008a78:	dcc00315 	stw	r19,12(sp)
 8008a7c:	dc800215 	stw	r18,8(sp)
 8008a80:	dc400115 	stw	r17,4(sp)
 8008a84:	dfc00715 	stw	ra,28(sp)
 8008a88:	dd400515 	stw	r21,20(sp)
 8008a8c:	85000044 	addi	r20,r16,1
 8008a90:	2827883a 	mov	r19,r5
 8008a94:	3025883a 	mov	r18,r6
 8008a98:	29400117 	ldw	r5,4(r5)
 8008a9c:	2023883a 	mov	r17,r4
 8008aa0:	1500030e 	bge	r2,r20,8008ab0 <__lshift+0x58>
 8008aa4:	1085883a 	add	r2,r2,r2
 8008aa8:	29400044 	addi	r5,r5,1
 8008aac:	153ffd16 	blt	r2,r20,8008aa4 <__lshift+0x4c>
 8008ab0:	8809883a 	mov	r4,r17
 8008ab4:	800812c0 	call	800812c <_Balloc>
 8008ab8:	102b883a 	mov	r21,r2
 8008abc:	10004126 	beq	r2,zero,8008bc4 <__lshift+0x16c>
 8008ac0:	11000504 	addi	r4,r2,20
 8008ac4:	0580050e 	bge	zero,r22,8008adc <__lshift+0x84>
 8008ac8:	b02c90ba 	slli	r22,r22,2
 8008acc:	000b883a 	mov	r5,zero
 8008ad0:	b00d883a 	mov	r6,r22
 8008ad4:	800803c0 	call	800803c <memset>
 8008ad8:	1589883a 	add	r4,r2,r22
 8008adc:	9a000417 	ldw	r8,16(r19)
 8008ae0:	98c00504 	addi	r3,r19,20
 8008ae4:	948007cc 	andi	r18,r18,31
 8008ae8:	401090ba 	slli	r8,r8,2
 8008aec:	1a11883a 	add	r8,r3,r8
 8008af0:	90002c26 	beq	r18,zero,8008ba4 <__lshift+0x14c>
 8008af4:	01400804 	movi	r5,32
 8008af8:	2c8bc83a 	sub	r5,r5,r18
 8008afc:	2005883a 	mov	r2,r4
 8008b00:	000f883a 	mov	r7,zero
 8008b04:	19800017 	ldw	r6,0(r3)
 8008b08:	10800104 	addi	r2,r2,4
 8008b0c:	18c00104 	addi	r3,r3,4
 8008b10:	348c983a 	sll	r6,r6,r18
 8008b14:	31ccb03a 	or	r6,r6,r7
 8008b18:	11bfff15 	stw	r6,-4(r2)
 8008b1c:	19bfff17 	ldw	r6,-4(r3)
 8008b20:	314ed83a 	srl	r7,r6,r5
 8008b24:	1a3ff736 	bltu	r3,r8,8008b04 <__lshift+0xac>
 8008b28:	98800544 	addi	r2,r19,21
 8008b2c:	40802336 	bltu	r8,r2,8008bbc <__lshift+0x164>
 8008b30:	44c7c83a 	sub	r3,r8,r19
 8008b34:	18fffac4 	addi	r3,r3,-21
 8008b38:	1806d0ba 	srli	r3,r3,2
 8008b3c:	18c00044 	addi	r3,r3,1
 8008b40:	180690ba 	slli	r3,r3,2
 8008b44:	20c9883a 	add	r4,r4,r3
 8008b48:	21c00015 	stw	r7,0(r4)
 8008b4c:	38000126 	beq	r7,zero,8008b54 <__lshift+0xfc>
 8008b50:	a021883a 	mov	r16,r20
 8008b54:	ac000415 	stw	r16,16(r21)
 8008b58:	98000726 	beq	r19,zero,8008b78 <__lshift+0x120>
 8008b5c:	98c00117 	ldw	r3,4(r19)
 8008b60:	88801317 	ldw	r2,76(r17)
 8008b64:	180690ba 	slli	r3,r3,2
 8008b68:	10c5883a 	add	r2,r2,r3
 8008b6c:	10c00017 	ldw	r3,0(r2)
 8008b70:	98c00015 	stw	r3,0(r19)
 8008b74:	14c00015 	stw	r19,0(r2)
 8008b78:	a805883a 	mov	r2,r21
 8008b7c:	dfc00717 	ldw	ra,28(sp)
 8008b80:	dd800617 	ldw	r22,24(sp)
 8008b84:	dd400517 	ldw	r21,20(sp)
 8008b88:	dd000417 	ldw	r20,16(sp)
 8008b8c:	dcc00317 	ldw	r19,12(sp)
 8008b90:	dc800217 	ldw	r18,8(sp)
 8008b94:	dc400117 	ldw	r17,4(sp)
 8008b98:	dc000017 	ldw	r16,0(sp)
 8008b9c:	dec00804 	addi	sp,sp,32
 8008ba0:	f800283a 	ret
 8008ba4:	18800017 	ldw	r2,0(r3)
 8008ba8:	18c00104 	addi	r3,r3,4
 8008bac:	21000104 	addi	r4,r4,4
 8008bb0:	20bfff15 	stw	r2,-4(r4)
 8008bb4:	1a3ffb36 	bltu	r3,r8,8008ba4 <__lshift+0x14c>
 8008bb8:	003fe606 	br	8008b54 <__lshift+0xfc>
 8008bbc:	00c00104 	movi	r3,4
 8008bc0:	003fe006 	br	8008b44 <__lshift+0xec>
 8008bc4:	01c20074 	movhi	r7,2049
 8008bc8:	01020074 	movhi	r4,2049
 8008bcc:	39c99104 	addi	r7,r7,9796
 8008bd0:	000d883a 	mov	r6,zero
 8008bd4:	01407644 	movi	r5,473
 8008bd8:	2109a604 	addi	r4,r4,9880
 8008bdc:	800b0000 	call	800b000 <__assert_func>

08008be0 <__mcmp>:
 8008be0:	21800417 	ldw	r6,16(r4)
 8008be4:	28c00417 	ldw	r3,16(r5)
 8008be8:	30c5c83a 	sub	r2,r6,r3
 8008bec:	30c00e1e 	bne	r6,r3,8008c28 <__mcmp+0x48>
 8008bf0:	180690ba 	slli	r3,r3,2
 8008bf4:	21c00504 	addi	r7,r4,20
 8008bf8:	29400504 	addi	r5,r5,20
 8008bfc:	38c9883a 	add	r4,r7,r3
 8008c00:	28c7883a 	add	r3,r5,r3
 8008c04:	00000106 	br	8008c0c <__mcmp+0x2c>
 8008c08:	3900082e 	bgeu	r7,r4,8008c2c <__mcmp+0x4c>
 8008c0c:	21bfff17 	ldw	r6,-4(r4)
 8008c10:	197fff17 	ldw	r5,-4(r3)
 8008c14:	213fff04 	addi	r4,r4,-4
 8008c18:	18ffff04 	addi	r3,r3,-4
 8008c1c:	317ffa26 	beq	r6,r5,8008c08 <__mcmp+0x28>
 8008c20:	3140032e 	bgeu	r6,r5,8008c30 <__mcmp+0x50>
 8008c24:	00bfffc4 	movi	r2,-1
 8008c28:	f800283a 	ret
 8008c2c:	f800283a 	ret
 8008c30:	00800044 	movi	r2,1
 8008c34:	f800283a 	ret

08008c38 <__mdiff>:
 8008c38:	28800417 	ldw	r2,16(r5)
 8008c3c:	30c00417 	ldw	r3,16(r6)
 8008c40:	defffc04 	addi	sp,sp,-16
 8008c44:	dc800215 	stw	r18,8(sp)
 8008c48:	dc400115 	stw	r17,4(sp)
 8008c4c:	dc000015 	stw	r16,0(sp)
 8008c50:	dfc00315 	stw	ra,12(sp)
 8008c54:	2823883a 	mov	r17,r5
 8008c58:	3021883a 	mov	r16,r6
 8008c5c:	10e5c83a 	sub	r18,r2,r3
 8008c60:	10c0641e 	bne	r2,r3,8008df4 <__mdiff+0x1bc>
 8008c64:	180c90ba 	slli	r6,r3,2
 8008c68:	29400504 	addi	r5,r5,20
 8008c6c:	80c00504 	addi	r3,r16,20
 8008c70:	2985883a 	add	r2,r5,r6
 8008c74:	1987883a 	add	r3,r3,r6
 8008c78:	00000106 	br	8008c80 <__mdiff+0x48>
 8008c7c:	2880642e 	bgeu	r5,r2,8008e10 <__mdiff+0x1d8>
 8008c80:	11bfff17 	ldw	r6,-4(r2)
 8008c84:	19ffff17 	ldw	r7,-4(r3)
 8008c88:	10bfff04 	addi	r2,r2,-4
 8008c8c:	18ffff04 	addi	r3,r3,-4
 8008c90:	31fffa26 	beq	r6,r7,8008c7c <__mdiff+0x44>
 8008c94:	31c05236 	bltu	r6,r7,8008de0 <__mdiff+0x1a8>
 8008c98:	89400117 	ldw	r5,4(r17)
 8008c9c:	800812c0 	call	800812c <_Balloc>
 8008ca0:	10006226 	beq	r2,zero,8008e2c <__mdiff+0x1f4>
 8008ca4:	8a400417 	ldw	r9,16(r17)
 8008ca8:	83000417 	ldw	r12,16(r16)
 8008cac:	8ac00504 	addi	r11,r17,20
 8008cb0:	481090ba 	slli	r8,r9,2
 8008cb4:	601890ba 	slli	r12,r12,2
 8008cb8:	81800504 	addi	r6,r16,20
 8008cbc:	13400504 	addi	r13,r2,20
 8008cc0:	14800315 	stw	r18,12(r2)
 8008cc4:	5a11883a 	add	r8,r11,r8
 8008cc8:	3319883a 	add	r12,r6,r12
 8008ccc:	681d883a 	mov	r14,r13
 8008cd0:	5815883a 	mov	r10,r11
 8008cd4:	0007883a 	mov	r3,zero
 8008cd8:	51000017 	ldw	r4,0(r10)
 8008cdc:	31c00017 	ldw	r7,0(r6)
 8008ce0:	73800104 	addi	r14,r14,4
 8008ce4:	217fffcc 	andi	r5,r4,65535
 8008ce8:	28cb883a 	add	r5,r5,r3
 8008cec:	38ffffcc 	andi	r3,r7,65535
 8008cf0:	28cbc83a 	sub	r5,r5,r3
 8008cf4:	380ed43a 	srli	r7,r7,16
 8008cf8:	2006d43a 	srli	r3,r4,16
 8008cfc:	2809d43a 	srai	r4,r5,16
 8008d00:	297fffcc 	andi	r5,r5,65535
 8008d04:	19c7c83a 	sub	r3,r3,r7
 8008d08:	1907883a 	add	r3,r3,r4
 8008d0c:	1808943a 	slli	r4,r3,16
 8008d10:	31800104 	addi	r6,r6,4
 8008d14:	1807d43a 	srai	r3,r3,16
 8008d18:	214ab03a 	or	r5,r4,r5
 8008d1c:	717fff15 	stw	r5,-4(r14)
 8008d20:	52800104 	addi	r10,r10,4
 8008d24:	333fec36 	bltu	r6,r12,8008cd8 <__mdiff+0xa0>
 8008d28:	640fc83a 	sub	r7,r12,r16
 8008d2c:	39fffac4 	addi	r7,r7,-21
 8008d30:	84000544 	addi	r16,r16,21
 8008d34:	380ed0ba 	srli	r7,r7,2
 8008d38:	64003336 	bltu	r12,r16,8008e08 <__mdiff+0x1d0>
 8008d3c:	380890ba 	slli	r4,r7,2
 8008d40:	6909883a 	add	r4,r13,r4
 8008d44:	64002e36 	bltu	r12,r16,8008e00 <__mdiff+0x1c8>
 8008d48:	39800044 	addi	r6,r7,1
 8008d4c:	300c90ba 	slli	r6,r6,2
 8008d50:	5997883a 	add	r11,r11,r6
 8008d54:	699b883a 	add	r13,r13,r6
 8008d58:	5a00152e 	bgeu	r11,r8,8008db0 <__mdiff+0x178>
 8008d5c:	680f883a 	mov	r7,r13
 8008d60:	580d883a 	mov	r6,r11
 8008d64:	31000017 	ldw	r4,0(r6)
 8008d68:	39c00104 	addi	r7,r7,4
 8008d6c:	31800104 	addi	r6,r6,4
 8008d70:	217fffcc 	andi	r5,r4,65535
 8008d74:	28cb883a 	add	r5,r5,r3
 8008d78:	2815d43a 	srai	r10,r5,16
 8008d7c:	2006d43a 	srli	r3,r4,16
 8008d80:	297fffcc 	andi	r5,r5,65535
 8008d84:	1a87883a 	add	r3,r3,r10
 8008d88:	1814943a 	slli	r10,r3,16
 8008d8c:	1807d43a 	srai	r3,r3,16
 8008d90:	514ab03a 	or	r5,r10,r5
 8008d94:	397fff15 	stw	r5,-4(r7)
 8008d98:	323ff236 	bltu	r6,r8,8008d64 <__mdiff+0x12c>
 8008d9c:	413fffc4 	addi	r4,r8,-1
 8008da0:	22c9c83a 	sub	r4,r4,r11
 8008da4:	2008d0ba 	srli	r4,r4,2
 8008da8:	200890ba 	slli	r4,r4,2
 8008dac:	6909883a 	add	r4,r13,r4
 8008db0:	2800041e 	bne	r5,zero,8008dc4 <__mdiff+0x18c>
 8008db4:	20ffff17 	ldw	r3,-4(r4)
 8008db8:	4a7fffc4 	addi	r9,r9,-1
 8008dbc:	213fff04 	addi	r4,r4,-4
 8008dc0:	183ffc26 	beq	r3,zero,8008db4 <__mdiff+0x17c>
 8008dc4:	12400415 	stw	r9,16(r2)
 8008dc8:	dfc00317 	ldw	ra,12(sp)
 8008dcc:	dc800217 	ldw	r18,8(sp)
 8008dd0:	dc400117 	ldw	r17,4(sp)
 8008dd4:	dc000017 	ldw	r16,0(sp)
 8008dd8:	dec00404 	addi	sp,sp,16
 8008ddc:	f800283a 	ret
 8008de0:	8805883a 	mov	r2,r17
 8008de4:	04800044 	movi	r18,1
 8008de8:	8023883a 	mov	r17,r16
 8008dec:	1021883a 	mov	r16,r2
 8008df0:	003fa906 	br	8008c98 <__mdiff+0x60>
 8008df4:	903ffa16 	blt	r18,zero,8008de0 <__mdiff+0x1a8>
 8008df8:	0025883a 	mov	r18,zero
 8008dfc:	003fa606 	br	8008c98 <__mdiff+0x60>
 8008e00:	01800104 	movi	r6,4
 8008e04:	003fd206 	br	8008d50 <__mdiff+0x118>
 8008e08:	0009883a 	mov	r4,zero
 8008e0c:	003fcc06 	br	8008d40 <__mdiff+0x108>
 8008e10:	000b883a 	mov	r5,zero
 8008e14:	800812c0 	call	800812c <_Balloc>
 8008e18:	10000b26 	beq	r2,zero,8008e48 <__mdiff+0x210>
 8008e1c:	00c00044 	movi	r3,1
 8008e20:	10c00415 	stw	r3,16(r2)
 8008e24:	10000515 	stw	zero,20(r2)
 8008e28:	003fe706 	br	8008dc8 <__mdiff+0x190>
 8008e2c:	01c20074 	movhi	r7,2049
 8008e30:	01020074 	movhi	r4,2049
 8008e34:	39c99104 	addi	r7,r7,9796
 8008e38:	000d883a 	mov	r6,zero
 8008e3c:	01409004 	movi	r5,576
 8008e40:	2109a604 	addi	r4,r4,9880
 8008e44:	800b0000 	call	800b000 <__assert_func>
 8008e48:	01c20074 	movhi	r7,2049
 8008e4c:	01020074 	movhi	r4,2049
 8008e50:	39c99104 	addi	r7,r7,9796
 8008e54:	000d883a 	mov	r6,zero
 8008e58:	01408c84 	movi	r5,562
 8008e5c:	2109a604 	addi	r4,r4,9880
 8008e60:	800b0000 	call	800b000 <__assert_func>

08008e64 <__ulp>:
 8008e64:	28dffc2c 	andhi	r3,r5,32752
 8008e68:	017f3034 	movhi	r5,64704
 8008e6c:	1947883a 	add	r3,r3,r5
 8008e70:	00c0020e 	bge	zero,r3,8008e7c <__ulp+0x18>
 8008e74:	0005883a 	mov	r2,zero
 8008e78:	f800283a 	ret
 8008e7c:	00c7c83a 	sub	r3,zero,r3
 8008e80:	1807d53a 	srai	r3,r3,20
 8008e84:	18800508 	cmpgei	r2,r3,20
 8008e88:	1000041e 	bne	r2,zero,8008e9c <__ulp+0x38>
 8008e8c:	00800234 	movhi	r2,8
 8008e90:	10c7d83a 	sra	r3,r2,r3
 8008e94:	0005883a 	mov	r2,zero
 8008e98:	f800283a 	ret
 8008e9c:	193ffb04 	addi	r4,r3,-20
 8008ea0:	208007c8 	cmpgei	r2,r4,31
 8008ea4:	0007883a 	mov	r3,zero
 8008ea8:	1000031e 	bne	r2,zero,8008eb8 <__ulp+0x54>
 8008eac:	00a00034 	movhi	r2,32768
 8008eb0:	1104d83a 	srl	r2,r2,r4
 8008eb4:	f800283a 	ret
 8008eb8:	00800044 	movi	r2,1
 8008ebc:	f800283a 	ret

08008ec0 <__b2d>:
 8008ec0:	defffa04 	addi	sp,sp,-24
 8008ec4:	dc400115 	stw	r17,4(sp)
 8008ec8:	24400417 	ldw	r17,16(r4)
 8008ecc:	dc000015 	stw	r16,0(sp)
 8008ed0:	24000504 	addi	r16,r4,20
 8008ed4:	882290ba 	slli	r17,r17,2
 8008ed8:	dc800215 	stw	r18,8(sp)
 8008edc:	dd000415 	stw	r20,16(sp)
 8008ee0:	8463883a 	add	r17,r16,r17
 8008ee4:	8cbfff17 	ldw	r18,-4(r17)
 8008ee8:	dcc00315 	stw	r19,12(sp)
 8008eec:	dfc00515 	stw	ra,20(sp)
 8008ef0:	9009883a 	mov	r4,r18
 8008ef4:	2827883a 	mov	r19,r5
 8008ef8:	80084880 	call	8008488 <__hi0bits>
 8008efc:	00c00804 	movi	r3,32
 8008f00:	1889c83a 	sub	r4,r3,r2
 8008f04:	99000015 	stw	r4,0(r19)
 8008f08:	110002c8 	cmpgei	r4,r2,11
 8008f0c:	8d3fff04 	addi	r20,r17,-4
 8008f10:	20002026 	beq	r4,zero,8008f94 <__b2d+0xd4>
 8008f14:	10bffd44 	addi	r2,r2,-11
 8008f18:	85000e2e 	bgeu	r16,r20,8008f54 <__b2d+0x94>
 8008f1c:	897ffe17 	ldw	r5,-8(r17)
 8008f20:	10001226 	beq	r2,zero,8008f6c <__b2d+0xac>
 8008f24:	1889c83a 	sub	r4,r3,r2
 8008f28:	90a4983a 	sll	r18,r18,r2
 8008f2c:	2906d83a 	srl	r3,r5,r4
 8008f30:	89bffe04 	addi	r6,r17,-8
 8008f34:	2884983a 	sll	r2,r5,r2
 8008f38:	90e4b03a 	or	r18,r18,r3
 8008f3c:	90cffc34 	orhi	r3,r18,16368
 8008f40:	81800c2e 	bgeu	r16,r6,8008f74 <__b2d+0xb4>
 8008f44:	897ffd17 	ldw	r5,-12(r17)
 8008f48:	2908d83a 	srl	r4,r5,r4
 8008f4c:	1104b03a 	or	r2,r2,r4
 8008f50:	00000806 	br	8008f74 <__b2d+0xb4>
 8008f54:	10000426 	beq	r2,zero,8008f68 <__b2d+0xa8>
 8008f58:	90a4983a 	sll	r18,r18,r2
 8008f5c:	0005883a 	mov	r2,zero
 8008f60:	90cffc34 	orhi	r3,r18,16368
 8008f64:	00000306 	br	8008f74 <__b2d+0xb4>
 8008f68:	000b883a 	mov	r5,zero
 8008f6c:	90cffc34 	orhi	r3,r18,16368
 8008f70:	2805883a 	mov	r2,r5
 8008f74:	dfc00517 	ldw	ra,20(sp)
 8008f78:	dd000417 	ldw	r20,16(sp)
 8008f7c:	dcc00317 	ldw	r19,12(sp)
 8008f80:	dc800217 	ldw	r18,8(sp)
 8008f84:	dc400117 	ldw	r17,4(sp)
 8008f88:	dc000017 	ldw	r16,0(sp)
 8008f8c:	dec00604 	addi	sp,sp,24
 8008f90:	f800283a 	ret
 8008f94:	014002c4 	movi	r5,11
 8008f98:	2889c83a 	sub	r4,r5,r2
 8008f9c:	9106d83a 	srl	r3,r18,r4
 8008fa0:	18cffc34 	orhi	r3,r3,16368
 8008fa4:	85000536 	bltu	r16,r20,8008fbc <__b2d+0xfc>
 8008fa8:	000b883a 	mov	r5,zero
 8008fac:	10800544 	addi	r2,r2,21
 8008fb0:	9084983a 	sll	r2,r18,r2
 8008fb4:	1144b03a 	or	r2,r2,r5
 8008fb8:	003fee06 	br	8008f74 <__b2d+0xb4>
 8008fbc:	897ffe17 	ldw	r5,-8(r17)
 8008fc0:	290ad83a 	srl	r5,r5,r4
 8008fc4:	003ff906 	br	8008fac <__b2d+0xec>

08008fc8 <__d2b>:
 8008fc8:	defff804 	addi	sp,sp,-32
 8008fcc:	dd000615 	stw	r20,24(sp)
 8008fd0:	2829883a 	mov	r20,r5
 8008fd4:	01400044 	movi	r5,1
 8008fd8:	dcc00515 	stw	r19,20(sp)
 8008fdc:	dc000215 	stw	r16,8(sp)
 8008fe0:	dfc00715 	stw	ra,28(sp)
 8008fe4:	dc800415 	stw	r18,16(sp)
 8008fe8:	dc400315 	stw	r17,12(sp)
 8008fec:	3021883a 	mov	r16,r6
 8008ff0:	3827883a 	mov	r19,r7
 8008ff4:	800812c0 	call	800812c <_Balloc>
 8008ff8:	10004526 	beq	r2,zero,8009110 <__d2b+0x148>
 8008ffc:	8024d53a 	srli	r18,r16,20
 8009000:	01800434 	movhi	r6,16
 8009004:	31bfffc4 	addi	r6,r6,-1
 8009008:	9481ffcc 	andi	r18,r18,2047
 800900c:	1023883a 	mov	r17,r2
 8009010:	81a0703a 	and	r16,r16,r6
 8009014:	90000126 	beq	r18,zero,800901c <__d2b+0x54>
 8009018:	84000434 	orhi	r16,r16,16
 800901c:	dc000115 	stw	r16,4(sp)
 8009020:	a0002226 	beq	r20,zero,80090ac <__d2b+0xe4>
 8009024:	d809883a 	mov	r4,sp
 8009028:	dd000015 	stw	r20,0(sp)
 800902c:	80084ec0 	call	80084ec <__lo0bits>
 8009030:	d8c00117 	ldw	r3,4(sp)
 8009034:	10003326 	beq	r2,zero,8009104 <__d2b+0x13c>
 8009038:	01000804 	movi	r4,32
 800903c:	2089c83a 	sub	r4,r4,r2
 8009040:	1908983a 	sll	r4,r3,r4
 8009044:	d9400017 	ldw	r5,0(sp)
 8009048:	1886d83a 	srl	r3,r3,r2
 800904c:	2148b03a 	or	r4,r4,r5
 8009050:	89000515 	stw	r4,20(r17)
 8009054:	d8c00115 	stw	r3,4(sp)
 8009058:	88c00615 	stw	r3,24(r17)
 800905c:	1800271e 	bne	r3,zero,80090fc <__d2b+0x134>
 8009060:	04000044 	movi	r16,1
 8009064:	8c000415 	stw	r16,16(r17)
 8009068:	90001926 	beq	r18,zero,80090d0 <__d2b+0x108>
 800906c:	00c00d44 	movi	r3,53
 8009070:	94bef344 	addi	r18,r18,-1075
 8009074:	90a5883a 	add	r18,r18,r2
 8009078:	1885c83a 	sub	r2,r3,r2
 800907c:	d8c00817 	ldw	r3,32(sp)
 8009080:	9c800015 	stw	r18,0(r19)
 8009084:	18800015 	stw	r2,0(r3)
 8009088:	8805883a 	mov	r2,r17
 800908c:	dfc00717 	ldw	ra,28(sp)
 8009090:	dd000617 	ldw	r20,24(sp)
 8009094:	dcc00517 	ldw	r19,20(sp)
 8009098:	dc800417 	ldw	r18,16(sp)
 800909c:	dc400317 	ldw	r17,12(sp)
 80090a0:	dc000217 	ldw	r16,8(sp)
 80090a4:	dec00804 	addi	sp,sp,32
 80090a8:	f800283a 	ret
 80090ac:	d9000104 	addi	r4,sp,4
 80090b0:	80084ec0 	call	80084ec <__lo0bits>
 80090b4:	00c00044 	movi	r3,1
 80090b8:	88c00415 	stw	r3,16(r17)
 80090bc:	d8c00117 	ldw	r3,4(sp)
 80090c0:	10800804 	addi	r2,r2,32
 80090c4:	04000044 	movi	r16,1
 80090c8:	88c00515 	stw	r3,20(r17)
 80090cc:	903fe71e 	bne	r18,zero,800906c <__d2b+0xa4>
 80090d0:	800690ba 	slli	r3,r16,2
 80090d4:	10bef384 	addi	r2,r2,-1074
 80090d8:	98800015 	stw	r2,0(r19)
 80090dc:	88c5883a 	add	r2,r17,r3
 80090e0:	11000417 	ldw	r4,16(r2)
 80090e4:	8020917a 	slli	r16,r16,5
 80090e8:	80084880 	call	8008488 <__hi0bits>
 80090ec:	80a1c83a 	sub	r16,r16,r2
 80090f0:	d8800817 	ldw	r2,32(sp)
 80090f4:	14000015 	stw	r16,0(r2)
 80090f8:	003fe306 	br	8009088 <__d2b+0xc0>
 80090fc:	04000084 	movi	r16,2
 8009100:	003fd806 	br	8009064 <__d2b+0x9c>
 8009104:	d9000017 	ldw	r4,0(sp)
 8009108:	89000515 	stw	r4,20(r17)
 800910c:	003fd206 	br	8009058 <__d2b+0x90>
 8009110:	01c20074 	movhi	r7,2049
 8009114:	01020074 	movhi	r4,2049
 8009118:	39c99104 	addi	r7,r7,9796
 800911c:	000d883a 	mov	r6,zero
 8009120:	0140c284 	movi	r5,778
 8009124:	2109a604 	addi	r4,r4,9880
 8009128:	800b0000 	call	800b000 <__assert_func>

0800912c <__ratio>:
 800912c:	defff904 	addi	sp,sp,-28
 8009130:	dc400315 	stw	r17,12(sp)
 8009134:	2823883a 	mov	r17,r5
 8009138:	d80b883a 	mov	r5,sp
 800913c:	dfc00615 	stw	ra,24(sp)
 8009140:	dcc00515 	stw	r19,20(sp)
 8009144:	dc800415 	stw	r18,16(sp)
 8009148:	2027883a 	mov	r19,r4
 800914c:	dc000215 	stw	r16,8(sp)
 8009150:	8008ec00 	call	8008ec0 <__b2d>
 8009154:	d9400104 	addi	r5,sp,4
 8009158:	8809883a 	mov	r4,r17
 800915c:	1025883a 	mov	r18,r2
 8009160:	1821883a 	mov	r16,r3
 8009164:	8008ec00 	call	8008ec0 <__b2d>
 8009168:	89000417 	ldw	r4,16(r17)
 800916c:	9a000417 	ldw	r8,16(r19)
 8009170:	d9400117 	ldw	r5,4(sp)
 8009174:	100d883a 	mov	r6,r2
 8009178:	4111c83a 	sub	r8,r8,r4
 800917c:	d9000017 	ldw	r4,0(sp)
 8009180:	4010917a 	slli	r8,r8,5
 8009184:	180f883a 	mov	r7,r3
 8009188:	2149c83a 	sub	r4,r4,r5
 800918c:	4111883a 	add	r8,r8,r4
 8009190:	02000c0e 	bge	zero,r8,80091c4 <__ratio+0x98>
 8009194:	4010953a 	slli	r8,r8,20
 8009198:	4421883a 	add	r16,r8,r16
 800919c:	9009883a 	mov	r4,r18
 80091a0:	800b883a 	mov	r5,r16
 80091a4:	800d75c0 	call	800d75c <__divdf3>
 80091a8:	dfc00617 	ldw	ra,24(sp)
 80091ac:	dcc00517 	ldw	r19,20(sp)
 80091b0:	dc800417 	ldw	r18,16(sp)
 80091b4:	dc400317 	ldw	r17,12(sp)
 80091b8:	dc000217 	ldw	r16,8(sp)
 80091bc:	dec00704 	addi	sp,sp,28
 80091c0:	f800283a 	ret
 80091c4:	4010953a 	slli	r8,r8,20
 80091c8:	1a0fc83a 	sub	r7,r3,r8
 80091cc:	003ff306 	br	800919c <__ratio+0x70>

080091d0 <_mprec_log10>:
 80091d0:	defffe04 	addi	sp,sp,-8
 80091d4:	dc000015 	stw	r16,0(sp)
 80091d8:	dfc00115 	stw	ra,4(sp)
 80091dc:	20800608 	cmpgei	r2,r4,24
 80091e0:	2021883a 	mov	r16,r4
 80091e4:	10000f26 	beq	r2,zero,8009224 <_mprec_log10+0x54>
 80091e8:	0009883a 	mov	r4,zero
 80091ec:	014ffc34 	movhi	r5,16368
 80091f0:	000d883a 	mov	r6,zero
 80091f4:	01d00934 	movhi	r7,16420
 80091f8:	800e2dc0 	call	800e2dc <__muldf3>
 80091fc:	843fffc4 	addi	r16,r16,-1
 8009200:	1009883a 	mov	r4,r2
 8009204:	180b883a 	mov	r5,r3
 8009208:	803ff91e 	bne	r16,zero,80091f0 <_mprec_log10+0x20>
 800920c:	2005883a 	mov	r2,r4
 8009210:	2807883a 	mov	r3,r5
 8009214:	dfc00117 	ldw	ra,4(sp)
 8009218:	dc000017 	ldw	r16,0(sp)
 800921c:	dec00204 	addi	sp,sp,8
 8009220:	f800283a 	ret
 8009224:	202090fa 	slli	r16,r4,3
 8009228:	00820074 	movhi	r2,2049
 800922c:	1089cd04 	addi	r2,r2,10036
 8009230:	1421883a 	add	r16,r2,r16
 8009234:	81000017 	ldw	r4,0(r16)
 8009238:	81400117 	ldw	r5,4(r16)
 800923c:	003ff306 	br	800920c <_mprec_log10+0x3c>

08009240 <__copybits>:
 8009240:	297fffc4 	addi	r5,r5,-1
 8009244:	280fd17a 	srai	r7,r5,5
 8009248:	31400417 	ldw	r5,16(r6)
 800924c:	30800504 	addi	r2,r6,20
 8009250:	39c00044 	addi	r7,r7,1
 8009254:	280a90ba 	slli	r5,r5,2
 8009258:	380e90ba 	slli	r7,r7,2
 800925c:	114b883a 	add	r5,r2,r5
 8009260:	21cf883a 	add	r7,r4,r7
 8009264:	11400c2e 	bgeu	r2,r5,8009298 <__copybits+0x58>
 8009268:	2007883a 	mov	r3,r4
 800926c:	12000017 	ldw	r8,0(r2)
 8009270:	10800104 	addi	r2,r2,4
 8009274:	18c00104 	addi	r3,r3,4
 8009278:	1a3fff15 	stw	r8,-4(r3)
 800927c:	117ffb36 	bltu	r2,r5,800926c <__copybits+0x2c>
 8009280:	2985c83a 	sub	r2,r5,r6
 8009284:	10bffac4 	addi	r2,r2,-21
 8009288:	1004d0ba 	srli	r2,r2,2
 800928c:	10800044 	addi	r2,r2,1
 8009290:	100490ba 	slli	r2,r2,2
 8009294:	2089883a 	add	r4,r4,r2
 8009298:	21c0072e 	bgeu	r4,r7,80092b8 <__copybits+0x78>
 800929c:	39bfffc4 	addi	r6,r7,-1
 80092a0:	310dc83a 	sub	r6,r6,r4
 80092a4:	300cd0ba 	srli	r6,r6,2
 80092a8:	000b883a 	mov	r5,zero
 80092ac:	31800044 	addi	r6,r6,1
 80092b0:	300c90ba 	slli	r6,r6,2
 80092b4:	800803c1 	jmpi	800803c <memset>
 80092b8:	f800283a 	ret

080092bc <__any_on>:
 80092bc:	20c00417 	ldw	r3,16(r4)
 80092c0:	280dd17a 	srai	r6,r5,5
 80092c4:	21000504 	addi	r4,r4,20
 80092c8:	1980080e 	bge	r3,r6,80092ec <__any_on+0x30>
 80092cc:	180490ba 	slli	r2,r3,2
 80092d0:	2085883a 	add	r2,r4,r2
 80092d4:	20800f2e 	bgeu	r4,r2,8009314 <__any_on+0x58>
 80092d8:	10ffff17 	ldw	r3,-4(r2)
 80092dc:	10bfff04 	addi	r2,r2,-4
 80092e0:	183ffc26 	beq	r3,zero,80092d4 <__any_on+0x18>
 80092e4:	00800044 	movi	r2,1
 80092e8:	f800283a 	ret
 80092ec:	300490ba 	slli	r2,r6,2
 80092f0:	2085883a 	add	r2,r4,r2
 80092f4:	30fff70e 	bge	r6,r3,80092d4 <__any_on+0x18>
 80092f8:	294007cc 	andi	r5,r5,31
 80092fc:	283ff526 	beq	r5,zero,80092d4 <__any_on+0x18>
 8009300:	11800017 	ldw	r6,0(r2)
 8009304:	3146d83a 	srl	r3,r6,r5
 8009308:	194a983a 	sll	r5,r3,r5
 800930c:	317ff51e 	bne	r6,r5,80092e4 <__any_on+0x28>
 8009310:	003ff006 	br	80092d4 <__any_on+0x18>
 8009314:	0005883a 	mov	r2,zero
 8009318:	f800283a 	ret

0800931c <_realloc_r>:
 800931c:	defff504 	addi	sp,sp,-44
 8009320:	dc800315 	stw	r18,12(sp)
 8009324:	dfc00a15 	stw	ra,40(sp)
 8009328:	df000915 	stw	fp,36(sp)
 800932c:	ddc00815 	stw	r23,32(sp)
 8009330:	dd800715 	stw	r22,28(sp)
 8009334:	dd400615 	stw	r21,24(sp)
 8009338:	dd000515 	stw	r20,20(sp)
 800933c:	dcc00415 	stw	r19,16(sp)
 8009340:	dc400215 	stw	r17,8(sp)
 8009344:	dc000115 	stw	r16,4(sp)
 8009348:	3025883a 	mov	r18,r6
 800934c:	28008b26 	beq	r5,zero,800957c <_realloc_r+0x260>
 8009350:	2821883a 	mov	r16,r5
 8009354:	2027883a 	mov	r19,r4
 8009358:	944002c4 	addi	r17,r18,11
 800935c:	800fd180 	call	800fd18 <__malloc_lock>
 8009360:	888005f0 	cmpltui	r2,r17,23
 8009364:	1000521e 	bne	r2,zero,80094b0 <_realloc_r+0x194>
 8009368:	017ffe04 	movi	r5,-8
 800936c:	8962703a 	and	r17,r17,r5
 8009370:	8807883a 	mov	r3,r17
 8009374:	88005116 	blt	r17,zero,80094bc <_realloc_r+0x1a0>
 8009378:	8c805036 	bltu	r17,r18,80094bc <_realloc_r+0x1a0>
 800937c:	80bfff17 	ldw	r2,-4(r16)
 8009380:	017fff04 	movi	r5,-4
 8009384:	857ffe04 	addi	r21,r16,-8
 8009388:	1168703a 	and	r20,r2,r5
 800938c:	ad2d883a 	add	r22,r21,r20
 8009390:	a0c0390e 	bge	r20,r3,8009478 <_realloc_r+0x15c>
 8009394:	07020074 	movhi	fp,2049
 8009398:	e70c1204 	addi	fp,fp,12360
 800939c:	e2000217 	ldw	r8,8(fp)
 80093a0:	b1000117 	ldw	r4,4(r22)
 80093a4:	45808e26 	beq	r8,r22,80095e0 <_realloc_r+0x2c4>
 80093a8:	01bfff84 	movi	r6,-2
 80093ac:	218c703a 	and	r6,r4,r6
 80093b0:	b18d883a 	add	r6,r22,r6
 80093b4:	31800117 	ldw	r6,4(r6)
 80093b8:	3180004c 	andi	r6,r6,1
 80093bc:	30004f1e 	bne	r6,zero,80094fc <_realloc_r+0x1e0>
 80093c0:	2148703a 	and	r4,r4,r5
 80093c4:	a10b883a 	add	r5,r20,r4
 80093c8:	28c0bf0e 	bge	r5,r3,80096c8 <_realloc_r+0x3ac>
 80093cc:	1080004c 	andi	r2,r2,1
 80093d0:	10004c1e 	bne	r2,zero,8009504 <_realloc_r+0x1e8>
 80093d4:	81fffe17 	ldw	r7,-8(r16)
 80093d8:	00bfff04 	movi	r2,-4
 80093dc:	a9cfc83a 	sub	r7,r21,r7
 80093e0:	39400117 	ldw	r5,4(r7)
 80093e4:	288a703a 	and	r5,r5,r2
 80093e8:	b0000426 	beq	r22,zero,80093fc <_realloc_r+0xe0>
 80093ec:	a16f883a 	add	r23,r20,r5
 80093f0:	b92f883a 	add	r23,r23,r4
 80093f4:	4580bf26 	beq	r8,r22,80096f4 <_realloc_r+0x3d8>
 80093f8:	b8c0930e 	bge	r23,r3,8009648 <_realloc_r+0x32c>
 80093fc:	38004126 	beq	r7,zero,8009504 <_realloc_r+0x1e8>
 8009400:	a16f883a 	add	r23,r20,r5
 8009404:	b8c03f16 	blt	r23,r3,8009504 <_realloc_r+0x1e8>
 8009408:	38800317 	ldw	r2,12(r7)
 800940c:	38c00217 	ldw	r3,8(r7)
 8009410:	a1bfff04 	addi	r6,r20,-4
 8009414:	31400968 	cmpgeui	r5,r6,37
 8009418:	18800315 	stw	r2,12(r3)
 800941c:	10c00215 	stw	r3,8(r2)
 8009420:	39000204 	addi	r4,r7,8
 8009424:	3ded883a 	add	r22,r7,r23
 8009428:	2800941e 	bne	r5,zero,800967c <_realloc_r+0x360>
 800942c:	30800530 	cmpltui	r2,r6,20
 8009430:	80c00017 	ldw	r3,0(r16)
 8009434:	1000df1e 	bne	r2,zero,80097b4 <_realloc_r+0x498>
 8009438:	38c00215 	stw	r3,8(r7)
 800943c:	80c00117 	ldw	r3,4(r16)
 8009440:	30800728 	cmpgeui	r2,r6,28
 8009444:	38c00315 	stw	r3,12(r7)
 8009448:	1000dc1e 	bne	r2,zero,80097bc <_realloc_r+0x4a0>
 800944c:	80c00217 	ldw	r3,8(r16)
 8009450:	38800404 	addi	r2,r7,16
 8009454:	84000204 	addi	r16,r16,8
 8009458:	10c00015 	stw	r3,0(r2)
 800945c:	80c00117 	ldw	r3,4(r16)
 8009460:	b829883a 	mov	r20,r23
 8009464:	382b883a 	mov	r21,r7
 8009468:	10c00115 	stw	r3,4(r2)
 800946c:	80c00217 	ldw	r3,8(r16)
 8009470:	2021883a 	mov	r16,r4
 8009474:	10c00215 	stw	r3,8(r2)
 8009478:	a9800117 	ldw	r6,4(r21)
 800947c:	a445c83a 	sub	r2,r20,r17
 8009480:	10c00430 	cmpltui	r3,r2,16
 8009484:	3180004c 	andi	r6,r6,1
 8009488:	18004926 	beq	r3,zero,80095b0 <_realloc_r+0x294>
 800948c:	a18cb03a 	or	r6,r20,r6
 8009490:	a9800115 	stw	r6,4(r21)
 8009494:	b0800117 	ldw	r2,4(r22)
 8009498:	10800054 	ori	r2,r2,1
 800949c:	b0800115 	stw	r2,4(r22)
 80094a0:	9809883a 	mov	r4,r19
 80094a4:	800fd3c0 	call	800fd3c <__malloc_unlock>
 80094a8:	8025883a 	mov	r18,r16
 80094ac:	00000606 	br	80094c8 <_realloc_r+0x1ac>
 80094b0:	04400404 	movi	r17,16
 80094b4:	00c00404 	movi	r3,16
 80094b8:	8cbfb02e 	bgeu	r17,r18,800937c <_realloc_r+0x60>
 80094bc:	00800304 	movi	r2,12
 80094c0:	98800015 	stw	r2,0(r19)
 80094c4:	0025883a 	mov	r18,zero
 80094c8:	9005883a 	mov	r2,r18
 80094cc:	dfc00a17 	ldw	ra,40(sp)
 80094d0:	df000917 	ldw	fp,36(sp)
 80094d4:	ddc00817 	ldw	r23,32(sp)
 80094d8:	dd800717 	ldw	r22,28(sp)
 80094dc:	dd400617 	ldw	r21,24(sp)
 80094e0:	dd000517 	ldw	r20,20(sp)
 80094e4:	dcc00417 	ldw	r19,16(sp)
 80094e8:	dc800317 	ldw	r18,12(sp)
 80094ec:	dc400217 	ldw	r17,8(sp)
 80094f0:	dc000117 	ldw	r16,4(sp)
 80094f4:	dec00b04 	addi	sp,sp,44
 80094f8:	f800283a 	ret
 80094fc:	1080004c 	andi	r2,r2,1
 8009500:	10006c26 	beq	r2,zero,80096b4 <_realloc_r+0x398>
 8009504:	900b883a 	mov	r5,r18
 8009508:	9809883a 	mov	r4,r19
 800950c:	80075600 	call	8007560 <_malloc_r>
 8009510:	1025883a 	mov	r18,r2
 8009514:	10001626 	beq	r2,zero,8009570 <_realloc_r+0x254>
 8009518:	80bfff17 	ldw	r2,-4(r16)
 800951c:	013fff84 	movi	r4,-2
 8009520:	90fffe04 	addi	r3,r18,-8
 8009524:	1104703a 	and	r2,r2,r4
 8009528:	a885883a 	add	r2,r21,r2
 800952c:	10c05b26 	beq	r2,r3,800969c <_realloc_r+0x380>
 8009530:	a1bfff04 	addi	r6,r20,-4
 8009534:	30800968 	cmpgeui	r2,r6,37
 8009538:	10006a1e 	bne	r2,zero,80096e4 <_realloc_r+0x3c8>
 800953c:	30800530 	cmpltui	r2,r6,20
 8009540:	81000017 	ldw	r4,0(r16)
 8009544:	10003726 	beq	r2,zero,8009624 <_realloc_r+0x308>
 8009548:	9005883a 	mov	r2,r18
 800954c:	8007883a 	mov	r3,r16
 8009550:	11000015 	stw	r4,0(r2)
 8009554:	19000117 	ldw	r4,4(r3)
 8009558:	11000115 	stw	r4,4(r2)
 800955c:	18c00217 	ldw	r3,8(r3)
 8009560:	10c00215 	stw	r3,8(r2)
 8009564:	800b883a 	mov	r5,r16
 8009568:	9809883a 	mov	r4,r19
 800956c:	80069f40 	call	80069f4 <_free_r>
 8009570:	9809883a 	mov	r4,r19
 8009574:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8009578:	003fd306 	br	80094c8 <_realloc_r+0x1ac>
 800957c:	300b883a 	mov	r5,r6
 8009580:	dfc00a17 	ldw	ra,40(sp)
 8009584:	df000917 	ldw	fp,36(sp)
 8009588:	ddc00817 	ldw	r23,32(sp)
 800958c:	dd800717 	ldw	r22,28(sp)
 8009590:	dd400617 	ldw	r21,24(sp)
 8009594:	dd000517 	ldw	r20,20(sp)
 8009598:	dcc00417 	ldw	r19,16(sp)
 800959c:	dc800317 	ldw	r18,12(sp)
 80095a0:	dc400217 	ldw	r17,8(sp)
 80095a4:	dc000117 	ldw	r16,4(sp)
 80095a8:	dec00b04 	addi	sp,sp,44
 80095ac:	80075601 	jmpi	8007560 <_malloc_r>
 80095b0:	344cb03a 	or	r6,r6,r17
 80095b4:	a9800115 	stw	r6,4(r21)
 80095b8:	ac4b883a 	add	r5,r21,r17
 80095bc:	10800054 	ori	r2,r2,1
 80095c0:	28800115 	stw	r2,4(r5)
 80095c4:	b0800117 	ldw	r2,4(r22)
 80095c8:	29400204 	addi	r5,r5,8
 80095cc:	9809883a 	mov	r4,r19
 80095d0:	10800054 	ori	r2,r2,1
 80095d4:	b0800115 	stw	r2,4(r22)
 80095d8:	80069f40 	call	80069f4 <_free_r>
 80095dc:	003fb006 	br	80094a0 <_realloc_r+0x184>
 80095e0:	2148703a 	and	r4,r4,r5
 80095e4:	a10b883a 	add	r5,r20,r4
 80095e8:	89800404 	addi	r6,r17,16
 80095ec:	29bf7716 	blt	r5,r6,80093cc <_realloc_r+0xb0>
 80095f0:	ac6b883a 	add	r21,r21,r17
 80095f4:	2c45c83a 	sub	r2,r5,r17
 80095f8:	e5400215 	stw	r21,8(fp)
 80095fc:	10800054 	ori	r2,r2,1
 8009600:	a8800115 	stw	r2,4(r21)
 8009604:	80bfff17 	ldw	r2,-4(r16)
 8009608:	9809883a 	mov	r4,r19
 800960c:	8025883a 	mov	r18,r16
 8009610:	1080004c 	andi	r2,r2,1
 8009614:	1462b03a 	or	r17,r2,r17
 8009618:	847fff15 	stw	r17,-4(r16)
 800961c:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8009620:	003fa906 	br	80094c8 <_realloc_r+0x1ac>
 8009624:	91000015 	stw	r4,0(r18)
 8009628:	80c00117 	ldw	r3,4(r16)
 800962c:	30800728 	cmpgeui	r2,r6,28
 8009630:	90c00115 	stw	r3,4(r18)
 8009634:	1000551e 	bne	r2,zero,800978c <_realloc_r+0x470>
 8009638:	81000217 	ldw	r4,8(r16)
 800963c:	80c00204 	addi	r3,r16,8
 8009640:	90800204 	addi	r2,r18,8
 8009644:	003fc206 	br	8009550 <_realloc_r+0x234>
 8009648:	b0800317 	ldw	r2,12(r22)
 800964c:	b0c00217 	ldw	r3,8(r22)
 8009650:	a1bfff04 	addi	r6,r20,-4
 8009654:	31400968 	cmpgeui	r5,r6,37
 8009658:	18800315 	stw	r2,12(r3)
 800965c:	10c00215 	stw	r3,8(r2)
 8009660:	38c00217 	ldw	r3,8(r7)
 8009664:	38800317 	ldw	r2,12(r7)
 8009668:	39000204 	addi	r4,r7,8
 800966c:	3ded883a 	add	r22,r7,r23
 8009670:	18800315 	stw	r2,12(r3)
 8009674:	10c00215 	stw	r3,8(r2)
 8009678:	283f6c26 	beq	r5,zero,800942c <_realloc_r+0x110>
 800967c:	800b883a 	mov	r5,r16
 8009680:	d9c00015 	stw	r7,0(sp)
 8009684:	8007f100 	call	8007f10 <memmove>
 8009688:	d9c00017 	ldw	r7,0(sp)
 800968c:	1021883a 	mov	r16,r2
 8009690:	b829883a 	mov	r20,r23
 8009694:	382b883a 	mov	r21,r7
 8009698:	003f7706 	br	8009478 <_realloc_r+0x15c>
 800969c:	90bfff17 	ldw	r2,-4(r18)
 80096a0:	00ffff04 	movi	r3,-4
 80096a4:	10c4703a 	and	r2,r2,r3
 80096a8:	a0a9883a 	add	r20,r20,r2
 80096ac:	ad2d883a 	add	r22,r21,r20
 80096b0:	003f7106 	br	8009478 <_realloc_r+0x15c>
 80096b4:	81fffe17 	ldw	r7,-8(r16)
 80096b8:	a9cfc83a 	sub	r7,r21,r7
 80096bc:	38800117 	ldw	r2,4(r7)
 80096c0:	114a703a 	and	r5,r2,r5
 80096c4:	003f4d06 	br	80093fc <_realloc_r+0xe0>
 80096c8:	b0800317 	ldw	r2,12(r22)
 80096cc:	b0c00217 	ldw	r3,8(r22)
 80096d0:	2829883a 	mov	r20,r5
 80096d4:	a96d883a 	add	r22,r21,r5
 80096d8:	18800315 	stw	r2,12(r3)
 80096dc:	10c00215 	stw	r3,8(r2)
 80096e0:	003f6506 	br	8009478 <_realloc_r+0x15c>
 80096e4:	800b883a 	mov	r5,r16
 80096e8:	9009883a 	mov	r4,r18
 80096ec:	8007f100 	call	8007f10 <memmove>
 80096f0:	003f9c06 	br	8009564 <_realloc_r+0x248>
 80096f4:	88800404 	addi	r2,r17,16
 80096f8:	b8bf4016 	blt	r23,r2,80093fc <_realloc_r+0xe0>
 80096fc:	38800317 	ldw	r2,12(r7)
 8009700:	38c00217 	ldw	r3,8(r7)
 8009704:	a1bfff04 	addi	r6,r20,-4
 8009708:	31000968 	cmpgeui	r4,r6,37
 800970c:	18800315 	stw	r2,12(r3)
 8009710:	10c00215 	stw	r3,8(r2)
 8009714:	3c800204 	addi	r18,r7,8
 8009718:	20003b1e 	bne	r4,zero,8009808 <_realloc_r+0x4ec>
 800971c:	30800530 	cmpltui	r2,r6,20
 8009720:	80c00017 	ldw	r3,0(r16)
 8009724:	1000361e 	bne	r2,zero,8009800 <_realloc_r+0x4e4>
 8009728:	38c00215 	stw	r3,8(r7)
 800972c:	80c00117 	ldw	r3,4(r16)
 8009730:	30800728 	cmpgeui	r2,r6,28
 8009734:	38c00315 	stw	r3,12(r7)
 8009738:	1000401e 	bne	r2,zero,800983c <_realloc_r+0x520>
 800973c:	80c00217 	ldw	r3,8(r16)
 8009740:	38800404 	addi	r2,r7,16
 8009744:	84000204 	addi	r16,r16,8
 8009748:	10c00015 	stw	r3,0(r2)
 800974c:	80c00117 	ldw	r3,4(r16)
 8009750:	10c00115 	stw	r3,4(r2)
 8009754:	80c00217 	ldw	r3,8(r16)
 8009758:	10c00215 	stw	r3,8(r2)
 800975c:	3c47883a 	add	r3,r7,r17
 8009760:	bc45c83a 	sub	r2,r23,r17
 8009764:	e0c00215 	stw	r3,8(fp)
 8009768:	10800054 	ori	r2,r2,1
 800976c:	18800115 	stw	r2,4(r3)
 8009770:	38800117 	ldw	r2,4(r7)
 8009774:	9809883a 	mov	r4,r19
 8009778:	1080004c 	andi	r2,r2,1
 800977c:	1462b03a 	or	r17,r2,r17
 8009780:	3c400115 	stw	r17,4(r7)
 8009784:	800fd3c0 	call	800fd3c <__malloc_unlock>
 8009788:	003f4f06 	br	80094c8 <_realloc_r+0x1ac>
 800978c:	80800217 	ldw	r2,8(r16)
 8009790:	31800920 	cmpeqi	r6,r6,36
 8009794:	90800215 	stw	r2,8(r18)
 8009798:	80800317 	ldw	r2,12(r16)
 800979c:	90800315 	stw	r2,12(r18)
 80097a0:	81000417 	ldw	r4,16(r16)
 80097a4:	30000f1e 	bne	r6,zero,80097e4 <_realloc_r+0x4c8>
 80097a8:	80c00404 	addi	r3,r16,16
 80097ac:	90800404 	addi	r2,r18,16
 80097b0:	003f6706 	br	8009550 <_realloc_r+0x234>
 80097b4:	2005883a 	mov	r2,r4
 80097b8:	003f2706 	br	8009458 <_realloc_r+0x13c>
 80097bc:	80800217 	ldw	r2,8(r16)
 80097c0:	31800920 	cmpeqi	r6,r6,36
 80097c4:	38800415 	stw	r2,16(r7)
 80097c8:	80800317 	ldw	r2,12(r16)
 80097cc:	38800515 	stw	r2,20(r7)
 80097d0:	80c00417 	ldw	r3,16(r16)
 80097d4:	3000121e 	bne	r6,zero,8009820 <_realloc_r+0x504>
 80097d8:	38800604 	addi	r2,r7,24
 80097dc:	84000404 	addi	r16,r16,16
 80097e0:	003f1d06 	br	8009458 <_realloc_r+0x13c>
 80097e4:	91000415 	stw	r4,16(r18)
 80097e8:	81000517 	ldw	r4,20(r16)
 80097ec:	80c00604 	addi	r3,r16,24
 80097f0:	90800604 	addi	r2,r18,24
 80097f4:	91000515 	stw	r4,20(r18)
 80097f8:	81000617 	ldw	r4,24(r16)
 80097fc:	003f5406 	br	8009550 <_realloc_r+0x234>
 8009800:	9005883a 	mov	r2,r18
 8009804:	003fd006 	br	8009748 <_realloc_r+0x42c>
 8009808:	800b883a 	mov	r5,r16
 800980c:	9009883a 	mov	r4,r18
 8009810:	d9c00015 	stw	r7,0(sp)
 8009814:	8007f100 	call	8007f10 <memmove>
 8009818:	d9c00017 	ldw	r7,0(sp)
 800981c:	003fcf06 	br	800975c <_realloc_r+0x440>
 8009820:	84000604 	addi	r16,r16,24
 8009824:	38c00615 	stw	r3,24(r7)
 8009828:	80ffff17 	ldw	r3,-4(r16)
 800982c:	38800804 	addi	r2,r7,32
 8009830:	38c00715 	stw	r3,28(r7)
 8009834:	80c00017 	ldw	r3,0(r16)
 8009838:	003f0706 	br	8009458 <_realloc_r+0x13c>
 800983c:	80800217 	ldw	r2,8(r16)
 8009840:	31800920 	cmpeqi	r6,r6,36
 8009844:	38800415 	stw	r2,16(r7)
 8009848:	80800317 	ldw	r2,12(r16)
 800984c:	38800515 	stw	r2,20(r7)
 8009850:	80c00417 	ldw	r3,16(r16)
 8009854:	3000031e 	bne	r6,zero,8009864 <_realloc_r+0x548>
 8009858:	38800604 	addi	r2,r7,24
 800985c:	84000404 	addi	r16,r16,16
 8009860:	003fb906 	br	8009748 <_realloc_r+0x42c>
 8009864:	84000604 	addi	r16,r16,24
 8009868:	38c00615 	stw	r3,24(r7)
 800986c:	80ffff17 	ldw	r3,-4(r16)
 8009870:	38800804 	addi	r2,r7,32
 8009874:	38c00715 	stw	r3,28(r7)
 8009878:	80c00017 	ldw	r3,0(r16)
 800987c:	003fb206 	br	8009748 <_realloc_r+0x42c>

08009880 <_sbrk_r>:
 8009880:	defffe04 	addi	sp,sp,-8
 8009884:	dc000015 	stw	r16,0(sp)
 8009888:	00820074 	movhi	r2,2049
 800988c:	2021883a 	mov	r16,r4
 8009890:	2809883a 	mov	r4,r5
 8009894:	dfc00115 	stw	ra,4(sp)
 8009898:	1018f915 	stw	zero,25572(r2)
 800989c:	800ff140 	call	800ff14 <sbrk>
 80098a0:	10ffffd8 	cmpnei	r3,r2,-1
 80098a4:	18000426 	beq	r3,zero,80098b8 <_sbrk_r+0x38>
 80098a8:	dfc00117 	ldw	ra,4(sp)
 80098ac:	dc000017 	ldw	r16,0(sp)
 80098b0:	dec00204 	addi	sp,sp,8
 80098b4:	f800283a 	ret
 80098b8:	00c20074 	movhi	r3,2049
 80098bc:	18d8f917 	ldw	r3,25572(r3)
 80098c0:	183ff926 	beq	r3,zero,80098a8 <_sbrk_r+0x28>
 80098c4:	80c00015 	stw	r3,0(r16)
 80098c8:	dfc00117 	ldw	ra,4(sp)
 80098cc:	dc000017 	ldw	r16,0(sp)
 80098d0:	dec00204 	addi	sp,sp,8
 80098d4:	f800283a 	ret

080098d8 <__sread>:
 80098d8:	defffe04 	addi	sp,sp,-8
 80098dc:	dc000015 	stw	r16,0(sp)
 80098e0:	2821883a 	mov	r16,r5
 80098e4:	2940038f 	ldh	r5,14(r5)
 80098e8:	dfc00115 	stw	ra,4(sp)
 80098ec:	800b7940 	call	800b794 <_read_r>
 80098f0:	10000716 	blt	r2,zero,8009910 <__sread+0x38>
 80098f4:	80c01417 	ldw	r3,80(r16)
 80098f8:	1887883a 	add	r3,r3,r2
 80098fc:	80c01415 	stw	r3,80(r16)
 8009900:	dfc00117 	ldw	ra,4(sp)
 8009904:	dc000017 	ldw	r16,0(sp)
 8009908:	dec00204 	addi	sp,sp,8
 800990c:	f800283a 	ret
 8009910:	80c0030b 	ldhu	r3,12(r16)
 8009914:	18fbffcc 	andi	r3,r3,61439
 8009918:	80c0030d 	sth	r3,12(r16)
 800991c:	dfc00117 	ldw	ra,4(sp)
 8009920:	dc000017 	ldw	r16,0(sp)
 8009924:	dec00204 	addi	sp,sp,8
 8009928:	f800283a 	ret

0800992c <__seofread>:
 800992c:	0005883a 	mov	r2,zero
 8009930:	f800283a 	ret

08009934 <__swrite>:
 8009934:	2880030b 	ldhu	r2,12(r5)
 8009938:	defffb04 	addi	sp,sp,-20
 800993c:	dcc00315 	stw	r19,12(sp)
 8009940:	dc800215 	stw	r18,8(sp)
 8009944:	dc400115 	stw	r17,4(sp)
 8009948:	dc000015 	stw	r16,0(sp)
 800994c:	dfc00415 	stw	ra,16(sp)
 8009950:	10c0400c 	andi	r3,r2,256
 8009954:	2821883a 	mov	r16,r5
 8009958:	2023883a 	mov	r17,r4
 800995c:	2940038f 	ldh	r5,14(r5)
 8009960:	3025883a 	mov	r18,r6
 8009964:	3827883a 	mov	r19,r7
 8009968:	18000c1e 	bne	r3,zero,800999c <__swrite+0x68>
 800996c:	10bbffcc 	andi	r2,r2,61439
 8009970:	980f883a 	mov	r7,r19
 8009974:	900d883a 	mov	r6,r18
 8009978:	8809883a 	mov	r4,r17
 800997c:	8080030d 	sth	r2,12(r16)
 8009980:	dfc00417 	ldw	ra,16(sp)
 8009984:	dcc00317 	ldw	r19,12(sp)
 8009988:	dc800217 	ldw	r18,8(sp)
 800998c:	dc400117 	ldw	r17,4(sp)
 8009990:	dc000017 	ldw	r16,0(sp)
 8009994:	dec00504 	addi	sp,sp,20
 8009998:	800af441 	jmpi	800af44 <_write_r>
 800999c:	01c00084 	movi	r7,2
 80099a0:	000d883a 	mov	r6,zero
 80099a4:	800b6e00 	call	800b6e0 <_lseek_r>
 80099a8:	8080030b 	ldhu	r2,12(r16)
 80099ac:	8140038f 	ldh	r5,14(r16)
 80099b0:	003fee06 	br	800996c <__swrite+0x38>

080099b4 <__sseek>:
 80099b4:	defffe04 	addi	sp,sp,-8
 80099b8:	dc000015 	stw	r16,0(sp)
 80099bc:	2821883a 	mov	r16,r5
 80099c0:	2940038f 	ldh	r5,14(r5)
 80099c4:	dfc00115 	stw	ra,4(sp)
 80099c8:	800b6e00 	call	800b6e0 <_lseek_r>
 80099cc:	10ffffd8 	cmpnei	r3,r2,-1
 80099d0:	18000826 	beq	r3,zero,80099f4 <__sseek+0x40>
 80099d4:	80c0030b 	ldhu	r3,12(r16)
 80099d8:	80801415 	stw	r2,80(r16)
 80099dc:	18c40014 	ori	r3,r3,4096
 80099e0:	80c0030d 	sth	r3,12(r16)
 80099e4:	dfc00117 	ldw	ra,4(sp)
 80099e8:	dc000017 	ldw	r16,0(sp)
 80099ec:	dec00204 	addi	sp,sp,8
 80099f0:	f800283a 	ret
 80099f4:	80c0030b 	ldhu	r3,12(r16)
 80099f8:	18fbffcc 	andi	r3,r3,61439
 80099fc:	80c0030d 	sth	r3,12(r16)
 8009a00:	dfc00117 	ldw	ra,4(sp)
 8009a04:	dc000017 	ldw	r16,0(sp)
 8009a08:	dec00204 	addi	sp,sp,8
 8009a0c:	f800283a 	ret

08009a10 <__sclose>:
 8009a10:	2940038f 	ldh	r5,14(r5)
 8009a14:	800afa81 	jmpi	800afa8 <_close_r>

08009a18 <__sprint_r.part.0>:
 8009a18:	28801917 	ldw	r2,100(r5)
 8009a1c:	defff604 	addi	sp,sp,-40
 8009a20:	dcc00315 	stw	r19,12(sp)
 8009a24:	dfc00915 	stw	ra,36(sp)
 8009a28:	df000815 	stw	fp,32(sp)
 8009a2c:	ddc00715 	stw	r23,28(sp)
 8009a30:	dd800615 	stw	r22,24(sp)
 8009a34:	dd400515 	stw	r21,20(sp)
 8009a38:	dd000415 	stw	r20,16(sp)
 8009a3c:	dc800215 	stw	r18,8(sp)
 8009a40:	dc400115 	stw	r17,4(sp)
 8009a44:	dc000015 	stw	r16,0(sp)
 8009a48:	1088000c 	andi	r2,r2,8192
 8009a4c:	3027883a 	mov	r19,r6
 8009a50:	10002c26 	beq	r2,zero,8009b04 <__sprint_r.part.0+0xec>
 8009a54:	30800217 	ldw	r2,8(r6)
 8009a58:	35000017 	ldw	r20,0(r6)
 8009a5c:	2821883a 	mov	r16,r5
 8009a60:	2023883a 	mov	r17,r4
 8009a64:	05bfff04 	movi	r22,-4
 8009a68:	10002426 	beq	r2,zero,8009afc <__sprint_r.part.0+0xe4>
 8009a6c:	a5400117 	ldw	r21,4(r20)
 8009a70:	a5c00017 	ldw	r23,0(r20)
 8009a74:	a824d0ba 	srli	r18,r21,2
 8009a78:	90001b26 	beq	r18,zero,8009ae8 <__sprint_r.part.0+0xd0>
 8009a7c:	0039883a 	mov	fp,zero
 8009a80:	00000206 	br	8009a8c <__sprint_r.part.0+0x74>
 8009a84:	bdc00104 	addi	r23,r23,4
 8009a88:	97001626 	beq	r18,fp,8009ae4 <__sprint_r.part.0+0xcc>
 8009a8c:	b9400017 	ldw	r5,0(r23)
 8009a90:	800d883a 	mov	r6,r16
 8009a94:	8809883a 	mov	r4,r17
 8009a98:	800b4980 	call	800b498 <_fputwc_r>
 8009a9c:	10bfffe0 	cmpeqi	r2,r2,-1
 8009aa0:	e7000044 	addi	fp,fp,1
 8009aa4:	103ff726 	beq	r2,zero,8009a84 <__sprint_r.part.0+0x6c>
 8009aa8:	00bfffc4 	movi	r2,-1
 8009aac:	98000215 	stw	zero,8(r19)
 8009ab0:	98000115 	stw	zero,4(r19)
 8009ab4:	dfc00917 	ldw	ra,36(sp)
 8009ab8:	df000817 	ldw	fp,32(sp)
 8009abc:	ddc00717 	ldw	r23,28(sp)
 8009ac0:	dd800617 	ldw	r22,24(sp)
 8009ac4:	dd400517 	ldw	r21,20(sp)
 8009ac8:	dd000417 	ldw	r20,16(sp)
 8009acc:	dcc00317 	ldw	r19,12(sp)
 8009ad0:	dc800217 	ldw	r18,8(sp)
 8009ad4:	dc400117 	ldw	r17,4(sp)
 8009ad8:	dc000017 	ldw	r16,0(sp)
 8009adc:	dec00a04 	addi	sp,sp,40
 8009ae0:	f800283a 	ret
 8009ae4:	98800217 	ldw	r2,8(r19)
 8009ae8:	adaa703a 	and	r21,r21,r22
 8009aec:	1545c83a 	sub	r2,r2,r21
 8009af0:	98800215 	stw	r2,8(r19)
 8009af4:	a5000204 	addi	r20,r20,8
 8009af8:	103fdc1e 	bne	r2,zero,8009a6c <__sprint_r.part.0+0x54>
 8009afc:	0005883a 	mov	r2,zero
 8009b00:	003fea06 	br	8009aac <__sprint_r.part.0+0x94>
 8009b04:	8006cf00 	call	8006cf0 <__sfvwrite_r>
 8009b08:	003fe806 	br	8009aac <__sprint_r.part.0+0x94>

08009b0c <__sprint_r>:
 8009b0c:	30c00217 	ldw	r3,8(r6)
 8009b10:	18000126 	beq	r3,zero,8009b18 <__sprint_r+0xc>
 8009b14:	8009a181 	jmpi	8009a18 <__sprint_r.part.0>
 8009b18:	30000115 	stw	zero,4(r6)
 8009b1c:	0005883a 	mov	r2,zero
 8009b20:	f800283a 	ret

08009b24 <___vfiprintf_internal_r>:
 8009b24:	deffcf04 	addi	sp,sp,-196
 8009b28:	dd802d15 	stw	r22,180(sp)
 8009b2c:	dd402c15 	stw	r21,176(sp)
 8009b30:	dd002b15 	stw	r20,172(sp)
 8009b34:	dfc03015 	stw	ra,192(sp)
 8009b38:	df002f15 	stw	fp,188(sp)
 8009b3c:	ddc02e15 	stw	r23,184(sp)
 8009b40:	dcc02a15 	stw	r19,168(sp)
 8009b44:	dc802915 	stw	r18,164(sp)
 8009b48:	dc402815 	stw	r17,160(sp)
 8009b4c:	dc002715 	stw	r16,156(sp)
 8009b50:	d9c00415 	stw	r7,16(sp)
 8009b54:	202d883a 	mov	r22,r4
 8009b58:	282b883a 	mov	r21,r5
 8009b5c:	3029883a 	mov	r20,r6
 8009b60:	20000226 	beq	r4,zero,8009b6c <___vfiprintf_internal_r+0x48>
 8009b64:	20800e17 	ldw	r2,56(r4)
 8009b68:	1001bd26 	beq	r2,zero,800a260 <___vfiprintf_internal_r+0x73c>
 8009b6c:	a880030b 	ldhu	r2,12(r21)
 8009b70:	10c8000c 	andi	r3,r2,8192
 8009b74:	1800061e 	bne	r3,zero,8009b90 <___vfiprintf_internal_r+0x6c>
 8009b78:	a8c01917 	ldw	r3,100(r21)
 8009b7c:	0137ffc4 	movi	r4,-8193
 8009b80:	10880014 	ori	r2,r2,8192
 8009b84:	1906703a 	and	r3,r3,r4
 8009b88:	a880030d 	sth	r2,12(r21)
 8009b8c:	a8c01915 	stw	r3,100(r21)
 8009b90:	10c0020c 	andi	r3,r2,8
 8009b94:	18010826 	beq	r3,zero,8009fb8 <___vfiprintf_internal_r+0x494>
 8009b98:	a8c00417 	ldw	r3,16(r21)
 8009b9c:	18010626 	beq	r3,zero,8009fb8 <___vfiprintf_internal_r+0x494>
 8009ba0:	1080068c 	andi	r2,r2,26
 8009ba4:	10800298 	cmpnei	r2,r2,10
 8009ba8:	10010b26 	beq	r2,zero,8009fd8 <___vfiprintf_internal_r+0x4b4>
 8009bac:	dc801704 	addi	r18,sp,92
 8009bb0:	dc800a15 	stw	r18,40(sp)
 8009bb4:	d8000c15 	stw	zero,48(sp)
 8009bb8:	d8000b15 	stw	zero,44(sp)
 8009bbc:	9021883a 	mov	r16,r18
 8009bc0:	d8000515 	stw	zero,20(sp)
 8009bc4:	d8000115 	stw	zero,4(sp)
 8009bc8:	a0800007 	ldb	r2,0(r20)
 8009bcc:	1000e826 	beq	r2,zero,8009f70 <___vfiprintf_internal_r+0x44c>
 8009bd0:	a023883a 	mov	r17,r20
 8009bd4:	00000306 	br	8009be4 <___vfiprintf_internal_r+0xc0>
 8009bd8:	88800047 	ldb	r2,1(r17)
 8009bdc:	8c400044 	addi	r17,r17,1
 8009be0:	10013326 	beq	r2,zero,800a0b0 <___vfiprintf_internal_r+0x58c>
 8009be4:	10800958 	cmpnei	r2,r2,37
 8009be8:	103ffb1e 	bne	r2,zero,8009bd8 <___vfiprintf_internal_r+0xb4>
 8009bec:	8d27c83a 	sub	r19,r17,r20
 8009bf0:	8d01311e 	bne	r17,r20,800a0b8 <___vfiprintf_internal_r+0x594>
 8009bf4:	88800003 	ldbu	r2,0(r17)
 8009bf8:	10803fcc 	andi	r2,r2,255
 8009bfc:	1080201c 	xori	r2,r2,128
 8009c00:	10bfe004 	addi	r2,r2,-128
 8009c04:	1000da26 	beq	r2,zero,8009f70 <___vfiprintf_internal_r+0x44c>
 8009c08:	88800047 	ldb	r2,1(r17)
 8009c0c:	8d000044 	addi	r20,r17,1
 8009c10:	d8000945 	stb	zero,37(sp)
 8009c14:	000b883a 	mov	r5,zero
 8009c18:	000d883a 	mov	r6,zero
 8009c1c:	023fffc4 	movi	r8,-1
 8009c20:	0023883a 	mov	r17,zero
 8009c24:	001b883a 	mov	r13,zero
 8009c28:	a5000044 	addi	r20,r20,1
 8009c2c:	10fff804 	addi	r3,r2,-32
 8009c30:	19001668 	cmpgeui	r4,r3,89
 8009c34:	20006c1e 	bne	r4,zero,8009de8 <___vfiprintf_internal_r+0x2c4>
 8009c38:	180690ba 	slli	r3,r3,2
 8009c3c:	01020074 	movhi	r4,2049
 8009c40:	1909883a 	add	r4,r3,r4
 8009c44:	20e71317 	ldw	r3,-25524(r4)
 8009c48:	1800683a 	jmp	r3
 8009c4c:	0800a588 	cmpgei	zero,at,662
 8009c50:	08009de8 	cmpgeui	zero,at,631
 8009c54:	08009de8 	cmpgeui	zero,at,631
 8009c58:	0800a57c 	xorhi	zero,at,661
 8009c5c:	08009de8 	cmpgeui	zero,at,631
 8009c60:	08009de8 	cmpgeui	zero,at,631
 8009c64:	08009de8 	cmpgeui	zero,at,631
 8009c68:	08009de8 	cmpgeui	zero,at,631
 8009c6c:	08009de8 	cmpgeui	zero,at,631
 8009c70:	08009de8 	cmpgeui	zero,at,631
 8009c74:	0800a554 	ori	zero,at,661
 8009c78:	0800a544 	addi	zero,at,661
 8009c7c:	08009de8 	cmpgeui	zero,at,631
 8009c80:	0800a52c 	andhi	zero,at,660
 8009c84:	0800a4e0 	cmpeqi	zero,at,659
 8009c88:	08009de8 	cmpgeui	zero,at,631
 8009c8c:	0800a4d4 	ori	zero,at,659
 8009c90:	08009db0 	cmpltui	zero,at,630
 8009c94:	08009db0 	cmpltui	zero,at,630
 8009c98:	08009db0 	cmpltui	zero,at,630
 8009c9c:	08009db0 	cmpltui	zero,at,630
 8009ca0:	08009db0 	cmpltui	zero,at,630
 8009ca4:	08009db0 	cmpltui	zero,at,630
 8009ca8:	08009db0 	cmpltui	zero,at,630
 8009cac:	08009db0 	cmpltui	zero,at,630
 8009cb0:	08009db0 	cmpltui	zero,at,630
 8009cb4:	08009de8 	cmpgeui	zero,at,631
 8009cb8:	08009de8 	cmpgeui	zero,at,631
 8009cbc:	08009de8 	cmpgeui	zero,at,631
 8009cc0:	08009de8 	cmpgeui	zero,at,631
 8009cc4:	08009de8 	cmpgeui	zero,at,631
 8009cc8:	08009de8 	cmpgeui	zero,at,631
 8009ccc:	08009de8 	cmpgeui	zero,at,631
 8009cd0:	08009de8 	cmpgeui	zero,at,631
 8009cd4:	08009de8 	cmpgeui	zero,at,631
 8009cd8:	08009de8 	cmpgeui	zero,at,631
 8009cdc:	0800a3d0 	cmplti	zero,at,655
 8009ce0:	08009de8 	cmpgeui	zero,at,631
 8009ce4:	08009de8 	cmpgeui	zero,at,631
 8009ce8:	08009de8 	cmpgeui	zero,at,631
 8009cec:	08009de8 	cmpgeui	zero,at,631
 8009cf0:	08009de8 	cmpgeui	zero,at,631
 8009cf4:	08009de8 	cmpgeui	zero,at,631
 8009cf8:	08009de8 	cmpgeui	zero,at,631
 8009cfc:	08009de8 	cmpgeui	zero,at,631
 8009d00:	08009de8 	cmpgeui	zero,at,631
 8009d04:	08009de8 	cmpgeui	zero,at,631
 8009d08:	0800a048 	cmpgei	zero,at,641
 8009d0c:	08009de8 	cmpgeui	zero,at,631
 8009d10:	08009de8 	cmpgeui	zero,at,631
 8009d14:	08009de8 	cmpgeui	zero,at,631
 8009d18:	08009de8 	cmpgeui	zero,at,631
 8009d1c:	08009de8 	cmpgeui	zero,at,631
 8009d20:	0800a020 	cmpeqi	zero,at,640
 8009d24:	08009de8 	cmpgeui	zero,at,631
 8009d28:	08009de8 	cmpgeui	zero,at,631
 8009d2c:	0800a5dc 	xori	zero,at,663
 8009d30:	08009de8 	cmpgeui	zero,at,631
 8009d34:	08009de8 	cmpgeui	zero,at,631
 8009d38:	08009de8 	cmpgeui	zero,at,631
 8009d3c:	08009de8 	cmpgeui	zero,at,631
 8009d40:	08009de8 	cmpgeui	zero,at,631
 8009d44:	08009de8 	cmpgeui	zero,at,631
 8009d48:	08009de8 	cmpgeui	zero,at,631
 8009d4c:	08009de8 	cmpgeui	zero,at,631
 8009d50:	08009de8 	cmpgeui	zero,at,631
 8009d54:	08009de8 	cmpgeui	zero,at,631
 8009d58:	0800a5b4 	orhi	zero,at,662
 8009d5c:	0800a268 	cmpgeui	zero,at,649
 8009d60:	08009de8 	cmpgeui	zero,at,631
 8009d64:	08009de8 	cmpgeui	zero,at,631
 8009d68:	08009de8 	cmpgeui	zero,at,631
 8009d6c:	0800a2dc 	xori	zero,at,651
 8009d70:	0800a268 	cmpgeui	zero,at,649
 8009d74:	08009de8 	cmpgeui	zero,at,631
 8009d78:	08009de8 	cmpgeui	zero,at,631
 8009d7c:	0800a660 	cmpeqi	zero,at,665
 8009d80:	08009de8 	cmpgeui	zero,at,631
 8009d84:	0800a624 	muli	zero,at,664
 8009d88:	0800a04c 	andi	zero,at,641
 8009d8c:	0800a394 	ori	zero,at,654
 8009d90:	0800a388 	cmpgei	zero,at,654
 8009d94:	08009de8 	cmpgeui	zero,at,631
 8009d98:	0800a330 	cmpltui	zero,at,652
 8009d9c:	08009de8 	cmpgeui	zero,at,631
 8009da0:	0800a024 	muli	zero,at,640
 8009da4:	08009de8 	cmpgeui	zero,at,631
 8009da8:	08009de8 	cmpgeui	zero,at,631
 8009dac:	0800a2e8 	cmpgeui	zero,at,651
 8009db0:	0023883a 	mov	r17,zero
 8009db4:	113ff404 	addi	r4,r2,-48
 8009db8:	880690ba 	slli	r3,r17,2
 8009dbc:	a0800007 	ldb	r2,0(r20)
 8009dc0:	a5000044 	addi	r20,r20,1
 8009dc4:	1c63883a 	add	r17,r3,r17
 8009dc8:	8c63883a 	add	r17,r17,r17
 8009dcc:	2463883a 	add	r17,r4,r17
 8009dd0:	113ff404 	addi	r4,r2,-48
 8009dd4:	20c002b0 	cmpltui	r3,r4,10
 8009dd8:	183ff71e 	bne	r3,zero,8009db8 <___vfiprintf_internal_r+0x294>
 8009ddc:	10fff804 	addi	r3,r2,-32
 8009de0:	19001668 	cmpgeui	r4,r3,89
 8009de4:	203f9426 	beq	r4,zero,8009c38 <___vfiprintf_internal_r+0x114>
 8009de8:	29403fcc 	andi	r5,r5,255
 8009dec:	2803ed1e 	bne	r5,zero,800ada4 <___vfiprintf_internal_r+0x1280>
 8009df0:	10005f26 	beq	r2,zero,8009f70 <___vfiprintf_internal_r+0x44c>
 8009df4:	d8800d05 	stb	r2,52(sp)
 8009df8:	d8000945 	stb	zero,37(sp)
 8009dfc:	05c00044 	movi	r23,1
 8009e00:	07000044 	movi	fp,1
 8009e04:	dcc00d04 	addi	r19,sp,52
 8009e08:	db400015 	stw	r13,0(sp)
 8009e0c:	0011883a 	mov	r8,zero
 8009e10:	d8800017 	ldw	r2,0(sp)
 8009e14:	1380008c 	andi	r14,r2,2
 8009e18:	70000126 	beq	r14,zero,8009e20 <___vfiprintf_internal_r+0x2fc>
 8009e1c:	bdc00084 	addi	r23,r23,2
 8009e20:	d8800017 	ldw	r2,0(sp)
 8009e24:	d9000b17 	ldw	r4,44(sp)
 8009e28:	1340210c 	andi	r13,r2,132
 8009e2c:	21800044 	addi	r6,r4,1
 8009e30:	d8800c17 	ldw	r2,48(sp)
 8009e34:	300b883a 	mov	r5,r6
 8009e38:	6800021e 	bne	r13,zero,8009e44 <___vfiprintf_internal_r+0x320>
 8009e3c:	8dc7c83a 	sub	r3,r17,r23
 8009e40:	00c2e216 	blt	zero,r3,800a9cc <___vfiprintf_internal_r+0xea8>
 8009e44:	d8c00947 	ldb	r3,37(sp)
 8009e48:	81800204 	addi	r6,r16,8
 8009e4c:	18000d26 	beq	r3,zero,8009e84 <___vfiprintf_internal_r+0x360>
 8009e50:	d8c00944 	addi	r3,sp,37
 8009e54:	10800044 	addi	r2,r2,1
 8009e58:	80c00015 	stw	r3,0(r16)
 8009e5c:	00c00044 	movi	r3,1
 8009e60:	80c00115 	stw	r3,4(r16)
 8009e64:	d8800c15 	stw	r2,48(sp)
 8009e68:	d9400b15 	stw	r5,44(sp)
 8009e6c:	28c00208 	cmpgei	r3,r5,8
 8009e70:	18029a1e 	bne	r3,zero,800a8dc <___vfiprintf_internal_r+0xdb8>
 8009e74:	2809883a 	mov	r4,r5
 8009e78:	3021883a 	mov	r16,r6
 8009e7c:	29400044 	addi	r5,r5,1
 8009e80:	31800204 	addi	r6,r6,8
 8009e84:	70001826 	beq	r14,zero,8009ee8 <___vfiprintf_internal_r+0x3c4>
 8009e88:	d8c00984 	addi	r3,sp,38
 8009e8c:	10800084 	addi	r2,r2,2
 8009e90:	80c00015 	stw	r3,0(r16)
 8009e94:	00c00084 	movi	r3,2
 8009e98:	80c00115 	stw	r3,4(r16)
 8009e9c:	d8800c15 	stw	r2,48(sp)
 8009ea0:	d9400b15 	stw	r5,44(sp)
 8009ea4:	28c00208 	cmpgei	r3,r5,8
 8009ea8:	1802a426 	beq	r3,zero,800a93c <___vfiprintf_internal_r+0xe18>
 8009eac:	10032226 	beq	r2,zero,800ab38 <___vfiprintf_internal_r+0x1014>
 8009eb0:	d9800a04 	addi	r6,sp,40
 8009eb4:	a80b883a 	mov	r5,r21
 8009eb8:	b009883a 	mov	r4,r22
 8009ebc:	da000315 	stw	r8,12(sp)
 8009ec0:	db400215 	stw	r13,8(sp)
 8009ec4:	8009a180 	call	8009a18 <__sprint_r.part.0>
 8009ec8:	10002b1e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 8009ecc:	d9000b17 	ldw	r4,44(sp)
 8009ed0:	d8800c17 	ldw	r2,48(sp)
 8009ed4:	da000317 	ldw	r8,12(sp)
 8009ed8:	db400217 	ldw	r13,8(sp)
 8009edc:	d9801904 	addi	r6,sp,100
 8009ee0:	21400044 	addi	r5,r4,1
 8009ee4:	9021883a 	mov	r16,r18
 8009ee8:	6b402018 	cmpnei	r13,r13,128
 8009eec:	6801e526 	beq	r13,zero,800a684 <___vfiprintf_internal_r+0xb60>
 8009ef0:	4711c83a 	sub	r8,r8,fp
 8009ef4:	02022416 	blt	zero,r8,800a788 <___vfiprintf_internal_r+0xc64>
 8009ef8:	e085883a 	add	r2,fp,r2
 8009efc:	d9400b15 	stw	r5,44(sp)
 8009f00:	84c00015 	stw	r19,0(r16)
 8009f04:	87000115 	stw	fp,4(r16)
 8009f08:	d8800c15 	stw	r2,48(sp)
 8009f0c:	29400210 	cmplti	r5,r5,8
 8009f10:	2800081e 	bne	r5,zero,8009f34 <___vfiprintf_internal_r+0x410>
 8009f14:	10009826 	beq	r2,zero,800a178 <___vfiprintf_internal_r+0x654>
 8009f18:	d9800a04 	addi	r6,sp,40
 8009f1c:	a80b883a 	mov	r5,r21
 8009f20:	b009883a 	mov	r4,r22
 8009f24:	8009a180 	call	8009a18 <__sprint_r.part.0>
 8009f28:	1000131e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 8009f2c:	d8800c17 	ldw	r2,48(sp)
 8009f30:	900d883a 	mov	r6,r18
 8009f34:	d8c00017 	ldw	r3,0(sp)
 8009f38:	1cc0010c 	andi	r19,r3,4
 8009f3c:	98000226 	beq	r19,zero,8009f48 <___vfiprintf_internal_r+0x424>
 8009f40:	8de1c83a 	sub	r16,r17,r23
 8009f44:	04009316 	blt	zero,r16,800a194 <___vfiprintf_internal_r+0x670>
 8009f48:	8dc0010e 	bge	r17,r23,8009f50 <___vfiprintf_internal_r+0x42c>
 8009f4c:	b823883a 	mov	r17,r23
 8009f50:	d8c00117 	ldw	r3,4(sp)
 8009f54:	1c47883a 	add	r3,r3,r17
 8009f58:	d8c00115 	stw	r3,4(sp)
 8009f5c:	1002551e 	bne	r2,zero,800a8b4 <___vfiprintf_internal_r+0xd90>
 8009f60:	a0800007 	ldb	r2,0(r20)
 8009f64:	d8000b15 	stw	zero,44(sp)
 8009f68:	9021883a 	mov	r16,r18
 8009f6c:	103f181e 	bne	r2,zero,8009bd0 <___vfiprintf_internal_r+0xac>
 8009f70:	d8800c17 	ldw	r2,48(sp)
 8009f74:	10038d1e 	bne	r2,zero,800adac <___vfiprintf_internal_r+0x1288>
 8009f78:	a880030b 	ldhu	r2,12(r21)
 8009f7c:	1080100c 	andi	r2,r2,64
 8009f80:	1003a51e 	bne	r2,zero,800ae18 <___vfiprintf_internal_r+0x12f4>
 8009f84:	d8800117 	ldw	r2,4(sp)
 8009f88:	dfc03017 	ldw	ra,192(sp)
 8009f8c:	df002f17 	ldw	fp,188(sp)
 8009f90:	ddc02e17 	ldw	r23,184(sp)
 8009f94:	dd802d17 	ldw	r22,180(sp)
 8009f98:	dd402c17 	ldw	r21,176(sp)
 8009f9c:	dd002b17 	ldw	r20,172(sp)
 8009fa0:	dcc02a17 	ldw	r19,168(sp)
 8009fa4:	dc802917 	ldw	r18,164(sp)
 8009fa8:	dc402817 	ldw	r17,160(sp)
 8009fac:	dc002717 	ldw	r16,156(sp)
 8009fb0:	dec03104 	addi	sp,sp,196
 8009fb4:	f800283a 	ret
 8009fb8:	a80b883a 	mov	r5,r21
 8009fbc:	b009883a 	mov	r4,r22
 8009fc0:	80047540 	call	8004754 <__swsetup_r>
 8009fc4:	1003941e 	bne	r2,zero,800ae18 <___vfiprintf_internal_r+0x12f4>
 8009fc8:	a880030b 	ldhu	r2,12(r21)
 8009fcc:	1080068c 	andi	r2,r2,26
 8009fd0:	10800298 	cmpnei	r2,r2,10
 8009fd4:	103ef51e 	bne	r2,zero,8009bac <___vfiprintf_internal_r+0x88>
 8009fd8:	a880038f 	ldh	r2,14(r21)
 8009fdc:	103ef316 	blt	r2,zero,8009bac <___vfiprintf_internal_r+0x88>
 8009fe0:	d9c00417 	ldw	r7,16(sp)
 8009fe4:	a00d883a 	mov	r6,r20
 8009fe8:	a80b883a 	mov	r5,r21
 8009fec:	b009883a 	mov	r4,r22
 8009ff0:	dfc03017 	ldw	ra,192(sp)
 8009ff4:	df002f17 	ldw	fp,188(sp)
 8009ff8:	ddc02e17 	ldw	r23,184(sp)
 8009ffc:	dd802d17 	ldw	r22,180(sp)
 800a000:	dd402c17 	ldw	r21,176(sp)
 800a004:	dd002b17 	ldw	r20,172(sp)
 800a008:	dcc02a17 	ldw	r19,168(sp)
 800a00c:	dc802917 	ldw	r18,164(sp)
 800a010:	dc402817 	ldw	r17,160(sp)
 800a014:	dc002717 	ldw	r16,156(sp)
 800a018:	dec03104 	addi	sp,sp,196
 800a01c:	800ae841 	jmpi	800ae84 <__sbprintf>
 800a020:	6b400414 	ori	r13,r13,16
 800a024:	6880080c 	andi	r2,r13,32
 800a028:	10004726 	beq	r2,zero,800a148 <___vfiprintf_internal_r+0x624>
 800a02c:	d8c00417 	ldw	r3,16(sp)
 800a030:	00800044 	movi	r2,1
 800a034:	1dc00017 	ldw	r23,0(r3)
 800a038:	1f000117 	ldw	fp,4(r3)
 800a03c:	18c00204 	addi	r3,r3,8
 800a040:	d8c00415 	stw	r3,16(sp)
 800a044:	00000906 	br	800a06c <___vfiprintf_internal_r+0x548>
 800a048:	6b400414 	ori	r13,r13,16
 800a04c:	6880080c 	andi	r2,r13,32
 800a050:	10003126 	beq	r2,zero,800a118 <___vfiprintf_internal_r+0x5f4>
 800a054:	d8c00417 	ldw	r3,16(sp)
 800a058:	0005883a 	mov	r2,zero
 800a05c:	1dc00017 	ldw	r23,0(r3)
 800a060:	1f000117 	ldw	fp,4(r3)
 800a064:	18c00204 	addi	r3,r3,8
 800a068:	d8c00415 	stw	r3,16(sp)
 800a06c:	d8000945 	stb	zero,37(sp)
 800a070:	40ffffe0 	cmpeqi	r3,r8,-1
 800a074:	001d883a 	mov	r14,zero
 800a078:	1800f01e 	bne	r3,zero,800a43c <___vfiprintf_internal_r+0x918>
 800a07c:	04ffdfc4 	movi	r19,-129
 800a080:	6cc8703a 	and	r4,r13,r19
 800a084:	bf06b03a 	or	r3,r23,fp
 800a088:	d9000015 	stw	r4,0(sp)
 800a08c:	1802301e 	bne	r3,zero,800a950 <___vfiprintf_internal_r+0xe2c>
 800a090:	4001f31e 	bne	r8,zero,800a860 <___vfiprintf_internal_r+0xd3c>
 800a094:	10029e1e 	bne	r2,zero,800ab10 <___vfiprintf_internal_r+0xfec>
 800a098:	6f00004c 	andi	fp,r13,1
 800a09c:	e002bc26 	beq	fp,zero,800ab90 <___vfiprintf_internal_r+0x106c>
 800a0a0:	00800c04 	movi	r2,48
 800a0a4:	d88016c5 	stb	r2,91(sp)
 800a0a8:	dcc016c4 	addi	r19,sp,91
 800a0ac:	00010006 	br	800a4b0 <___vfiprintf_internal_r+0x98c>
 800a0b0:	8d27c83a 	sub	r19,r17,r20
 800a0b4:	8d3fae26 	beq	r17,r20,8009f70 <___vfiprintf_internal_r+0x44c>
 800a0b8:	d8c00c17 	ldw	r3,48(sp)
 800a0bc:	d8800b17 	ldw	r2,44(sp)
 800a0c0:	85000015 	stw	r20,0(r16)
 800a0c4:	98c7883a 	add	r3,r19,r3
 800a0c8:	10800044 	addi	r2,r2,1
 800a0cc:	d8800b15 	stw	r2,44(sp)
 800a0d0:	84c00115 	stw	r19,4(r16)
 800a0d4:	d8c00c15 	stw	r3,48(sp)
 800a0d8:	10800208 	cmpgei	r2,r2,8
 800a0dc:	1000061e 	bne	r2,zero,800a0f8 <___vfiprintf_internal_r+0x5d4>
 800a0e0:	84000204 	addi	r16,r16,8
 800a0e4:	d8c00117 	ldw	r3,4(sp)
 800a0e8:	88800003 	ldbu	r2,0(r17)
 800a0ec:	1cc7883a 	add	r3,r3,r19
 800a0f0:	d8c00115 	stw	r3,4(sp)
 800a0f4:	003ec006 	br	8009bf8 <___vfiprintf_internal_r+0xd4>
 800a0f8:	18028126 	beq	r3,zero,800ab00 <___vfiprintf_internal_r+0xfdc>
 800a0fc:	d9800a04 	addi	r6,sp,40
 800a100:	a80b883a 	mov	r5,r21
 800a104:	b009883a 	mov	r4,r22
 800a108:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a10c:	103f9a1e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a110:	9021883a 	mov	r16,r18
 800a114:	003ff306 	br	800a0e4 <___vfiprintf_internal_r+0x5c0>
 800a118:	d9000417 	ldw	r4,16(sp)
 800a11c:	6880040c 	andi	r2,r13,16
 800a120:	20c00104 	addi	r3,r4,4
 800a124:	1002ac1e 	bne	r2,zero,800abd8 <___vfiprintf_internal_r+0x10b4>
 800a128:	6880100c 	andi	r2,r13,64
 800a12c:	1002fb26 	beq	r2,zero,800ad1c <___vfiprintf_internal_r+0x11f8>
 800a130:	d8800417 	ldw	r2,16(sp)
 800a134:	0039883a 	mov	fp,zero
 800a138:	d8c00415 	stw	r3,16(sp)
 800a13c:	15c0000b 	ldhu	r23,0(r2)
 800a140:	0005883a 	mov	r2,zero
 800a144:	003fc906 	br	800a06c <___vfiprintf_internal_r+0x548>
 800a148:	d9000417 	ldw	r4,16(sp)
 800a14c:	6880040c 	andi	r2,r13,16
 800a150:	20c00104 	addi	r3,r4,4
 800a154:	1002af1e 	bne	r2,zero,800ac14 <___vfiprintf_internal_r+0x10f0>
 800a158:	6880100c 	andi	r2,r13,64
 800a15c:	1002fb26 	beq	r2,zero,800ad4c <___vfiprintf_internal_r+0x1228>
 800a160:	d8800417 	ldw	r2,16(sp)
 800a164:	0039883a 	mov	fp,zero
 800a168:	d8c00415 	stw	r3,16(sp)
 800a16c:	15c0000b 	ldhu	r23,0(r2)
 800a170:	00800044 	movi	r2,1
 800a174:	003fbd06 	br	800a06c <___vfiprintf_internal_r+0x548>
 800a178:	d8c00017 	ldw	r3,0(sp)
 800a17c:	d8000b15 	stw	zero,44(sp)
 800a180:	1cc0010c 	andi	r19,r3,4
 800a184:	98024c26 	beq	r19,zero,800aab8 <___vfiprintf_internal_r+0xf94>
 800a188:	8de1c83a 	sub	r16,r17,r23
 800a18c:	04024a0e 	bge	zero,r16,800aab8 <___vfiprintf_internal_r+0xf94>
 800a190:	900d883a 	mov	r6,r18
 800a194:	80c00450 	cmplti	r3,r16,17
 800a198:	d9000b17 	ldw	r4,44(sp)
 800a19c:	01c20074 	movhi	r7,2049
 800a1a0:	18031a1e 	bne	r3,zero,800ae0c <___vfiprintf_internal_r+0x12e8>
 800a1a4:	39ca0304 	addi	r7,r7,10252
 800a1a8:	04c00404 	movi	r19,16
 800a1ac:	00000606 	br	800a1c8 <___vfiprintf_internal_r+0x6a4>
 800a1b0:	21400084 	addi	r5,r4,2
 800a1b4:	31800204 	addi	r6,r6,8
 800a1b8:	1809883a 	mov	r4,r3
 800a1bc:	843ffc04 	addi	r16,r16,-16
 800a1c0:	80c00448 	cmpgei	r3,r16,17
 800a1c4:	18001726 	beq	r3,zero,800a224 <___vfiprintf_internal_r+0x700>
 800a1c8:	20c00044 	addi	r3,r4,1
 800a1cc:	10800404 	addi	r2,r2,16
 800a1d0:	31c00015 	stw	r7,0(r6)
 800a1d4:	34c00115 	stw	r19,4(r6)
 800a1d8:	d8800c15 	stw	r2,48(sp)
 800a1dc:	d8c00b15 	stw	r3,44(sp)
 800a1e0:	19400208 	cmpgei	r5,r3,8
 800a1e4:	283ff226 	beq	r5,zero,800a1b0 <___vfiprintf_internal_r+0x68c>
 800a1e8:	d9800a04 	addi	r6,sp,40
 800a1ec:	a80b883a 	mov	r5,r21
 800a1f0:	b009883a 	mov	r4,r22
 800a1f4:	10011f26 	beq	r2,zero,800a674 <___vfiprintf_internal_r+0xb50>
 800a1f8:	d9c00015 	stw	r7,0(sp)
 800a1fc:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a200:	103f5d1e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a204:	d9000b17 	ldw	r4,44(sp)
 800a208:	843ffc04 	addi	r16,r16,-16
 800a20c:	80c00448 	cmpgei	r3,r16,17
 800a210:	d8800c17 	ldw	r2,48(sp)
 800a214:	d9c00017 	ldw	r7,0(sp)
 800a218:	900d883a 	mov	r6,r18
 800a21c:	21400044 	addi	r5,r4,1
 800a220:	183fe91e 	bne	r3,zero,800a1c8 <___vfiprintf_internal_r+0x6a4>
 800a224:	1405883a 	add	r2,r2,r16
 800a228:	d9400b15 	stw	r5,44(sp)
 800a22c:	31c00015 	stw	r7,0(r6)
 800a230:	34000115 	stw	r16,4(r6)
 800a234:	d8800c15 	stw	r2,48(sp)
 800a238:	29400210 	cmplti	r5,r5,8
 800a23c:	283f421e 	bne	r5,zero,8009f48 <___vfiprintf_internal_r+0x424>
 800a240:	10021d26 	beq	r2,zero,800aab8 <___vfiprintf_internal_r+0xf94>
 800a244:	d9800a04 	addi	r6,sp,40
 800a248:	a80b883a 	mov	r5,r21
 800a24c:	b009883a 	mov	r4,r22
 800a250:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a254:	103f481e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a258:	d8800c17 	ldw	r2,48(sp)
 800a25c:	003f3a06 	br	8009f48 <___vfiprintf_internal_r+0x424>
 800a260:	80068900 	call	8006890 <__sinit>
 800a264:	003e4106 	br	8009b6c <___vfiprintf_internal_r+0x48>
 800a268:	29403fcc 	andi	r5,r5,255
 800a26c:	2802da1e 	bne	r5,zero,800add8 <___vfiprintf_internal_r+0x12b4>
 800a270:	6880080c 	andi	r2,r13,32
 800a274:	10005b26 	beq	r2,zero,800a3e4 <___vfiprintf_internal_r+0x8c0>
 800a278:	d8c00417 	ldw	r3,16(sp)
 800a27c:	18800117 	ldw	r2,4(r3)
 800a280:	1dc00017 	ldw	r23,0(r3)
 800a284:	18c00204 	addi	r3,r3,8
 800a288:	d8c00415 	stw	r3,16(sp)
 800a28c:	1039883a 	mov	fp,r2
 800a290:	10006016 	blt	r2,zero,800a414 <___vfiprintf_internal_r+0x8f0>
 800a294:	40bfffd8 	cmpnei	r2,r8,-1
 800a298:	db800943 	ldbu	r14,37(sp)
 800a29c:	10000626 	beq	r2,zero,800a2b8 <___vfiprintf_internal_r+0x794>
 800a2a0:	04ffdfc4 	movi	r19,-129
 800a2a4:	6cc6703a 	and	r3,r13,r19
 800a2a8:	bf04b03a 	or	r2,r23,fp
 800a2ac:	d8c00015 	stw	r3,0(sp)
 800a2b0:	10021626 	beq	r2,zero,800ab0c <___vfiprintf_internal_r+0xfe8>
 800a2b4:	db400017 	ldw	r13,0(sp)
 800a2b8:	e001a71e 	bne	fp,zero,800a958 <___vfiprintf_internal_r+0xe34>
 800a2bc:	b88002a8 	cmpgeui	r2,r23,10
 800a2c0:	1001a51e 	bne	r2,zero,800a958 <___vfiprintf_internal_r+0xe34>
 800a2c4:	bdc00c04 	addi	r23,r23,48
 800a2c8:	ddc016c5 	stb	r23,91(sp)
 800a2cc:	db400015 	stw	r13,0(sp)
 800a2d0:	07000044 	movi	fp,1
 800a2d4:	dcc016c4 	addi	r19,sp,91
 800a2d8:	00007506 	br	800a4b0 <___vfiprintf_internal_r+0x98c>
 800a2dc:	a0800007 	ldb	r2,0(r20)
 800a2e0:	6b401014 	ori	r13,r13,64
 800a2e4:	003e5006 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a2e8:	29403fcc 	andi	r5,r5,255
 800a2ec:	2802bc1e 	bne	r5,zero,800ade0 <___vfiprintf_internal_r+0x12bc>
 800a2f0:	00c20074 	movhi	r3,2049
 800a2f4:	18c97804 	addi	r3,r3,9696
 800a2f8:	d8c00515 	stw	r3,20(sp)
 800a2fc:	68c0080c 	andi	r3,r13,32
 800a300:	1800bd26 	beq	r3,zero,800a5f8 <___vfiprintf_internal_r+0xad4>
 800a304:	d8c00417 	ldw	r3,16(sp)
 800a308:	1dc00017 	ldw	r23,0(r3)
 800a30c:	1f000117 	ldw	fp,4(r3)
 800a310:	18c00204 	addi	r3,r3,8
 800a314:	d8c00415 	stw	r3,16(sp)
 800a318:	68c0004c 	andi	r3,r13,1
 800a31c:	18000226 	beq	r3,zero,800a328 <___vfiprintf_internal_r+0x804>
 800a320:	bf06b03a 	or	r3,r23,fp
 800a324:	1802261e 	bne	r3,zero,800abc0 <___vfiprintf_internal_r+0x109c>
 800a328:	00800084 	movi	r2,2
 800a32c:	003f4f06 	br	800a06c <___vfiprintf_internal_r+0x548>
 800a330:	d8800417 	ldw	r2,16(sp)
 800a334:	d8000945 	stb	zero,37(sp)
 800a338:	14c00017 	ldw	r19,0(r2)
 800a33c:	10c00104 	addi	r3,r2,4
 800a340:	98026926 	beq	r19,zero,800ace8 <___vfiprintf_internal_r+0x11c4>
 800a344:	40bfffe0 	cmpeqi	r2,r8,-1
 800a348:	1002411e 	bne	r2,zero,800ac50 <___vfiprintf_internal_r+0x112c>
 800a34c:	400d883a 	mov	r6,r8
 800a350:	000b883a 	mov	r5,zero
 800a354:	9809883a 	mov	r4,r19
 800a358:	d8c00315 	stw	r3,12(sp)
 800a35c:	db400215 	stw	r13,8(sp)
 800a360:	da000015 	stw	r8,0(sp)
 800a364:	8007d400 	call	8007d40 <memchr>
 800a368:	da000017 	ldw	r8,0(sp)
 800a36c:	db400217 	ldw	r13,8(sp)
 800a370:	d8c00317 	ldw	r3,12(sp)
 800a374:	10029426 	beq	r2,zero,800adc8 <___vfiprintf_internal_r+0x12a4>
 800a378:	14f9c83a 	sub	fp,r2,r19
 800a37c:	e02f883a 	mov	r23,fp
 800a380:	d8c00415 	stw	r3,16(sp)
 800a384:	003ea006 	br	8009e08 <___vfiprintf_internal_r+0x2e4>
 800a388:	a0800007 	ldb	r2,0(r20)
 800a38c:	6b400814 	ori	r13,r13,32
 800a390:	003e2506 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a394:	d8c00417 	ldw	r3,16(sp)
 800a398:	00800c04 	movi	r2,48
 800a39c:	d8800985 	stb	r2,38(sp)
 800a3a0:	00801e04 	movi	r2,120
 800a3a4:	01020074 	movhi	r4,2049
 800a3a8:	d88009c5 	stb	r2,39(sp)
 800a3ac:	18800104 	addi	r2,r3,4
 800a3b0:	d8800415 	stw	r2,16(sp)
 800a3b4:	20897804 	addi	r2,r4,9696
 800a3b8:	d8800515 	stw	r2,20(sp)
 800a3bc:	1dc00017 	ldw	r23,0(r3)
 800a3c0:	0039883a 	mov	fp,zero
 800a3c4:	6b400094 	ori	r13,r13,2
 800a3c8:	00800084 	movi	r2,2
 800a3cc:	003f2706 	br	800a06c <___vfiprintf_internal_r+0x548>
 800a3d0:	29403fcc 	andi	r5,r5,255
 800a3d4:	2802841e 	bne	r5,zero,800ade8 <___vfiprintf_internal_r+0x12c4>
 800a3d8:	6b400414 	ori	r13,r13,16
 800a3dc:	6880080c 	andi	r2,r13,32
 800a3e0:	103fa51e 	bne	r2,zero,800a278 <___vfiprintf_internal_r+0x754>
 800a3e4:	d9000417 	ldw	r4,16(sp)
 800a3e8:	6880040c 	andi	r2,r13,16
 800a3ec:	20c00104 	addi	r3,r4,4
 800a3f0:	1001ee1e 	bne	r2,zero,800abac <___vfiprintf_internal_r+0x1088>
 800a3f4:	6880100c 	andi	r2,r13,64
 800a3f8:	10024e26 	beq	r2,zero,800ad34 <___vfiprintf_internal_r+0x1210>
 800a3fc:	d8800417 	ldw	r2,16(sp)
 800a400:	d8c00415 	stw	r3,16(sp)
 800a404:	15c0000f 	ldh	r23,0(r2)
 800a408:	b839d7fa 	srai	fp,r23,31
 800a40c:	e005883a 	mov	r2,fp
 800a410:	103fa00e 	bge	r2,zero,800a294 <___vfiprintf_internal_r+0x770>
 800a414:	b804c03a 	cmpne	r2,r23,zero
 800a418:	0739c83a 	sub	fp,zero,fp
 800a41c:	e0b9c83a 	sub	fp,fp,r2
 800a420:	00800b44 	movi	r2,45
 800a424:	d8800945 	stb	r2,37(sp)
 800a428:	40ffffe0 	cmpeqi	r3,r8,-1
 800a42c:	05efc83a 	sub	r23,zero,r23
 800a430:	03800b44 	movi	r14,45
 800a434:	00800044 	movi	r2,1
 800a438:	183f1026 	beq	r3,zero,800a07c <___vfiprintf_internal_r+0x558>
 800a43c:	10c00060 	cmpeqi	r3,r2,1
 800a440:	183f9d1e 	bne	r3,zero,800a2b8 <___vfiprintf_internal_r+0x794>
 800a444:	108000a0 	cmpeqi	r2,r2,2
 800a448:	10010a1e 	bne	r2,zero,800a874 <___vfiprintf_internal_r+0xd50>
 800a44c:	9027883a 	mov	r19,r18
 800a450:	e008977a 	slli	r4,fp,29
 800a454:	b806d0fa 	srli	r3,r23,3
 800a458:	e038d0fa 	srli	fp,fp,3
 800a45c:	b88001cc 	andi	r2,r23,7
 800a460:	10800c04 	addi	r2,r2,48
 800a464:	20eeb03a 	or	r23,r4,r3
 800a468:	98bfffc5 	stb	r2,-1(r19)
 800a46c:	bf06b03a 	or	r3,r23,fp
 800a470:	980b883a 	mov	r5,r19
 800a474:	9cffffc4 	addi	r19,r19,-1
 800a478:	183ff51e 	bne	r3,zero,800a450 <___vfiprintf_internal_r+0x92c>
 800a47c:	68c0004c 	andi	r3,r13,1
 800a480:	18010926 	beq	r3,zero,800a8a8 <___vfiprintf_internal_r+0xd84>
 800a484:	10803fcc 	andi	r2,r2,255
 800a488:	1080201c 	xori	r2,r2,128
 800a48c:	10bfe004 	addi	r2,r2,-128
 800a490:	10800c18 	cmpnei	r2,r2,48
 800a494:	10010426 	beq	r2,zero,800a8a8 <___vfiprintf_internal_r+0xd84>
 800a498:	297fff84 	addi	r5,r5,-2
 800a49c:	00800c04 	movi	r2,48
 800a4a0:	98bfffc5 	stb	r2,-1(r19)
 800a4a4:	9179c83a 	sub	fp,r18,r5
 800a4a8:	db400015 	stw	r13,0(sp)
 800a4ac:	2827883a 	mov	r19,r5
 800a4b0:	402f883a 	mov	r23,r8
 800a4b4:	4700010e 	bge	r8,fp,800a4bc <___vfiprintf_internal_r+0x998>
 800a4b8:	e02f883a 	mov	r23,fp
 800a4bc:	73803fcc 	andi	r14,r14,255
 800a4c0:	7380201c 	xori	r14,r14,128
 800a4c4:	73bfe004 	addi	r14,r14,-128
 800a4c8:	703e5126 	beq	r14,zero,8009e10 <___vfiprintf_internal_r+0x2ec>
 800a4cc:	bdc00044 	addi	r23,r23,1
 800a4d0:	003e4f06 	br	8009e10 <___vfiprintf_internal_r+0x2ec>
 800a4d4:	a0800007 	ldb	r2,0(r20)
 800a4d8:	6b402014 	ori	r13,r13,128
 800a4dc:	003dd206 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a4e0:	a0800007 	ldb	r2,0(r20)
 800a4e4:	a0c00044 	addi	r3,r20,1
 800a4e8:	11000aa0 	cmpeqi	r4,r2,42
 800a4ec:	2002521e 	bne	r4,zero,800ae38 <___vfiprintf_internal_r+0x1314>
 800a4f0:	113ff404 	addi	r4,r2,-48
 800a4f4:	21c002b0 	cmpltui	r7,r4,10
 800a4f8:	1829883a 	mov	r20,r3
 800a4fc:	0011883a 	mov	r8,zero
 800a500:	383dca26 	beq	r7,zero,8009c2c <___vfiprintf_internal_r+0x108>
 800a504:	400690ba 	slli	r3,r8,2
 800a508:	a0800007 	ldb	r2,0(r20)
 800a50c:	a5000044 	addi	r20,r20,1
 800a510:	1a11883a 	add	r8,r3,r8
 800a514:	4211883a 	add	r8,r8,r8
 800a518:	4111883a 	add	r8,r8,r4
 800a51c:	113ff404 	addi	r4,r2,-48
 800a520:	20c002b0 	cmpltui	r3,r4,10
 800a524:	183ff71e 	bne	r3,zero,800a504 <___vfiprintf_internal_r+0x9e0>
 800a528:	003dc006 	br	8009c2c <___vfiprintf_internal_r+0x108>
 800a52c:	a0800003 	ldbu	r2,0(r20)
 800a530:	10803fcc 	andi	r2,r2,255
 800a534:	1080201c 	xori	r2,r2,128
 800a538:	6b400114 	ori	r13,r13,4
 800a53c:	10bfe004 	addi	r2,r2,-128
 800a540:	003db906 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a544:	a0800007 	ldb	r2,0(r20)
 800a548:	01400044 	movi	r5,1
 800a54c:	01800ac4 	movi	r6,43
 800a550:	003db506 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a554:	d8c00417 	ldw	r3,16(sp)
 800a558:	a0800003 	ldbu	r2,0(r20)
 800a55c:	1c400017 	ldw	r17,0(r3)
 800a560:	18c00104 	addi	r3,r3,4
 800a564:	8801b716 	blt	r17,zero,800ac44 <___vfiprintf_internal_r+0x1120>
 800a568:	d8c00415 	stw	r3,16(sp)
 800a56c:	10803fcc 	andi	r2,r2,255
 800a570:	1080201c 	xori	r2,r2,128
 800a574:	10bfe004 	addi	r2,r2,-128
 800a578:	003dab06 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a57c:	a0800007 	ldb	r2,0(r20)
 800a580:	6b400054 	ori	r13,r13,1
 800a584:	003da806 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a588:	30c03fcc 	andi	r3,r6,255
 800a58c:	18c0201c 	xori	r3,r3,128
 800a590:	18ffe004 	addi	r3,r3,-128
 800a594:	a0800003 	ldbu	r2,0(r20)
 800a598:	183ff41e 	bne	r3,zero,800a56c <___vfiprintf_internal_r+0xa48>
 800a59c:	10803fcc 	andi	r2,r2,255
 800a5a0:	1080201c 	xori	r2,r2,128
 800a5a4:	01400044 	movi	r5,1
 800a5a8:	01800804 	movi	r6,32
 800a5ac:	10bfe004 	addi	r2,r2,-128
 800a5b0:	003d9d06 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a5b4:	d8c00417 	ldw	r3,16(sp)
 800a5b8:	d8000945 	stb	zero,37(sp)
 800a5bc:	05c00044 	movi	r23,1
 800a5c0:	18800017 	ldw	r2,0(r3)
 800a5c4:	18c00104 	addi	r3,r3,4
 800a5c8:	d8c00415 	stw	r3,16(sp)
 800a5cc:	d8800d05 	stb	r2,52(sp)
 800a5d0:	07000044 	movi	fp,1
 800a5d4:	dcc00d04 	addi	r19,sp,52
 800a5d8:	003e0b06 	br	8009e08 <___vfiprintf_internal_r+0x2e4>
 800a5dc:	29403fcc 	andi	r5,r5,255
 800a5e0:	2802061e 	bne	r5,zero,800adfc <___vfiprintf_internal_r+0x12d8>
 800a5e4:	00c20074 	movhi	r3,2049
 800a5e8:	18c97d04 	addi	r3,r3,9716
 800a5ec:	d8c00515 	stw	r3,20(sp)
 800a5f0:	68c0080c 	andi	r3,r13,32
 800a5f4:	183f431e 	bne	r3,zero,800a304 <___vfiprintf_internal_r+0x7e0>
 800a5f8:	d9400417 	ldw	r5,16(sp)
 800a5fc:	68c0040c 	andi	r3,r13,16
 800a600:	29000104 	addi	r4,r5,4
 800a604:	18017f1e 	bne	r3,zero,800ac04 <___vfiprintf_internal_r+0x10e0>
 800a608:	68c0100c 	andi	r3,r13,64
 800a60c:	1801be26 	beq	r3,zero,800ad08 <___vfiprintf_internal_r+0x11e4>
 800a610:	d8c00417 	ldw	r3,16(sp)
 800a614:	0039883a 	mov	fp,zero
 800a618:	d9000415 	stw	r4,16(sp)
 800a61c:	1dc0000b 	ldhu	r23,0(r3)
 800a620:	003f3d06 	br	800a318 <___vfiprintf_internal_r+0x7f4>
 800a624:	29403fcc 	andi	r5,r5,255
 800a628:	2801f61e 	bne	r5,zero,800ae04 <___vfiprintf_internal_r+0x12e0>
 800a62c:	d9000417 	ldw	r4,16(sp)
 800a630:	6880080c 	andi	r2,r13,32
 800a634:	20c00017 	ldw	r3,0(r4)
 800a638:	21000104 	addi	r4,r4,4
 800a63c:	10016b1e 	bne	r2,zero,800abec <___vfiprintf_internal_r+0x10c8>
 800a640:	6880040c 	andi	r2,r13,16
 800a644:	1001951e 	bne	r2,zero,800ac9c <___vfiprintf_internal_r+0x1178>
 800a648:	6b40100c 	andi	r13,r13,64
 800a64c:	68019326 	beq	r13,zero,800ac9c <___vfiprintf_internal_r+0x1178>
 800a650:	d8800117 	ldw	r2,4(sp)
 800a654:	d9000415 	stw	r4,16(sp)
 800a658:	1880000d 	sth	r2,0(r3)
 800a65c:	003d5a06 	br	8009bc8 <___vfiprintf_internal_r+0xa4>
 800a660:	a0800007 	ldb	r2,0(r20)
 800a664:	10c01b18 	cmpnei	r3,r2,108
 800a668:	18019826 	beq	r3,zero,800accc <___vfiprintf_internal_r+0x11a8>
 800a66c:	6b400414 	ori	r13,r13,16
 800a670:	003d6d06 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800a674:	01400044 	movi	r5,1
 800a678:	0009883a 	mov	r4,zero
 800a67c:	900d883a 	mov	r6,r18
 800a680:	003ece06 	br	800a1bc <___vfiprintf_internal_r+0x698>
 800a684:	8dc7c83a 	sub	r3,r17,r23
 800a688:	00fe190e 	bge	zero,r3,8009ef0 <___vfiprintf_internal_r+0x3cc>
 800a68c:	19c00450 	cmplti	r7,r3,17
 800a690:	3801e41e 	bne	r7,zero,800ae24 <___vfiprintf_internal_r+0x1300>
 800a694:	01c20074 	movhi	r7,2049
 800a698:	39c9ff04 	addi	r7,r7,10236
 800a69c:	03400404 	movi	r13,16
 800a6a0:	00000606 	br	800a6bc <___vfiprintf_internal_r+0xb98>
 800a6a4:	23800084 	addi	r14,r4,2
 800a6a8:	84000204 	addi	r16,r16,8
 800a6ac:	2809883a 	mov	r4,r5
 800a6b0:	18fffc04 	addi	r3,r3,-16
 800a6b4:	19400448 	cmpgei	r5,r3,17
 800a6b8:	28001c26 	beq	r5,zero,800a72c <___vfiprintf_internal_r+0xc08>
 800a6bc:	21400044 	addi	r5,r4,1
 800a6c0:	10800404 	addi	r2,r2,16
 800a6c4:	81c00015 	stw	r7,0(r16)
 800a6c8:	83400115 	stw	r13,4(r16)
 800a6cc:	d8800c15 	stw	r2,48(sp)
 800a6d0:	d9400b15 	stw	r5,44(sp)
 800a6d4:	29800208 	cmpgei	r6,r5,8
 800a6d8:	303ff226 	beq	r6,zero,800a6a4 <___vfiprintf_internal_r+0xb80>
 800a6dc:	d9800a04 	addi	r6,sp,40
 800a6e0:	a80b883a 	mov	r5,r21
 800a6e4:	b009883a 	mov	r4,r22
 800a6e8:	10007826 	beq	r2,zero,800a8cc <___vfiprintf_internal_r+0xda8>
 800a6ec:	d9c00615 	stw	r7,24(sp)
 800a6f0:	d8c00315 	stw	r3,12(sp)
 800a6f4:	da000215 	stw	r8,8(sp)
 800a6f8:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a6fc:	103e1e1e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a700:	d8c00317 	ldw	r3,12(sp)
 800a704:	d9000b17 	ldw	r4,44(sp)
 800a708:	d8800c17 	ldw	r2,48(sp)
 800a70c:	18fffc04 	addi	r3,r3,-16
 800a710:	19400448 	cmpgei	r5,r3,17
 800a714:	d9c00617 	ldw	r7,24(sp)
 800a718:	da000217 	ldw	r8,8(sp)
 800a71c:	9021883a 	mov	r16,r18
 800a720:	23800044 	addi	r14,r4,1
 800a724:	03400404 	movi	r13,16
 800a728:	283fe41e 	bne	r5,zero,800a6bc <___vfiprintf_internal_r+0xb98>
 800a72c:	83400204 	addi	r13,r16,8
 800a730:	10c5883a 	add	r2,r2,r3
 800a734:	80c00115 	stw	r3,4(r16)
 800a738:	81c00015 	stw	r7,0(r16)
 800a73c:	d8800c15 	stw	r2,48(sp)
 800a740:	db800b15 	stw	r14,44(sp)
 800a744:	70c00208 	cmpgei	r3,r14,8
 800a748:	18011326 	beq	r3,zero,800ab98 <___vfiprintf_internal_r+0x1074>
 800a74c:	10018826 	beq	r2,zero,800ad70 <___vfiprintf_internal_r+0x124c>
 800a750:	d9800a04 	addi	r6,sp,40
 800a754:	a80b883a 	mov	r5,r21
 800a758:	b009883a 	mov	r4,r22
 800a75c:	da000215 	stw	r8,8(sp)
 800a760:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a764:	103e041e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a768:	da000217 	ldw	r8,8(sp)
 800a76c:	d9000b17 	ldw	r4,44(sp)
 800a770:	d8800c17 	ldw	r2,48(sp)
 800a774:	4711c83a 	sub	r8,r8,fp
 800a778:	d9801904 	addi	r6,sp,100
 800a77c:	21400044 	addi	r5,r4,1
 800a780:	9021883a 	mov	r16,r18
 800a784:	023ddc0e 	bge	zero,r8,8009ef8 <___vfiprintf_internal_r+0x3d4>
 800a788:	40c00450 	cmplti	r3,r8,17
 800a78c:	01c20074 	movhi	r7,2049
 800a790:	1801741e 	bne	r3,zero,800ad64 <___vfiprintf_internal_r+0x1240>
 800a794:	39c9ff04 	addi	r7,r7,10236
 800a798:	03400404 	movi	r13,16
 800a79c:	00000606 	br	800a7b8 <___vfiprintf_internal_r+0xc94>
 800a7a0:	21400084 	addi	r5,r4,2
 800a7a4:	84000204 	addi	r16,r16,8
 800a7a8:	1809883a 	mov	r4,r3
 800a7ac:	423ffc04 	addi	r8,r8,-16
 800a7b0:	40c00448 	cmpgei	r3,r8,17
 800a7b4:	18001a26 	beq	r3,zero,800a820 <___vfiprintf_internal_r+0xcfc>
 800a7b8:	20c00044 	addi	r3,r4,1
 800a7bc:	10800404 	addi	r2,r2,16
 800a7c0:	81c00015 	stw	r7,0(r16)
 800a7c4:	83400115 	stw	r13,4(r16)
 800a7c8:	d8800c15 	stw	r2,48(sp)
 800a7cc:	d8c00b15 	stw	r3,44(sp)
 800a7d0:	19400208 	cmpgei	r5,r3,8
 800a7d4:	283ff226 	beq	r5,zero,800a7a0 <___vfiprintf_internal_r+0xc7c>
 800a7d8:	d9800a04 	addi	r6,sp,40
 800a7dc:	a80b883a 	mov	r5,r21
 800a7e0:	b009883a 	mov	r4,r22
 800a7e4:	10001a26 	beq	r2,zero,800a850 <___vfiprintf_internal_r+0xd2c>
 800a7e8:	d9c00315 	stw	r7,12(sp)
 800a7ec:	da000215 	stw	r8,8(sp)
 800a7f0:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a7f4:	103de01e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a7f8:	da000217 	ldw	r8,8(sp)
 800a7fc:	d9000b17 	ldw	r4,44(sp)
 800a800:	d8800c17 	ldw	r2,48(sp)
 800a804:	423ffc04 	addi	r8,r8,-16
 800a808:	40c00448 	cmpgei	r3,r8,17
 800a80c:	d9c00317 	ldw	r7,12(sp)
 800a810:	9021883a 	mov	r16,r18
 800a814:	21400044 	addi	r5,r4,1
 800a818:	03400404 	movi	r13,16
 800a81c:	183fe61e 	bne	r3,zero,800a7b8 <___vfiprintf_internal_r+0xc94>
 800a820:	81000204 	addi	r4,r16,8
 800a824:	1205883a 	add	r2,r2,r8
 800a828:	81c00015 	stw	r7,0(r16)
 800a82c:	82000115 	stw	r8,4(r16)
 800a830:	d8800c15 	stw	r2,48(sp)
 800a834:	d9400b15 	stw	r5,44(sp)
 800a838:	28c00208 	cmpgei	r3,r5,8
 800a83c:	1800a41e 	bne	r3,zero,800aad0 <___vfiprintf_internal_r+0xfac>
 800a840:	29400044 	addi	r5,r5,1
 800a844:	21800204 	addi	r6,r4,8
 800a848:	2021883a 	mov	r16,r4
 800a84c:	003daa06 	br	8009ef8 <___vfiprintf_internal_r+0x3d4>
 800a850:	01400044 	movi	r5,1
 800a854:	0009883a 	mov	r4,zero
 800a858:	9021883a 	mov	r16,r18
 800a85c:	003fd306 	br	800a7ac <___vfiprintf_internal_r+0xc88>
 800a860:	10c00060 	cmpeqi	r3,r2,1
 800a864:	1801561e 	bne	r3,zero,800adc0 <___vfiprintf_internal_r+0x129c>
 800a868:	108000a0 	cmpeqi	r2,r2,2
 800a86c:	db400017 	ldw	r13,0(sp)
 800a870:	103ef626 	beq	r2,zero,800a44c <___vfiprintf_internal_r+0x928>
 800a874:	9027883a 	mov	r19,r18
 800a878:	d9000517 	ldw	r4,20(sp)
 800a87c:	b88003cc 	andi	r2,r23,15
 800a880:	e006973a 	slli	r3,fp,28
 800a884:	b82ed13a 	srli	r23,r23,4
 800a888:	2085883a 	add	r2,r4,r2
 800a88c:	10800003 	ldbu	r2,0(r2)
 800a890:	e038d13a 	srli	fp,fp,4
 800a894:	1deeb03a 	or	r23,r3,r23
 800a898:	98bfffc5 	stb	r2,-1(r19)
 800a89c:	bf04b03a 	or	r2,r23,fp
 800a8a0:	9cffffc4 	addi	r19,r19,-1
 800a8a4:	103ff41e 	bne	r2,zero,800a878 <___vfiprintf_internal_r+0xd54>
 800a8a8:	94f9c83a 	sub	fp,r18,r19
 800a8ac:	db400015 	stw	r13,0(sp)
 800a8b0:	003eff06 	br	800a4b0 <___vfiprintf_internal_r+0x98c>
 800a8b4:	d9800a04 	addi	r6,sp,40
 800a8b8:	a80b883a 	mov	r5,r21
 800a8bc:	b009883a 	mov	r4,r22
 800a8c0:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a8c4:	103da626 	beq	r2,zero,8009f60 <___vfiprintf_internal_r+0x43c>
 800a8c8:	003dab06 	br	8009f78 <___vfiprintf_internal_r+0x454>
 800a8cc:	03800044 	movi	r14,1
 800a8d0:	0009883a 	mov	r4,zero
 800a8d4:	9021883a 	mov	r16,r18
 800a8d8:	003f7506 	br	800a6b0 <___vfiprintf_internal_r+0xb8c>
 800a8dc:	10009026 	beq	r2,zero,800ab20 <___vfiprintf_internal_r+0xffc>
 800a8e0:	d9800a04 	addi	r6,sp,40
 800a8e4:	a80b883a 	mov	r5,r21
 800a8e8:	b009883a 	mov	r4,r22
 800a8ec:	da000615 	stw	r8,24(sp)
 800a8f0:	db400315 	stw	r13,12(sp)
 800a8f4:	db800215 	stw	r14,8(sp)
 800a8f8:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800a8fc:	103d9e1e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800a900:	d9000b17 	ldw	r4,44(sp)
 800a904:	d8800c17 	ldw	r2,48(sp)
 800a908:	da000617 	ldw	r8,24(sp)
 800a90c:	db400317 	ldw	r13,12(sp)
 800a910:	db800217 	ldw	r14,8(sp)
 800a914:	d9801904 	addi	r6,sp,100
 800a918:	21400044 	addi	r5,r4,1
 800a91c:	9021883a 	mov	r16,r18
 800a920:	003d5806 	br	8009e84 <___vfiprintf_internal_r+0x360>
 800a924:	d8800984 	addi	r2,sp,38
 800a928:	d8801715 	stw	r2,92(sp)
 800a92c:	00800084 	movi	r2,2
 800a930:	d8801815 	stw	r2,96(sp)
 800a934:	d9801904 	addi	r6,sp,100
 800a938:	01400044 	movi	r5,1
 800a93c:	3021883a 	mov	r16,r6
 800a940:	2809883a 	mov	r4,r5
 800a944:	21400044 	addi	r5,r4,1
 800a948:	81800204 	addi	r6,r16,8
 800a94c:	003d6606 	br	8009ee8 <___vfiprintf_internal_r+0x3c4>
 800a950:	db400017 	ldw	r13,0(sp)
 800a954:	003eb906 	br	800a43c <___vfiprintf_internal_r+0x918>
 800a958:	9027883a 	mov	r19,r18
 800a95c:	b809883a 	mov	r4,r23
 800a960:	e00b883a 	mov	r5,fp
 800a964:	01800284 	movi	r6,10
 800a968:	000f883a 	mov	r7,zero
 800a96c:	db800315 	stw	r14,12(sp)
 800a970:	da000215 	stw	r8,8(sp)
 800a974:	db400015 	stw	r13,0(sp)
 800a978:	800c6cc0 	call	800c6cc <__umoddi3>
 800a97c:	10800c04 	addi	r2,r2,48
 800a980:	b809883a 	mov	r4,r23
 800a984:	e00b883a 	mov	r5,fp
 800a988:	98bfffc5 	stb	r2,-1(r19)
 800a98c:	01800284 	movi	r6,10
 800a990:	000f883a 	mov	r7,zero
 800a994:	800c0ac0 	call	800c0ac <__udivdi3>
 800a998:	e009883a 	mov	r4,fp
 800a99c:	b80b883a 	mov	r5,r23
 800a9a0:	db400017 	ldw	r13,0(sp)
 800a9a4:	da000217 	ldw	r8,8(sp)
 800a9a8:	db800317 	ldw	r14,12(sp)
 800a9ac:	9cffffc4 	addi	r19,r19,-1
 800a9b0:	102f883a 	mov	r23,r2
 800a9b4:	1839883a 	mov	fp,r3
 800a9b8:	203fe81e 	bne	r4,zero,800a95c <___vfiprintf_internal_r+0xe38>
 800a9bc:	294002a8 	cmpgeui	r5,r5,10
 800a9c0:	283fe61e 	bne	r5,zero,800a95c <___vfiprintf_internal_r+0xe38>
 800a9c4:	94f9c83a 	sub	fp,r18,r19
 800a9c8:	003eb906 	br	800a4b0 <___vfiprintf_internal_r+0x98c>
 800a9cc:	19400450 	cmplti	r5,r3,17
 800a9d0:	01c20074 	movhi	r7,2049
 800a9d4:	2801061e 	bne	r5,zero,800adf0 <___vfiprintf_internal_r+0x12cc>
 800a9d8:	39ca0304 	addi	r7,r7,10252
 800a9dc:	03c00404 	movi	r15,16
 800a9e0:	00000706 	br	800aa00 <___vfiprintf_internal_r+0xedc>
 800a9e4:	27c00084 	addi	ra,r4,2
 800a9e8:	84000204 	addi	r16,r16,8
 800a9ec:	3009883a 	mov	r4,r6
 800a9f0:	18fffc04 	addi	r3,r3,-16
 800a9f4:	19400448 	cmpgei	r5,r3,17
 800a9f8:	28002026 	beq	r5,zero,800aa7c <___vfiprintf_internal_r+0xf58>
 800a9fc:	21800044 	addi	r6,r4,1
 800aa00:	10800404 	addi	r2,r2,16
 800aa04:	81c00015 	stw	r7,0(r16)
 800aa08:	83c00115 	stw	r15,4(r16)
 800aa0c:	d8800c15 	stw	r2,48(sp)
 800aa10:	d9800b15 	stw	r6,44(sp)
 800aa14:	31400208 	cmpgei	r5,r6,8
 800aa18:	283ff226 	beq	r5,zero,800a9e4 <___vfiprintf_internal_r+0xec0>
 800aa1c:	d9800a04 	addi	r6,sp,40
 800aa20:	a80b883a 	mov	r5,r21
 800aa24:	b009883a 	mov	r4,r22
 800aa28:	10001f26 	beq	r2,zero,800aaa8 <___vfiprintf_internal_r+0xf84>
 800aa2c:	d9c00815 	stw	r7,32(sp)
 800aa30:	d8c00715 	stw	r3,28(sp)
 800aa34:	da000615 	stw	r8,24(sp)
 800aa38:	db400315 	stw	r13,12(sp)
 800aa3c:	db800215 	stw	r14,8(sp)
 800aa40:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800aa44:	103d4c1e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800aa48:	d8c00717 	ldw	r3,28(sp)
 800aa4c:	d9000b17 	ldw	r4,44(sp)
 800aa50:	d8800c17 	ldw	r2,48(sp)
 800aa54:	18fffc04 	addi	r3,r3,-16
 800aa58:	19400448 	cmpgei	r5,r3,17
 800aa5c:	d9c00817 	ldw	r7,32(sp)
 800aa60:	da000617 	ldw	r8,24(sp)
 800aa64:	db400317 	ldw	r13,12(sp)
 800aa68:	db800217 	ldw	r14,8(sp)
 800aa6c:	9021883a 	mov	r16,r18
 800aa70:	27c00044 	addi	ra,r4,1
 800aa74:	03c00404 	movi	r15,16
 800aa78:	283fe01e 	bne	r5,zero,800a9fc <___vfiprintf_internal_r+0xed8>
 800aa7c:	10c5883a 	add	r2,r2,r3
 800aa80:	80c00115 	stw	r3,4(r16)
 800aa84:	81c00015 	stw	r7,0(r16)
 800aa88:	d8800c15 	stw	r2,48(sp)
 800aa8c:	dfc00b15 	stw	ra,44(sp)
 800aa90:	f8c00208 	cmpgei	r3,ra,8
 800aa94:	18002d1e 	bne	r3,zero,800ab4c <___vfiprintf_internal_r+0x1028>
 800aa98:	84000204 	addi	r16,r16,8
 800aa9c:	f9400044 	addi	r5,ra,1
 800aaa0:	f809883a 	mov	r4,ra
 800aaa4:	003ce706 	br	8009e44 <___vfiprintf_internal_r+0x320>
 800aaa8:	0009883a 	mov	r4,zero
 800aaac:	07c00044 	movi	ra,1
 800aab0:	9021883a 	mov	r16,r18
 800aab4:	003fce06 	br	800a9f0 <___vfiprintf_internal_r+0xecc>
 800aab8:	8dc0010e 	bge	r17,r23,800aac0 <___vfiprintf_internal_r+0xf9c>
 800aabc:	b823883a 	mov	r17,r23
 800aac0:	d8800117 	ldw	r2,4(sp)
 800aac4:	1445883a 	add	r2,r2,r17
 800aac8:	d8800115 	stw	r2,4(sp)
 800aacc:	003d2406 	br	8009f60 <___vfiprintf_internal_r+0x43c>
 800aad0:	10007626 	beq	r2,zero,800acac <___vfiprintf_internal_r+0x1188>
 800aad4:	d9800a04 	addi	r6,sp,40
 800aad8:	a80b883a 	mov	r5,r21
 800aadc:	b009883a 	mov	r4,r22
 800aae0:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800aae4:	103d241e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800aae8:	d9400b17 	ldw	r5,44(sp)
 800aaec:	d8800c17 	ldw	r2,48(sp)
 800aaf0:	d9801904 	addi	r6,sp,100
 800aaf4:	29400044 	addi	r5,r5,1
 800aaf8:	9021883a 	mov	r16,r18
 800aafc:	003cfe06 	br	8009ef8 <___vfiprintf_internal_r+0x3d4>
 800ab00:	d8000b15 	stw	zero,44(sp)
 800ab04:	9021883a 	mov	r16,r18
 800ab08:	003d7606 	br	800a0e4 <___vfiprintf_internal_r+0x5c0>
 800ab0c:	4000ac1e 	bne	r8,zero,800adc0 <___vfiprintf_internal_r+0x129c>
 800ab10:	0011883a 	mov	r8,zero
 800ab14:	0039883a 	mov	fp,zero
 800ab18:	9027883a 	mov	r19,r18
 800ab1c:	003e6406 	br	800a4b0 <___vfiprintf_internal_r+0x98c>
 800ab20:	7000411e 	bne	r14,zero,800ac28 <___vfiprintf_internal_r+0x1104>
 800ab24:	0009883a 	mov	r4,zero
 800ab28:	d9801904 	addi	r6,sp,100
 800ab2c:	01400044 	movi	r5,1
 800ab30:	9021883a 	mov	r16,r18
 800ab34:	003cec06 	br	8009ee8 <___vfiprintf_internal_r+0x3c4>
 800ab38:	d9801904 	addi	r6,sp,100
 800ab3c:	01400044 	movi	r5,1
 800ab40:	0009883a 	mov	r4,zero
 800ab44:	9021883a 	mov	r16,r18
 800ab48:	003ce706 	br	8009ee8 <___vfiprintf_internal_r+0x3c4>
 800ab4c:	10004a26 	beq	r2,zero,800ac78 <___vfiprintf_internal_r+0x1154>
 800ab50:	d9800a04 	addi	r6,sp,40
 800ab54:	a80b883a 	mov	r5,r21
 800ab58:	b009883a 	mov	r4,r22
 800ab5c:	da000615 	stw	r8,24(sp)
 800ab60:	db400315 	stw	r13,12(sp)
 800ab64:	db800215 	stw	r14,8(sp)
 800ab68:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800ab6c:	103d021e 	bne	r2,zero,8009f78 <___vfiprintf_internal_r+0x454>
 800ab70:	d9000b17 	ldw	r4,44(sp)
 800ab74:	d8800c17 	ldw	r2,48(sp)
 800ab78:	da000617 	ldw	r8,24(sp)
 800ab7c:	db400317 	ldw	r13,12(sp)
 800ab80:	db800217 	ldw	r14,8(sp)
 800ab84:	9021883a 	mov	r16,r18
 800ab88:	21400044 	addi	r5,r4,1
 800ab8c:	003cad06 	br	8009e44 <___vfiprintf_internal_r+0x320>
 800ab90:	9027883a 	mov	r19,r18
 800ab94:	003e4606 	br	800a4b0 <___vfiprintf_internal_r+0x98c>
 800ab98:	71400044 	addi	r5,r14,1
 800ab9c:	69800204 	addi	r6,r13,8
 800aba0:	7009883a 	mov	r4,r14
 800aba4:	6821883a 	mov	r16,r13
 800aba8:	003cd106 	br	8009ef0 <___vfiprintf_internal_r+0x3cc>
 800abac:	25c00017 	ldw	r23,0(r4)
 800abb0:	d8c00415 	stw	r3,16(sp)
 800abb4:	b839d7fa 	srai	fp,r23,31
 800abb8:	e005883a 	mov	r2,fp
 800abbc:	003db406 	br	800a290 <___vfiprintf_internal_r+0x76c>
 800abc0:	00c00c04 	movi	r3,48
 800abc4:	d88009c5 	stb	r2,39(sp)
 800abc8:	d8c00985 	stb	r3,38(sp)
 800abcc:	6b400094 	ori	r13,r13,2
 800abd0:	00800084 	movi	r2,2
 800abd4:	003d2506 	br	800a06c <___vfiprintf_internal_r+0x548>
 800abd8:	25c00017 	ldw	r23,0(r4)
 800abdc:	0039883a 	mov	fp,zero
 800abe0:	d8c00415 	stw	r3,16(sp)
 800abe4:	0005883a 	mov	r2,zero
 800abe8:	003d2006 	br	800a06c <___vfiprintf_internal_r+0x548>
 800abec:	d9400117 	ldw	r5,4(sp)
 800abf0:	d9000415 	stw	r4,16(sp)
 800abf4:	2805d7fa 	srai	r2,r5,31
 800abf8:	19400015 	stw	r5,0(r3)
 800abfc:	18800115 	stw	r2,4(r3)
 800ac00:	003bf106 	br	8009bc8 <___vfiprintf_internal_r+0xa4>
 800ac04:	2dc00017 	ldw	r23,0(r5)
 800ac08:	0039883a 	mov	fp,zero
 800ac0c:	d9000415 	stw	r4,16(sp)
 800ac10:	003dc106 	br	800a318 <___vfiprintf_internal_r+0x7f4>
 800ac14:	25c00017 	ldw	r23,0(r4)
 800ac18:	0039883a 	mov	fp,zero
 800ac1c:	d8c00415 	stw	r3,16(sp)
 800ac20:	00800044 	movi	r2,1
 800ac24:	003d1106 	br	800a06c <___vfiprintf_internal_r+0x548>
 800ac28:	d8800984 	addi	r2,sp,38
 800ac2c:	d8801715 	stw	r2,92(sp)
 800ac30:	00800084 	movi	r2,2
 800ac34:	d8801815 	stw	r2,96(sp)
 800ac38:	dc001904 	addi	r16,sp,100
 800ac3c:	01000044 	movi	r4,1
 800ac40:	003f4006 	br	800a944 <___vfiprintf_internal_r+0xe20>
 800ac44:	0463c83a 	sub	r17,zero,r17
 800ac48:	d8c00415 	stw	r3,16(sp)
 800ac4c:	003e3806 	br	800a530 <___vfiprintf_internal_r+0xa0c>
 800ac50:	9809883a 	mov	r4,r19
 800ac54:	d8c00215 	stw	r3,8(sp)
 800ac58:	db400015 	stw	r13,0(sp)
 800ac5c:	80024dc0 	call	80024dc <strlen>
 800ac60:	d8c00217 	ldw	r3,8(sp)
 800ac64:	db400017 	ldw	r13,0(sp)
 800ac68:	1039883a 	mov	fp,r2
 800ac6c:	102f883a 	mov	r23,r2
 800ac70:	d8c00415 	stw	r3,16(sp)
 800ac74:	003c6406 	br	8009e08 <___vfiprintf_internal_r+0x2e4>
 800ac78:	d8c00947 	ldb	r3,37(sp)
 800ac7c:	18004326 	beq	r3,zero,800ad8c <___vfiprintf_internal_r+0x1268>
 800ac80:	d8800944 	addi	r2,sp,37
 800ac84:	d8801715 	stw	r2,92(sp)
 800ac88:	00800044 	movi	r2,1
 800ac8c:	d8801815 	stw	r2,96(sp)
 800ac90:	d9801904 	addi	r6,sp,100
 800ac94:	01400044 	movi	r5,1
 800ac98:	003c7606 	br	8009e74 <___vfiprintf_internal_r+0x350>
 800ac9c:	d8800117 	ldw	r2,4(sp)
 800aca0:	18800015 	stw	r2,0(r3)
 800aca4:	d9000415 	stw	r4,16(sp)
 800aca8:	003bc706 	br	8009bc8 <___vfiprintf_internal_r+0xa4>
 800acac:	00c00044 	movi	r3,1
 800acb0:	e005883a 	mov	r2,fp
 800acb4:	dcc01715 	stw	r19,92(sp)
 800acb8:	df001815 	stw	fp,96(sp)
 800acbc:	df000c15 	stw	fp,48(sp)
 800acc0:	d8c00b15 	stw	r3,44(sp)
 800acc4:	d9801904 	addi	r6,sp,100
 800acc8:	003c9a06 	br	8009f34 <___vfiprintf_internal_r+0x410>
 800accc:	a0800043 	ldbu	r2,1(r20)
 800acd0:	6b400814 	ori	r13,r13,32
 800acd4:	a5000044 	addi	r20,r20,1
 800acd8:	10803fcc 	andi	r2,r2,255
 800acdc:	1080201c 	xori	r2,r2,128
 800ace0:	10bfe004 	addi	r2,r2,-128
 800ace4:	003bd006 	br	8009c28 <___vfiprintf_internal_r+0x104>
 800ace8:	408001f0 	cmpltui	r2,r8,7
 800acec:	4039883a 	mov	fp,r8
 800acf0:	10002426 	beq	r2,zero,800ad84 <___vfiprintf_internal_r+0x1260>
 800acf4:	04c20074 	movhi	r19,2049
 800acf8:	e02f883a 	mov	r23,fp
 800acfc:	d8c00415 	stw	r3,16(sp)
 800ad00:	9cc98204 	addi	r19,r19,9736
 800ad04:	003c4006 	br	8009e08 <___vfiprintf_internal_r+0x2e4>
 800ad08:	d8c00417 	ldw	r3,16(sp)
 800ad0c:	0039883a 	mov	fp,zero
 800ad10:	d9000415 	stw	r4,16(sp)
 800ad14:	1dc00017 	ldw	r23,0(r3)
 800ad18:	003d7f06 	br	800a318 <___vfiprintf_internal_r+0x7f4>
 800ad1c:	d8800417 	ldw	r2,16(sp)
 800ad20:	0039883a 	mov	fp,zero
 800ad24:	d8c00415 	stw	r3,16(sp)
 800ad28:	15c00017 	ldw	r23,0(r2)
 800ad2c:	0005883a 	mov	r2,zero
 800ad30:	003cce06 	br	800a06c <___vfiprintf_internal_r+0x548>
 800ad34:	d8800417 	ldw	r2,16(sp)
 800ad38:	d8c00415 	stw	r3,16(sp)
 800ad3c:	15c00017 	ldw	r23,0(r2)
 800ad40:	b839d7fa 	srai	fp,r23,31
 800ad44:	e005883a 	mov	r2,fp
 800ad48:	003d5106 	br	800a290 <___vfiprintf_internal_r+0x76c>
 800ad4c:	d8800417 	ldw	r2,16(sp)
 800ad50:	0039883a 	mov	fp,zero
 800ad54:	d8c00415 	stw	r3,16(sp)
 800ad58:	15c00017 	ldw	r23,0(r2)
 800ad5c:	00800044 	movi	r2,1
 800ad60:	003cc206 	br	800a06c <___vfiprintf_internal_r+0x548>
 800ad64:	3009883a 	mov	r4,r6
 800ad68:	39c9ff04 	addi	r7,r7,10236
 800ad6c:	003ead06 	br	800a824 <___vfiprintf_internal_r+0xd00>
 800ad70:	d9801904 	addi	r6,sp,100
 800ad74:	01400044 	movi	r5,1
 800ad78:	0009883a 	mov	r4,zero
 800ad7c:	9021883a 	mov	r16,r18
 800ad80:	003c5b06 	br	8009ef0 <___vfiprintf_internal_r+0x3cc>
 800ad84:	07000184 	movi	fp,6
 800ad88:	003fda06 	br	800acf4 <___vfiprintf_internal_r+0x11d0>
 800ad8c:	703ee51e 	bne	r14,zero,800a924 <___vfiprintf_internal_r+0xe00>
 800ad90:	0009883a 	mov	r4,zero
 800ad94:	d9801904 	addi	r6,sp,100
 800ad98:	01400044 	movi	r5,1
 800ad9c:	9021883a 	mov	r16,r18
 800ada0:	003c5306 	br	8009ef0 <___vfiprintf_internal_r+0x3cc>
 800ada4:	d9800945 	stb	r6,37(sp)
 800ada8:	003c1106 	br	8009df0 <___vfiprintf_internal_r+0x2cc>
 800adac:	d9800a04 	addi	r6,sp,40
 800adb0:	a80b883a 	mov	r5,r21
 800adb4:	b009883a 	mov	r4,r22
 800adb8:	8009a180 	call	8009a18 <__sprint_r.part.0>
 800adbc:	003c6e06 	br	8009f78 <___vfiprintf_internal_r+0x454>
 800adc0:	db400017 	ldw	r13,0(sp)
 800adc4:	003d3f06 	br	800a2c4 <___vfiprintf_internal_r+0x7a0>
 800adc8:	402f883a 	mov	r23,r8
 800adcc:	d8c00415 	stw	r3,16(sp)
 800add0:	4039883a 	mov	fp,r8
 800add4:	003c0c06 	br	8009e08 <___vfiprintf_internal_r+0x2e4>
 800add8:	d9800945 	stb	r6,37(sp)
 800addc:	003d2406 	br	800a270 <___vfiprintf_internal_r+0x74c>
 800ade0:	d9800945 	stb	r6,37(sp)
 800ade4:	003d4206 	br	800a2f0 <___vfiprintf_internal_r+0x7cc>
 800ade8:	d9800945 	stb	r6,37(sp)
 800adec:	003d7a06 	br	800a3d8 <___vfiprintf_internal_r+0x8b4>
 800adf0:	303f883a 	mov	ra,r6
 800adf4:	39ca0304 	addi	r7,r7,10252
 800adf8:	003f2006 	br	800aa7c <___vfiprintf_internal_r+0xf58>
 800adfc:	d9800945 	stb	r6,37(sp)
 800ae00:	003df806 	br	800a5e4 <___vfiprintf_internal_r+0xac0>
 800ae04:	d9800945 	stb	r6,37(sp)
 800ae08:	003e0806 	br	800a62c <___vfiprintf_internal_r+0xb08>
 800ae0c:	21400044 	addi	r5,r4,1
 800ae10:	39ca0304 	addi	r7,r7,10252
 800ae14:	003d0306 	br	800a224 <___vfiprintf_internal_r+0x700>
 800ae18:	00bfffc4 	movi	r2,-1
 800ae1c:	d8800115 	stw	r2,4(sp)
 800ae20:	003c5806 	br	8009f84 <___vfiprintf_internal_r+0x460>
 800ae24:	01c20074 	movhi	r7,2049
 800ae28:	301b883a 	mov	r13,r6
 800ae2c:	281d883a 	mov	r14,r5
 800ae30:	39c9ff04 	addi	r7,r7,10236
 800ae34:	003e3e06 	br	800a730 <___vfiprintf_internal_r+0xc0c>
 800ae38:	d8800417 	ldw	r2,16(sp)
 800ae3c:	12000017 	ldw	r8,0(r2)
 800ae40:	11000104 	addi	r4,r2,4
 800ae44:	4000010e 	bge	r8,zero,800ae4c <___vfiprintf_internal_r+0x1328>
 800ae48:	023fffc4 	movi	r8,-1
 800ae4c:	a0800043 	ldbu	r2,1(r20)
 800ae50:	d9000415 	stw	r4,16(sp)
 800ae54:	1829883a 	mov	r20,r3
 800ae58:	10803fcc 	andi	r2,r2,255
 800ae5c:	1080201c 	xori	r2,r2,128
 800ae60:	10bfe004 	addi	r2,r2,-128
 800ae64:	003b7006 	br	8009c28 <___vfiprintf_internal_r+0x104>

0800ae68 <__vfiprintf_internal>:
 800ae68:	00c20074 	movhi	r3,2049
 800ae6c:	2005883a 	mov	r2,r4
 800ae70:	1911f217 	ldw	r4,18376(r3)
 800ae74:	300f883a 	mov	r7,r6
 800ae78:	280d883a 	mov	r6,r5
 800ae7c:	100b883a 	mov	r5,r2
 800ae80:	8009b241 	jmpi	8009b24 <___vfiprintf_internal_r>

0800ae84 <__sbprintf>:
 800ae84:	2880030b 	ldhu	r2,12(r5)
 800ae88:	2b001917 	ldw	r12,100(r5)
 800ae8c:	2ac0038b 	ldhu	r11,14(r5)
 800ae90:	2a800717 	ldw	r10,28(r5)
 800ae94:	2a400917 	ldw	r9,36(r5)
 800ae98:	defee204 	addi	sp,sp,-1144
 800ae9c:	da001a04 	addi	r8,sp,104
 800aea0:	00c10004 	movi	r3,1024
 800aea4:	dc011a15 	stw	r16,1128(sp)
 800aea8:	10bfff4c 	andi	r2,r2,65533
 800aeac:	2821883a 	mov	r16,r5
 800aeb0:	d80b883a 	mov	r5,sp
 800aeb4:	dc811c15 	stw	r18,1136(sp)
 800aeb8:	dc411b15 	stw	r17,1132(sp)
 800aebc:	dfc11d15 	stw	ra,1140(sp)
 800aec0:	2025883a 	mov	r18,r4
 800aec4:	d880030d 	sth	r2,12(sp)
 800aec8:	db001915 	stw	r12,100(sp)
 800aecc:	dac0038d 	sth	r11,14(sp)
 800aed0:	da800715 	stw	r10,28(sp)
 800aed4:	da400915 	stw	r9,36(sp)
 800aed8:	da000015 	stw	r8,0(sp)
 800aedc:	da000415 	stw	r8,16(sp)
 800aee0:	d8c00215 	stw	r3,8(sp)
 800aee4:	d8c00515 	stw	r3,20(sp)
 800aee8:	d8000615 	stw	zero,24(sp)
 800aeec:	8009b240 	call	8009b24 <___vfiprintf_internal_r>
 800aef0:	1023883a 	mov	r17,r2
 800aef4:	10000d0e 	bge	r2,zero,800af2c <__sbprintf+0xa8>
 800aef8:	d880030b 	ldhu	r2,12(sp)
 800aefc:	1080100c 	andi	r2,r2,64
 800af00:	10000326 	beq	r2,zero,800af10 <__sbprintf+0x8c>
 800af04:	8080030b 	ldhu	r2,12(r16)
 800af08:	10801014 	ori	r2,r2,64
 800af0c:	8080030d 	sth	r2,12(r16)
 800af10:	8805883a 	mov	r2,r17
 800af14:	dfc11d17 	ldw	ra,1140(sp)
 800af18:	dc811c17 	ldw	r18,1136(sp)
 800af1c:	dc411b17 	ldw	r17,1132(sp)
 800af20:	dc011a17 	ldw	r16,1128(sp)
 800af24:	dec11e04 	addi	sp,sp,1144
 800af28:	f800283a 	ret
 800af2c:	d80b883a 	mov	r5,sp
 800af30:	9009883a 	mov	r4,r18
 800af34:	80064480 	call	8006448 <_fflush_r>
 800af38:	103fef26 	beq	r2,zero,800aef8 <__sbprintf+0x74>
 800af3c:	047fffc4 	movi	r17,-1
 800af40:	003fed06 	br	800aef8 <__sbprintf+0x74>

0800af44 <_write_r>:
 800af44:	2807883a 	mov	r3,r5
 800af48:	defffe04 	addi	sp,sp,-8
 800af4c:	dc000015 	stw	r16,0(sp)
 800af50:	300b883a 	mov	r5,r6
 800af54:	00820074 	movhi	r2,2049
 800af58:	380d883a 	mov	r6,r7
 800af5c:	2021883a 	mov	r16,r4
 800af60:	1809883a 	mov	r4,r3
 800af64:	dfc00115 	stw	ra,4(sp)
 800af68:	1018f915 	stw	zero,25572(r2)
 800af6c:	80100380 	call	8010038 <write>
 800af70:	10ffffd8 	cmpnei	r3,r2,-1
 800af74:	18000426 	beq	r3,zero,800af88 <_write_r+0x44>
 800af78:	dfc00117 	ldw	ra,4(sp)
 800af7c:	dc000017 	ldw	r16,0(sp)
 800af80:	dec00204 	addi	sp,sp,8
 800af84:	f800283a 	ret
 800af88:	00c20074 	movhi	r3,2049
 800af8c:	18d8f917 	ldw	r3,25572(r3)
 800af90:	183ff926 	beq	r3,zero,800af78 <_write_r+0x34>
 800af94:	80c00015 	stw	r3,0(r16)
 800af98:	dfc00117 	ldw	ra,4(sp)
 800af9c:	dc000017 	ldw	r16,0(sp)
 800afa0:	dec00204 	addi	sp,sp,8
 800afa4:	f800283a 	ret

0800afa8 <_close_r>:
 800afa8:	defffe04 	addi	sp,sp,-8
 800afac:	dc000015 	stw	r16,0(sp)
 800afb0:	00820074 	movhi	r2,2049
 800afb4:	2021883a 	mov	r16,r4
 800afb8:	2809883a 	mov	r4,r5
 800afbc:	dfc00115 	stw	ra,4(sp)
 800afc0:	1018f915 	stw	zero,25572(r2)
 800afc4:	800f5e80 	call	800f5e8 <close>
 800afc8:	10ffffd8 	cmpnei	r3,r2,-1
 800afcc:	18000426 	beq	r3,zero,800afe0 <_close_r+0x38>
 800afd0:	dfc00117 	ldw	ra,4(sp)
 800afd4:	dc000017 	ldw	r16,0(sp)
 800afd8:	dec00204 	addi	sp,sp,8
 800afdc:	f800283a 	ret
 800afe0:	00c20074 	movhi	r3,2049
 800afe4:	18d8f917 	ldw	r3,25572(r3)
 800afe8:	183ff926 	beq	r3,zero,800afd0 <_close_r+0x28>
 800afec:	80c00015 	stw	r3,0(r16)
 800aff0:	dfc00117 	ldw	ra,4(sp)
 800aff4:	dc000017 	ldw	r16,0(sp)
 800aff8:	dec00204 	addi	sp,sp,8
 800affc:	f800283a 	ret

0800b000 <__assert_func>:
 800b000:	00820074 	movhi	r2,2049
 800b004:	1211f217 	ldw	r8,18376(r2)
 800b008:	defffc04 	addi	sp,sp,-16
 800b00c:	3807883a 	mov	r3,r7
 800b010:	3005883a 	mov	r2,r6
 800b014:	dfc00315 	stw	ra,12(sp)
 800b018:	42400317 	ldw	r9,12(r8)
 800b01c:	200f883a 	mov	r7,r4
 800b020:	2811883a 	mov	r8,r5
 800b024:	180d883a 	mov	r6,r3
 800b028:	10000a26 	beq	r2,zero,800b054 <__assert_func+0x54>
 800b02c:	00c20074 	movhi	r3,2049
 800b030:	18ca0704 	addi	r3,r3,10268
 800b034:	01420074 	movhi	r5,2049
 800b038:	294a0b04 	addi	r5,r5,10284
 800b03c:	4809883a 	mov	r4,r9
 800b040:	d8c00115 	stw	r3,4(sp)
 800b044:	da000015 	stw	r8,0(sp)
 800b048:	d8800215 	stw	r2,8(sp)
 800b04c:	800b2fc0 	call	800b2fc <fiprintf>
 800b050:	800bb440 	call	800bb44 <abort>
 800b054:	00c20074 	movhi	r3,2049
 800b058:	18ca0a04 	addi	r3,r3,10280
 800b05c:	1805883a 	mov	r2,r3
 800b060:	003ff406 	br	800b034 <__assert_func+0x34>

0800b064 <__assert>:
 800b064:	deffff04 	addi	sp,sp,-4
 800b068:	300f883a 	mov	r7,r6
 800b06c:	000d883a 	mov	r6,zero
 800b070:	dfc00015 	stw	ra,0(sp)
 800b074:	800b0000 	call	800b000 <__assert_func>

0800b078 <_calloc_r>:
 800b078:	defffe04 	addi	sp,sp,-8
 800b07c:	dc000015 	stw	r16,0(sp)
 800b080:	2021883a 	mov	r16,r4
 800b084:	2809883a 	mov	r4,r5
 800b088:	300b883a 	mov	r5,r6
 800b08c:	dfc00115 	stw	ra,4(sp)
 800b090:	800ce440 	call	800ce44 <__mulsi3>
 800b094:	8009883a 	mov	r4,r16
 800b098:	100b883a 	mov	r5,r2
 800b09c:	80075600 	call	8007560 <_malloc_r>
 800b0a0:	1009883a 	mov	r4,r2
 800b0a4:	10000c26 	beq	r2,zero,800b0d8 <_calloc_r+0x60>
 800b0a8:	11bfff17 	ldw	r6,-4(r2)
 800b0ac:	00bfff04 	movi	r2,-4
 800b0b0:	308c703a 	and	r6,r6,r2
 800b0b4:	31bfff04 	addi	r6,r6,-4
 800b0b8:	30800968 	cmpgeui	r2,r6,37
 800b0bc:	1000151e 	bne	r2,zero,800b114 <_calloc_r+0x9c>
 800b0c0:	30800530 	cmpltui	r2,r6,20
 800b0c4:	10000926 	beq	r2,zero,800b0ec <_calloc_r+0x74>
 800b0c8:	2005883a 	mov	r2,r4
 800b0cc:	10000015 	stw	zero,0(r2)
 800b0d0:	10000115 	stw	zero,4(r2)
 800b0d4:	10000215 	stw	zero,8(r2)
 800b0d8:	2005883a 	mov	r2,r4
 800b0dc:	dfc00117 	ldw	ra,4(sp)
 800b0e0:	dc000017 	ldw	r16,0(sp)
 800b0e4:	dec00204 	addi	sp,sp,8
 800b0e8:	f800283a 	ret
 800b0ec:	20000015 	stw	zero,0(r4)
 800b0f0:	20000115 	stw	zero,4(r4)
 800b0f4:	30800728 	cmpgeui	r2,r6,28
 800b0f8:	10000a26 	beq	r2,zero,800b124 <_calloc_r+0xac>
 800b0fc:	20000215 	stw	zero,8(r4)
 800b100:	20000315 	stw	zero,12(r4)
 800b104:	31800920 	cmpeqi	r6,r6,36
 800b108:	3000081e 	bne	r6,zero,800b12c <_calloc_r+0xb4>
 800b10c:	20800404 	addi	r2,r4,16
 800b110:	003fee06 	br	800b0cc <_calloc_r+0x54>
 800b114:	000b883a 	mov	r5,zero
 800b118:	800803c0 	call	800803c <memset>
 800b11c:	1009883a 	mov	r4,r2
 800b120:	003fed06 	br	800b0d8 <_calloc_r+0x60>
 800b124:	20800204 	addi	r2,r4,8
 800b128:	003fe806 	br	800b0cc <_calloc_r+0x54>
 800b12c:	20000415 	stw	zero,16(r4)
 800b130:	20800604 	addi	r2,r4,24
 800b134:	20000515 	stw	zero,20(r4)
 800b138:	003fe406 	br	800b0cc <_calloc_r+0x54>

0800b13c <_fclose_r.part.0>:
 800b13c:	defffc04 	addi	sp,sp,-16
 800b140:	dc800215 	stw	r18,8(sp)
 800b144:	dc400115 	stw	r17,4(sp)
 800b148:	dc000015 	stw	r16,0(sp)
 800b14c:	dfc00315 	stw	ra,12(sp)
 800b150:	2821883a 	mov	r16,r5
 800b154:	2023883a 	mov	r17,r4
 800b158:	80062200 	call	8006220 <__sflush_r>
 800b15c:	80c00b17 	ldw	r3,44(r16)
 800b160:	1025883a 	mov	r18,r2
 800b164:	18000426 	beq	r3,zero,800b178 <_fclose_r.part.0+0x3c>
 800b168:	81400717 	ldw	r5,28(r16)
 800b16c:	8809883a 	mov	r4,r17
 800b170:	183ee83a 	callr	r3
 800b174:	10001916 	blt	r2,zero,800b1dc <_fclose_r.part.0+0xa0>
 800b178:	8080030b 	ldhu	r2,12(r16)
 800b17c:	1080200c 	andi	r2,r2,128
 800b180:	10001a1e 	bne	r2,zero,800b1ec <_fclose_r.part.0+0xb0>
 800b184:	81400c17 	ldw	r5,48(r16)
 800b188:	28000526 	beq	r5,zero,800b1a0 <_fclose_r.part.0+0x64>
 800b18c:	80801004 	addi	r2,r16,64
 800b190:	28800226 	beq	r5,r2,800b19c <_fclose_r.part.0+0x60>
 800b194:	8809883a 	mov	r4,r17
 800b198:	80069f40 	call	80069f4 <_free_r>
 800b19c:	80000c15 	stw	zero,48(r16)
 800b1a0:	81401117 	ldw	r5,68(r16)
 800b1a4:	28000326 	beq	r5,zero,800b1b4 <_fclose_r.part.0+0x78>
 800b1a8:	8809883a 	mov	r4,r17
 800b1ac:	80069f40 	call	80069f4 <_free_r>
 800b1b0:	80001115 	stw	zero,68(r16)
 800b1b4:	80068a00 	call	80068a0 <__sfp_lock_acquire>
 800b1b8:	8000030d 	sth	zero,12(r16)
 800b1bc:	80068a40 	call	80068a4 <__sfp_lock_release>
 800b1c0:	9005883a 	mov	r2,r18
 800b1c4:	dfc00317 	ldw	ra,12(sp)
 800b1c8:	dc800217 	ldw	r18,8(sp)
 800b1cc:	dc400117 	ldw	r17,4(sp)
 800b1d0:	dc000017 	ldw	r16,0(sp)
 800b1d4:	dec00404 	addi	sp,sp,16
 800b1d8:	f800283a 	ret
 800b1dc:	8080030b 	ldhu	r2,12(r16)
 800b1e0:	04bfffc4 	movi	r18,-1
 800b1e4:	1080200c 	andi	r2,r2,128
 800b1e8:	103fe626 	beq	r2,zero,800b184 <_fclose_r.part.0+0x48>
 800b1ec:	81400417 	ldw	r5,16(r16)
 800b1f0:	8809883a 	mov	r4,r17
 800b1f4:	80069f40 	call	80069f4 <_free_r>
 800b1f8:	003fe206 	br	800b184 <_fclose_r.part.0+0x48>

0800b1fc <_fclose_r>:
 800b1fc:	28001926 	beq	r5,zero,800b264 <_fclose_r+0x68>
 800b200:	defffd04 	addi	sp,sp,-12
 800b204:	dc000115 	stw	r16,4(sp)
 800b208:	dfc00215 	stw	ra,8(sp)
 800b20c:	2021883a 	mov	r16,r4
 800b210:	20000226 	beq	r4,zero,800b21c <_fclose_r+0x20>
 800b214:	20800e17 	ldw	r2,56(r4)
 800b218:	10000c26 	beq	r2,zero,800b24c <_fclose_r+0x50>
 800b21c:	2880030f 	ldh	r2,12(r5)
 800b220:	1000051e 	bne	r2,zero,800b238 <_fclose_r+0x3c>
 800b224:	0005883a 	mov	r2,zero
 800b228:	dfc00217 	ldw	ra,8(sp)
 800b22c:	dc000117 	ldw	r16,4(sp)
 800b230:	dec00304 	addi	sp,sp,12
 800b234:	f800283a 	ret
 800b238:	8009883a 	mov	r4,r16
 800b23c:	dfc00217 	ldw	ra,8(sp)
 800b240:	dc000117 	ldw	r16,4(sp)
 800b244:	dec00304 	addi	sp,sp,12
 800b248:	800b13c1 	jmpi	800b13c <_fclose_r.part.0>
 800b24c:	d9400015 	stw	r5,0(sp)
 800b250:	80068900 	call	8006890 <__sinit>
 800b254:	d9400017 	ldw	r5,0(sp)
 800b258:	2880030f 	ldh	r2,12(r5)
 800b25c:	103ff126 	beq	r2,zero,800b224 <_fclose_r+0x28>
 800b260:	003ff506 	br	800b238 <_fclose_r+0x3c>
 800b264:	0005883a 	mov	r2,zero
 800b268:	f800283a 	ret

0800b26c <fclose>:
 800b26c:	20000826 	beq	r4,zero,800b290 <fclose+0x24>
 800b270:	00820074 	movhi	r2,2049
 800b274:	200b883a 	mov	r5,r4
 800b278:	1111f217 	ldw	r4,18376(r2)
 800b27c:	20000226 	beq	r4,zero,800b288 <fclose+0x1c>
 800b280:	20800e17 	ldw	r2,56(r4)
 800b284:	10000526 	beq	r2,zero,800b29c <fclose+0x30>
 800b288:	2880030f 	ldh	r2,12(r5)
 800b28c:	1000021e 	bne	r2,zero,800b298 <fclose+0x2c>
 800b290:	0005883a 	mov	r2,zero
 800b294:	f800283a 	ret
 800b298:	800b13c1 	jmpi	800b13c <_fclose_r.part.0>
 800b29c:	defffd04 	addi	sp,sp,-12
 800b2a0:	d9400115 	stw	r5,4(sp)
 800b2a4:	d9000015 	stw	r4,0(sp)
 800b2a8:	dfc00215 	stw	ra,8(sp)
 800b2ac:	80068900 	call	8006890 <__sinit>
 800b2b0:	d9400117 	ldw	r5,4(sp)
 800b2b4:	d9000017 	ldw	r4,0(sp)
 800b2b8:	2880030f 	ldh	r2,12(r5)
 800b2bc:	10000326 	beq	r2,zero,800b2cc <fclose+0x60>
 800b2c0:	dfc00217 	ldw	ra,8(sp)
 800b2c4:	dec00304 	addi	sp,sp,12
 800b2c8:	800b13c1 	jmpi	800b13c <_fclose_r.part.0>
 800b2cc:	0005883a 	mov	r2,zero
 800b2d0:	dfc00217 	ldw	ra,8(sp)
 800b2d4:	dec00304 	addi	sp,sp,12
 800b2d8:	f800283a 	ret

0800b2dc <_fiprintf_r>:
 800b2dc:	defffe04 	addi	sp,sp,-8
 800b2e0:	dfc00015 	stw	ra,0(sp)
 800b2e4:	d9c00115 	stw	r7,4(sp)
 800b2e8:	d9c00104 	addi	r7,sp,4
 800b2ec:	800b8b00 	call	800b8b0 <_vfiprintf_r>
 800b2f0:	dfc00017 	ldw	ra,0(sp)
 800b2f4:	dec00204 	addi	sp,sp,8
 800b2f8:	f800283a 	ret

0800b2fc <fiprintf>:
 800b2fc:	defffd04 	addi	sp,sp,-12
 800b300:	2005883a 	mov	r2,r4
 800b304:	dfc00015 	stw	ra,0(sp)
 800b308:	d9800115 	stw	r6,4(sp)
 800b30c:	d9c00215 	stw	r7,8(sp)
 800b310:	00c20074 	movhi	r3,2049
 800b314:	1911f217 	ldw	r4,18376(r3)
 800b318:	280d883a 	mov	r6,r5
 800b31c:	d9c00104 	addi	r7,sp,4
 800b320:	100b883a 	mov	r5,r2
 800b324:	800b8b00 	call	800b8b0 <_vfiprintf_r>
 800b328:	dfc00017 	ldw	ra,0(sp)
 800b32c:	dec00304 	addi	sp,sp,12
 800b330:	f800283a 	ret

0800b334 <__fputwc>:
 800b334:	defff904 	addi	sp,sp,-28
 800b338:	dcc00415 	stw	r19,16(sp)
 800b33c:	dc800315 	stw	r18,12(sp)
 800b340:	dc000115 	stw	r16,4(sp)
 800b344:	dfc00615 	stw	ra,24(sp)
 800b348:	dd000515 	stw	r20,20(sp)
 800b34c:	dc400215 	stw	r17,8(sp)
 800b350:	2025883a 	mov	r18,r4
 800b354:	2827883a 	mov	r19,r5
 800b358:	3021883a 	mov	r16,r6
 800b35c:	800b6600 	call	800b660 <__locale_mb_cur_max>
 800b360:	10800058 	cmpnei	r2,r2,1
 800b364:	1000071e 	bne	r2,zero,800b384 <__fputwc+0x50>
 800b368:	98bfffc4 	addi	r2,r19,-1
 800b36c:	10803fe8 	cmpgeui	r2,r2,255
 800b370:	1000041e 	bne	r2,zero,800b384 <__fputwc+0x50>
 800b374:	980b883a 	mov	r5,r19
 800b378:	dcc000c5 	stb	r19,3(sp)
 800b37c:	05000044 	movi	r20,1
 800b380:	00000a06 	br	800b3ac <__fputwc+0x78>
 800b384:	81c01704 	addi	r7,r16,92
 800b388:	980d883a 	mov	r6,r19
 800b38c:	d94000c4 	addi	r5,sp,3
 800b390:	9009883a 	mov	r4,r18
 800b394:	800ba140 	call	800ba14 <_wcrtomb_r>
 800b398:	1029883a 	mov	r20,r2
 800b39c:	10bfffd8 	cmpnei	r2,r2,-1
 800b3a0:	10003926 	beq	r2,zero,800b488 <__fputwc+0x154>
 800b3a4:	a0001f26 	beq	r20,zero,800b424 <__fputwc+0xf0>
 800b3a8:	d94000c3 	ldbu	r5,3(sp)
 800b3ac:	0023883a 	mov	r17,zero
 800b3b0:	00000a06 	br	800b3dc <__fputwc+0xa8>
 800b3b4:	80800017 	ldw	r2,0(r16)
 800b3b8:	11400005 	stb	r5,0(r2)
 800b3bc:	80c00017 	ldw	r3,0(r16)
 800b3c0:	18c00044 	addi	r3,r3,1
 800b3c4:	80c00015 	stw	r3,0(r16)
 800b3c8:	8c400044 	addi	r17,r17,1
 800b3cc:	d88000c4 	addi	r2,sp,3
 800b3d0:	1447883a 	add	r3,r2,r17
 800b3d4:	8d00132e 	bgeu	r17,r20,800b424 <__fputwc+0xf0>
 800b3d8:	19400003 	ldbu	r5,0(r3)
 800b3dc:	80c00217 	ldw	r3,8(r16)
 800b3e0:	18ffffc4 	addi	r3,r3,-1
 800b3e4:	80c00215 	stw	r3,8(r16)
 800b3e8:	183ff20e 	bge	r3,zero,800b3b4 <__fputwc+0x80>
 800b3ec:	80800617 	ldw	r2,24(r16)
 800b3f0:	18801616 	blt	r3,r2,800b44c <__fputwc+0x118>
 800b3f4:	80800017 	ldw	r2,0(r16)
 800b3f8:	11400005 	stb	r5,0(r2)
 800b3fc:	80800017 	ldw	r2,0(r16)
 800b400:	10c00003 	ldbu	r3,0(r2)
 800b404:	10800044 	addi	r2,r2,1
 800b408:	18c002a0 	cmpeqi	r3,r3,10
 800b40c:	1800171e 	bne	r3,zero,800b46c <__fputwc+0x138>
 800b410:	80800015 	stw	r2,0(r16)
 800b414:	8c400044 	addi	r17,r17,1
 800b418:	d88000c4 	addi	r2,sp,3
 800b41c:	1447883a 	add	r3,r2,r17
 800b420:	8d3fed36 	bltu	r17,r20,800b3d8 <__fputwc+0xa4>
 800b424:	9829883a 	mov	r20,r19
 800b428:	a005883a 	mov	r2,r20
 800b42c:	dfc00617 	ldw	ra,24(sp)
 800b430:	dd000517 	ldw	r20,20(sp)
 800b434:	dcc00417 	ldw	r19,16(sp)
 800b438:	dc800317 	ldw	r18,12(sp)
 800b43c:	dc400217 	ldw	r17,8(sp)
 800b440:	dc000117 	ldw	r16,4(sp)
 800b444:	dec00704 	addi	sp,sp,28
 800b448:	f800283a 	ret
 800b44c:	29403fcc 	andi	r5,r5,255
 800b450:	800d883a 	mov	r6,r16
 800b454:	9009883a 	mov	r4,r18
 800b458:	800b8b40 	call	800b8b4 <__swbuf_r>
 800b45c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b460:	103fd926 	beq	r2,zero,800b3c8 <__fputwc+0x94>
 800b464:	053fffc4 	movi	r20,-1
 800b468:	003fef06 	br	800b428 <__fputwc+0xf4>
 800b46c:	800d883a 	mov	r6,r16
 800b470:	01400284 	movi	r5,10
 800b474:	9009883a 	mov	r4,r18
 800b478:	800b8b40 	call	800b8b4 <__swbuf_r>
 800b47c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b480:	103fd126 	beq	r2,zero,800b3c8 <__fputwc+0x94>
 800b484:	003ff706 	br	800b464 <__fputwc+0x130>
 800b488:	8080030b 	ldhu	r2,12(r16)
 800b48c:	10801014 	ori	r2,r2,64
 800b490:	8080030d 	sth	r2,12(r16)
 800b494:	003fe406 	br	800b428 <__fputwc+0xf4>

0800b498 <_fputwc_r>:
 800b498:	3080030b 	ldhu	r2,12(r6)
 800b49c:	10c8000c 	andi	r3,r2,8192
 800b4a0:	1800051e 	bne	r3,zero,800b4b8 <_fputwc_r+0x20>
 800b4a4:	30c01917 	ldw	r3,100(r6)
 800b4a8:	10880014 	ori	r2,r2,8192
 800b4ac:	3080030d 	sth	r2,12(r6)
 800b4b0:	18880014 	ori	r2,r3,8192
 800b4b4:	30801915 	stw	r2,100(r6)
 800b4b8:	800b3341 	jmpi	800b334 <__fputwc>

0800b4bc <fputwc>:
 800b4bc:	defffc04 	addi	sp,sp,-16
 800b4c0:	00820074 	movhi	r2,2049
 800b4c4:	dc000215 	stw	r16,8(sp)
 800b4c8:	1411f217 	ldw	r16,18376(r2)
 800b4cc:	dfc00315 	stw	ra,12(sp)
 800b4d0:	280d883a 	mov	r6,r5
 800b4d4:	200b883a 	mov	r5,r4
 800b4d8:	80000226 	beq	r16,zero,800b4e4 <fputwc+0x28>
 800b4dc:	80800e17 	ldw	r2,56(r16)
 800b4e0:	10000d26 	beq	r2,zero,800b518 <fputwc+0x5c>
 800b4e4:	3080030b 	ldhu	r2,12(r6)
 800b4e8:	10c8000c 	andi	r3,r2,8192
 800b4ec:	1800051e 	bne	r3,zero,800b504 <fputwc+0x48>
 800b4f0:	30c01917 	ldw	r3,100(r6)
 800b4f4:	10880014 	ori	r2,r2,8192
 800b4f8:	3080030d 	sth	r2,12(r6)
 800b4fc:	18880014 	ori	r2,r3,8192
 800b500:	30801915 	stw	r2,100(r6)
 800b504:	8009883a 	mov	r4,r16
 800b508:	dfc00317 	ldw	ra,12(sp)
 800b50c:	dc000217 	ldw	r16,8(sp)
 800b510:	dec00404 	addi	sp,sp,16
 800b514:	800b3341 	jmpi	800b334 <__fputwc>
 800b518:	d9000015 	stw	r4,0(sp)
 800b51c:	8009883a 	mov	r4,r16
 800b520:	d9800115 	stw	r6,4(sp)
 800b524:	80068900 	call	8006890 <__sinit>
 800b528:	d9800117 	ldw	r6,4(sp)
 800b52c:	d9400017 	ldw	r5,0(sp)
 800b530:	003fec06 	br	800b4e4 <fputwc+0x28>

0800b534 <_fstat_r>:
 800b534:	2807883a 	mov	r3,r5
 800b538:	defffe04 	addi	sp,sp,-8
 800b53c:	dc000015 	stw	r16,0(sp)
 800b540:	00820074 	movhi	r2,2049
 800b544:	300b883a 	mov	r5,r6
 800b548:	2021883a 	mov	r16,r4
 800b54c:	1809883a 	mov	r4,r3
 800b550:	dfc00115 	stw	ra,4(sp)
 800b554:	1018f915 	stw	zero,25572(r2)
 800b558:	800f7640 	call	800f764 <fstat>
 800b55c:	10ffffd8 	cmpnei	r3,r2,-1
 800b560:	18000426 	beq	r3,zero,800b574 <_fstat_r+0x40>
 800b564:	dfc00117 	ldw	ra,4(sp)
 800b568:	dc000017 	ldw	r16,0(sp)
 800b56c:	dec00204 	addi	sp,sp,8
 800b570:	f800283a 	ret
 800b574:	00c20074 	movhi	r3,2049
 800b578:	18d8f917 	ldw	r3,25572(r3)
 800b57c:	183ff926 	beq	r3,zero,800b564 <_fstat_r+0x30>
 800b580:	80c00015 	stw	r3,0(r16)
 800b584:	dfc00117 	ldw	ra,4(sp)
 800b588:	dc000017 	ldw	r16,0(sp)
 800b58c:	dec00204 	addi	sp,sp,8
 800b590:	f800283a 	ret

0800b594 <_isatty_r>:
 800b594:	defffe04 	addi	sp,sp,-8
 800b598:	dc000015 	stw	r16,0(sp)
 800b59c:	00820074 	movhi	r2,2049
 800b5a0:	2021883a 	mov	r16,r4
 800b5a4:	2809883a 	mov	r4,r5
 800b5a8:	dfc00115 	stw	ra,4(sp)
 800b5ac:	1018f915 	stw	zero,25572(r2)
 800b5b0:	800f87c0 	call	800f87c <isatty>
 800b5b4:	10ffffd8 	cmpnei	r3,r2,-1
 800b5b8:	18000426 	beq	r3,zero,800b5cc <_isatty_r+0x38>
 800b5bc:	dfc00117 	ldw	ra,4(sp)
 800b5c0:	dc000017 	ldw	r16,0(sp)
 800b5c4:	dec00204 	addi	sp,sp,8
 800b5c8:	f800283a 	ret
 800b5cc:	00c20074 	movhi	r3,2049
 800b5d0:	18d8f917 	ldw	r3,25572(r3)
 800b5d4:	183ff926 	beq	r3,zero,800b5bc <_isatty_r+0x28>
 800b5d8:	80c00015 	stw	r3,0(r16)
 800b5dc:	dfc00117 	ldw	ra,4(sp)
 800b5e0:	dc000017 	ldw	r16,0(sp)
 800b5e4:	dec00204 	addi	sp,sp,8
 800b5e8:	f800283a 	ret

0800b5ec <_setlocale_r>:
 800b5ec:	30001626 	beq	r6,zero,800b648 <_setlocale_r+0x5c>
 800b5f0:	01420074 	movhi	r5,2049
 800b5f4:	defffe04 	addi	sp,sp,-8
 800b5f8:	294a1804 	addi	r5,r5,10336
 800b5fc:	3009883a 	mov	r4,r6
 800b600:	dc000015 	stw	r16,0(sp)
 800b604:	dfc00115 	stw	ra,4(sp)
 800b608:	3021883a 	mov	r16,r6
 800b60c:	800b7f80 	call	800b7f8 <strcmp>
 800b610:	1000061e 	bne	r2,zero,800b62c <_setlocale_r+0x40>
 800b614:	00820074 	movhi	r2,2049
 800b618:	108a1704 	addi	r2,r2,10332
 800b61c:	dfc00117 	ldw	ra,4(sp)
 800b620:	dc000017 	ldw	r16,0(sp)
 800b624:	dec00204 	addi	sp,sp,8
 800b628:	f800283a 	ret
 800b62c:	80800003 	ldbu	r2,0(r16)
 800b630:	10bfef44 	addi	r2,r2,-67
 800b634:	10000726 	beq	r2,zero,800b654 <_setlocale_r+0x68>
 800b638:	80800003 	ldbu	r2,0(r16)
 800b63c:	103ff526 	beq	r2,zero,800b614 <_setlocale_r+0x28>
 800b640:	0005883a 	mov	r2,zero
 800b644:	003ff506 	br	800b61c <_setlocale_r+0x30>
 800b648:	00820074 	movhi	r2,2049
 800b64c:	108a1704 	addi	r2,r2,10332
 800b650:	f800283a 	ret
 800b654:	80800043 	ldbu	r2,1(r16)
 800b658:	103fee26 	beq	r2,zero,800b614 <_setlocale_r+0x28>
 800b65c:	003ff606 	br	800b638 <_setlocale_r+0x4c>

0800b660 <__locale_mb_cur_max>:
 800b660:	00820074 	movhi	r2,2049
 800b664:	108d5e07 	ldb	r2,13688(r2)
 800b668:	f800283a 	ret

0800b66c <setlocale>:
 800b66c:	28001626 	beq	r5,zero,800b6c8 <setlocale+0x5c>
 800b670:	defffe04 	addi	sp,sp,-8
 800b674:	dc000015 	stw	r16,0(sp)
 800b678:	2821883a 	mov	r16,r5
 800b67c:	01420074 	movhi	r5,2049
 800b680:	294a1804 	addi	r5,r5,10336
 800b684:	8009883a 	mov	r4,r16
 800b688:	dfc00115 	stw	ra,4(sp)
 800b68c:	800b7f80 	call	800b7f8 <strcmp>
 800b690:	1000061e 	bne	r2,zero,800b6ac <setlocale+0x40>
 800b694:	00820074 	movhi	r2,2049
 800b698:	108a1704 	addi	r2,r2,10332
 800b69c:	dfc00117 	ldw	ra,4(sp)
 800b6a0:	dc000017 	ldw	r16,0(sp)
 800b6a4:	dec00204 	addi	sp,sp,8
 800b6a8:	f800283a 	ret
 800b6ac:	80800003 	ldbu	r2,0(r16)
 800b6b0:	10bfef44 	addi	r2,r2,-67
 800b6b4:	10000726 	beq	r2,zero,800b6d4 <setlocale+0x68>
 800b6b8:	80800003 	ldbu	r2,0(r16)
 800b6bc:	103ff526 	beq	r2,zero,800b694 <setlocale+0x28>
 800b6c0:	0005883a 	mov	r2,zero
 800b6c4:	003ff506 	br	800b69c <setlocale+0x30>
 800b6c8:	00820074 	movhi	r2,2049
 800b6cc:	108a1704 	addi	r2,r2,10332
 800b6d0:	f800283a 	ret
 800b6d4:	80800043 	ldbu	r2,1(r16)
 800b6d8:	103fee26 	beq	r2,zero,800b694 <setlocale+0x28>
 800b6dc:	003ff606 	br	800b6b8 <setlocale+0x4c>

0800b6e0 <_lseek_r>:
 800b6e0:	2807883a 	mov	r3,r5
 800b6e4:	defffe04 	addi	sp,sp,-8
 800b6e8:	dc000015 	stw	r16,0(sp)
 800b6ec:	300b883a 	mov	r5,r6
 800b6f0:	00820074 	movhi	r2,2049
 800b6f4:	380d883a 	mov	r6,r7
 800b6f8:	2021883a 	mov	r16,r4
 800b6fc:	1809883a 	mov	r4,r3
 800b700:	dfc00115 	stw	ra,4(sp)
 800b704:	1018f915 	stw	zero,25572(r2)
 800b708:	800fbbc0 	call	800fbbc <lseek>
 800b70c:	10ffffd8 	cmpnei	r3,r2,-1
 800b710:	18000426 	beq	r3,zero,800b724 <_lseek_r+0x44>
 800b714:	dfc00117 	ldw	ra,4(sp)
 800b718:	dc000017 	ldw	r16,0(sp)
 800b71c:	dec00204 	addi	sp,sp,8
 800b720:	f800283a 	ret
 800b724:	00c20074 	movhi	r3,2049
 800b728:	18d8f917 	ldw	r3,25572(r3)
 800b72c:	183ff926 	beq	r3,zero,800b714 <_lseek_r+0x34>
 800b730:	80c00015 	stw	r3,0(r16)
 800b734:	dfc00117 	ldw	ra,4(sp)
 800b738:	dc000017 	ldw	r16,0(sp)
 800b73c:	dec00204 	addi	sp,sp,8
 800b740:	f800283a 	ret

0800b744 <_mbtowc_r>:
 800b744:	00820074 	movhi	r2,2049
 800b748:	108d4d17 	ldw	r2,13620(r2)
 800b74c:	1000683a 	jmp	r2

0800b750 <__ascii_mbtowc>:
 800b750:	deffff04 	addi	sp,sp,-4
 800b754:	28000826 	beq	r5,zero,800b778 <__ascii_mbtowc+0x28>
 800b758:	30000926 	beq	r6,zero,800b780 <__ascii_mbtowc+0x30>
 800b75c:	38000b26 	beq	r7,zero,800b78c <__ascii_mbtowc+0x3c>
 800b760:	30800003 	ldbu	r2,0(r6)
 800b764:	28800015 	stw	r2,0(r5)
 800b768:	30800003 	ldbu	r2,0(r6)
 800b76c:	1004c03a 	cmpne	r2,r2,zero
 800b770:	dec00104 	addi	sp,sp,4
 800b774:	f800283a 	ret
 800b778:	d80b883a 	mov	r5,sp
 800b77c:	303ff71e 	bne	r6,zero,800b75c <__ascii_mbtowc+0xc>
 800b780:	0005883a 	mov	r2,zero
 800b784:	dec00104 	addi	sp,sp,4
 800b788:	f800283a 	ret
 800b78c:	00bfff84 	movi	r2,-2
 800b790:	003ff706 	br	800b770 <__ascii_mbtowc+0x20>

0800b794 <_read_r>:
 800b794:	2807883a 	mov	r3,r5
 800b798:	defffe04 	addi	sp,sp,-8
 800b79c:	dc000015 	stw	r16,0(sp)
 800b7a0:	300b883a 	mov	r5,r6
 800b7a4:	00820074 	movhi	r2,2049
 800b7a8:	380d883a 	mov	r6,r7
 800b7ac:	2021883a 	mov	r16,r4
 800b7b0:	1809883a 	mov	r4,r3
 800b7b4:	dfc00115 	stw	ra,4(sp)
 800b7b8:	1018f915 	stw	zero,25572(r2)
 800b7bc:	800fd9c0 	call	800fd9c <read>
 800b7c0:	10ffffd8 	cmpnei	r3,r2,-1
 800b7c4:	18000426 	beq	r3,zero,800b7d8 <_read_r+0x44>
 800b7c8:	dfc00117 	ldw	ra,4(sp)
 800b7cc:	dc000017 	ldw	r16,0(sp)
 800b7d0:	dec00204 	addi	sp,sp,8
 800b7d4:	f800283a 	ret
 800b7d8:	00c20074 	movhi	r3,2049
 800b7dc:	18d8f917 	ldw	r3,25572(r3)
 800b7e0:	183ff926 	beq	r3,zero,800b7c8 <_read_r+0x34>
 800b7e4:	80c00015 	stw	r3,0(r16)
 800b7e8:	dfc00117 	ldw	ra,4(sp)
 800b7ec:	dc000017 	ldw	r16,0(sp)
 800b7f0:	dec00204 	addi	sp,sp,8
 800b7f4:	f800283a 	ret

0800b7f8 <strcmp>:
 800b7f8:	2144b03a 	or	r2,r4,r5
 800b7fc:	108000cc 	andi	r2,r2,3
 800b800:	1000141e 	bne	r2,zero,800b854 <strcmp+0x5c>
 800b804:	20800017 	ldw	r2,0(r4)
 800b808:	28c00017 	ldw	r3,0(r5)
 800b80c:	10c0111e 	bne	r2,r3,800b854 <strcmp+0x5c>
 800b810:	01ffbff4 	movhi	r7,65279
 800b814:	01a02074 	movhi	r6,32897
 800b818:	39ffbfc4 	addi	r7,r7,-257
 800b81c:	31a02004 	addi	r6,r6,-32640
 800b820:	00000306 	br	800b830 <strcmp+0x38>
 800b824:	20800017 	ldw	r2,0(r4)
 800b828:	28c00017 	ldw	r3,0(r5)
 800b82c:	10c0091e 	bne	r2,r3,800b854 <strcmp+0x5c>
 800b830:	11c7883a 	add	r3,r2,r7
 800b834:	0084303a 	nor	r2,zero,r2
 800b838:	1884703a 	and	r2,r3,r2
 800b83c:	1184703a 	and	r2,r2,r6
 800b840:	21000104 	addi	r4,r4,4
 800b844:	29400104 	addi	r5,r5,4
 800b848:	103ff626 	beq	r2,zero,800b824 <strcmp+0x2c>
 800b84c:	0005883a 	mov	r2,zero
 800b850:	f800283a 	ret
 800b854:	20c00003 	ldbu	r3,0(r4)
 800b858:	18803fcc 	andi	r2,r3,255
 800b85c:	1080201c 	xori	r2,r2,128
 800b860:	10bfe004 	addi	r2,r2,-128
 800b864:	1000071e 	bne	r2,zero,800b884 <strcmp+0x8c>
 800b868:	00000a06 	br	800b894 <strcmp+0x9c>
 800b86c:	20c00003 	ldbu	r3,0(r4)
 800b870:	29400044 	addi	r5,r5,1
 800b874:	18803fcc 	andi	r2,r3,255
 800b878:	1080201c 	xori	r2,r2,128
 800b87c:	10bfe004 	addi	r2,r2,-128
 800b880:	10000726 	beq	r2,zero,800b8a0 <strcmp+0xa8>
 800b884:	29800007 	ldb	r6,0(r5)
 800b888:	21000044 	addi	r4,r4,1
 800b88c:	30bff726 	beq	r6,r2,800b86c <strcmp+0x74>
 800b890:	18803fcc 	andi	r2,r3,255
 800b894:	28c00003 	ldbu	r3,0(r5)
 800b898:	10c5c83a 	sub	r2,r2,r3
 800b89c:	f800283a 	ret
 800b8a0:	28c00003 	ldbu	r3,0(r5)
 800b8a4:	0005883a 	mov	r2,zero
 800b8a8:	10c5c83a 	sub	r2,r2,r3
 800b8ac:	f800283a 	ret

0800b8b0 <_vfiprintf_r>:
 800b8b0:	8009b241 	jmpi	8009b24 <___vfiprintf_internal_r>

0800b8b4 <__swbuf_r>:
 800b8b4:	defffb04 	addi	sp,sp,-20
 800b8b8:	dcc00315 	stw	r19,12(sp)
 800b8bc:	dc400115 	stw	r17,4(sp)
 800b8c0:	dc000015 	stw	r16,0(sp)
 800b8c4:	dfc00415 	stw	ra,16(sp)
 800b8c8:	dc800215 	stw	r18,8(sp)
 800b8cc:	2027883a 	mov	r19,r4
 800b8d0:	2823883a 	mov	r17,r5
 800b8d4:	3021883a 	mov	r16,r6
 800b8d8:	20000226 	beq	r4,zero,800b8e4 <__swbuf_r+0x30>
 800b8dc:	20800e17 	ldw	r2,56(r4)
 800b8e0:	10003e26 	beq	r2,zero,800b9dc <__swbuf_r+0x128>
 800b8e4:	80800617 	ldw	r2,24(r16)
 800b8e8:	80c0030b 	ldhu	r3,12(r16)
 800b8ec:	80800215 	stw	r2,8(r16)
 800b8f0:	1880020c 	andi	r2,r3,8
 800b8f4:	10001f26 	beq	r2,zero,800b974 <__swbuf_r+0xc0>
 800b8f8:	80800417 	ldw	r2,16(r16)
 800b8fc:	10001d26 	beq	r2,zero,800b974 <__swbuf_r+0xc0>
 800b900:	1948000c 	andi	r5,r3,8192
 800b904:	8c803fcc 	andi	r18,r17,255
 800b908:	28002326 	beq	r5,zero,800b998 <__swbuf_r+0xe4>
 800b90c:	80c00017 	ldw	r3,0(r16)
 800b910:	81000517 	ldw	r4,20(r16)
 800b914:	1885c83a 	sub	r2,r3,r2
 800b918:	1100290e 	bge	r2,r4,800b9c0 <__swbuf_r+0x10c>
 800b91c:	10800044 	addi	r2,r2,1
 800b920:	81400217 	ldw	r5,8(r16)
 800b924:	19000044 	addi	r4,r3,1
 800b928:	81000015 	stw	r4,0(r16)
 800b92c:	297fffc4 	addi	r5,r5,-1
 800b930:	81400215 	stw	r5,8(r16)
 800b934:	1c400005 	stb	r17,0(r3)
 800b938:	80c00517 	ldw	r3,20(r16)
 800b93c:	18802926 	beq	r3,r2,800b9e4 <__swbuf_r+0x130>
 800b940:	8080030b 	ldhu	r2,12(r16)
 800b944:	1080004c 	andi	r2,r2,1
 800b948:	10000226 	beq	r2,zero,800b954 <__swbuf_r+0xa0>
 800b94c:	90800298 	cmpnei	r2,r18,10
 800b950:	10002426 	beq	r2,zero,800b9e4 <__swbuf_r+0x130>
 800b954:	9005883a 	mov	r2,r18
 800b958:	dfc00417 	ldw	ra,16(sp)
 800b95c:	dcc00317 	ldw	r19,12(sp)
 800b960:	dc800217 	ldw	r18,8(sp)
 800b964:	dc400117 	ldw	r17,4(sp)
 800b968:	dc000017 	ldw	r16,0(sp)
 800b96c:	dec00504 	addi	sp,sp,20
 800b970:	f800283a 	ret
 800b974:	800b883a 	mov	r5,r16
 800b978:	9809883a 	mov	r4,r19
 800b97c:	80047540 	call	8004754 <__swsetup_r>
 800b980:	10001c1e 	bne	r2,zero,800b9f4 <__swbuf_r+0x140>
 800b984:	80c0030b 	ldhu	r3,12(r16)
 800b988:	80800417 	ldw	r2,16(r16)
 800b98c:	8c803fcc 	andi	r18,r17,255
 800b990:	1948000c 	andi	r5,r3,8192
 800b994:	283fdd1e 	bne	r5,zero,800b90c <__swbuf_r+0x58>
 800b998:	81001917 	ldw	r4,100(r16)
 800b99c:	18c80014 	ori	r3,r3,8192
 800b9a0:	0177ffc4 	movi	r5,-8193
 800b9a4:	2148703a 	and	r4,r4,r5
 800b9a8:	80c0030d 	sth	r3,12(r16)
 800b9ac:	80c00017 	ldw	r3,0(r16)
 800b9b0:	81001915 	stw	r4,100(r16)
 800b9b4:	81000517 	ldw	r4,20(r16)
 800b9b8:	1885c83a 	sub	r2,r3,r2
 800b9bc:	113fd716 	blt	r2,r4,800b91c <__swbuf_r+0x68>
 800b9c0:	800b883a 	mov	r5,r16
 800b9c4:	9809883a 	mov	r4,r19
 800b9c8:	80064480 	call	8006448 <_fflush_r>
 800b9cc:	1000091e 	bne	r2,zero,800b9f4 <__swbuf_r+0x140>
 800b9d0:	80c00017 	ldw	r3,0(r16)
 800b9d4:	00800044 	movi	r2,1
 800b9d8:	003fd106 	br	800b920 <__swbuf_r+0x6c>
 800b9dc:	80068900 	call	8006890 <__sinit>
 800b9e0:	003fc006 	br	800b8e4 <__swbuf_r+0x30>
 800b9e4:	800b883a 	mov	r5,r16
 800b9e8:	9809883a 	mov	r4,r19
 800b9ec:	80064480 	call	8006448 <_fflush_r>
 800b9f0:	103fd826 	beq	r2,zero,800b954 <__swbuf_r+0xa0>
 800b9f4:	04bfffc4 	movi	r18,-1
 800b9f8:	003fd606 	br	800b954 <__swbuf_r+0xa0>

0800b9fc <__swbuf>:
 800b9fc:	00c20074 	movhi	r3,2049
 800ba00:	2005883a 	mov	r2,r4
 800ba04:	1911f217 	ldw	r4,18376(r3)
 800ba08:	280d883a 	mov	r6,r5
 800ba0c:	100b883a 	mov	r5,r2
 800ba10:	800b8b41 	jmpi	800b8b4 <__swbuf_r>

0800ba14 <_wcrtomb_r>:
 800ba14:	defffa04 	addi	sp,sp,-24
 800ba18:	dc400415 	stw	r17,16(sp)
 800ba1c:	dc000315 	stw	r16,12(sp)
 800ba20:	00820074 	movhi	r2,2049
 800ba24:	dfc00515 	stw	ra,20(sp)
 800ba28:	108d4c17 	ldw	r2,13616(r2)
 800ba2c:	2023883a 	mov	r17,r4
 800ba30:	3821883a 	mov	r16,r7
 800ba34:	28000826 	beq	r5,zero,800ba58 <_wcrtomb_r+0x44>
 800ba38:	103ee83a 	callr	r2
 800ba3c:	10ffffd8 	cmpnei	r3,r2,-1
 800ba40:	18000a26 	beq	r3,zero,800ba6c <_wcrtomb_r+0x58>
 800ba44:	dfc00517 	ldw	ra,20(sp)
 800ba48:	dc400417 	ldw	r17,16(sp)
 800ba4c:	dc000317 	ldw	r16,12(sp)
 800ba50:	dec00604 	addi	sp,sp,24
 800ba54:	f800283a 	ret
 800ba58:	000d883a 	mov	r6,zero
 800ba5c:	d9400084 	addi	r5,sp,2
 800ba60:	103ee83a 	callr	r2
 800ba64:	10ffffd8 	cmpnei	r3,r2,-1
 800ba68:	183ff61e 	bne	r3,zero,800ba44 <_wcrtomb_r+0x30>
 800ba6c:	00802284 	movi	r2,138
 800ba70:	80000015 	stw	zero,0(r16)
 800ba74:	88800015 	stw	r2,0(r17)
 800ba78:	00bfffc4 	movi	r2,-1
 800ba7c:	003ff106 	br	800ba44 <_wcrtomb_r+0x30>

0800ba80 <wcrtomb>:
 800ba80:	defffa04 	addi	sp,sp,-24
 800ba84:	00c20074 	movhi	r3,2049
 800ba88:	dc400415 	stw	r17,16(sp)
 800ba8c:	dc000315 	stw	r16,12(sp)
 800ba90:	1c51f217 	ldw	r17,18376(r3)
 800ba94:	dfc00515 	stw	ra,20(sp)
 800ba98:	00c20074 	movhi	r3,2049
 800ba9c:	18cd4c17 	ldw	r3,13616(r3)
 800baa0:	3021883a 	mov	r16,r6
 800baa4:	20000c26 	beq	r4,zero,800bad8 <wcrtomb+0x58>
 800baa8:	280d883a 	mov	r6,r5
 800baac:	800f883a 	mov	r7,r16
 800bab0:	200b883a 	mov	r5,r4
 800bab4:	8809883a 	mov	r4,r17
 800bab8:	183ee83a 	callr	r3
 800babc:	10ffffd8 	cmpnei	r3,r2,-1
 800bac0:	18000c26 	beq	r3,zero,800baf4 <wcrtomb+0x74>
 800bac4:	dfc00517 	ldw	ra,20(sp)
 800bac8:	dc400417 	ldw	r17,16(sp)
 800bacc:	dc000317 	ldw	r16,12(sp)
 800bad0:	dec00604 	addi	sp,sp,24
 800bad4:	f800283a 	ret
 800bad8:	300f883a 	mov	r7,r6
 800badc:	d9400084 	addi	r5,sp,2
 800bae0:	000d883a 	mov	r6,zero
 800bae4:	8809883a 	mov	r4,r17
 800bae8:	183ee83a 	callr	r3
 800baec:	10ffffd8 	cmpnei	r3,r2,-1
 800baf0:	183ff41e 	bne	r3,zero,800bac4 <wcrtomb+0x44>
 800baf4:	00802284 	movi	r2,138
 800baf8:	80000015 	stw	zero,0(r16)
 800bafc:	88800015 	stw	r2,0(r17)
 800bb00:	00bfffc4 	movi	r2,-1
 800bb04:	003fef06 	br	800bac4 <wcrtomb+0x44>

0800bb08 <_wctomb_r>:
 800bb08:	00820074 	movhi	r2,2049
 800bb0c:	108d4c17 	ldw	r2,13616(r2)
 800bb10:	1000683a 	jmp	r2

0800bb14 <__ascii_wctomb>:
 800bb14:	28000926 	beq	r5,zero,800bb3c <__ascii_wctomb+0x28>
 800bb18:	30804030 	cmpltui	r2,r6,256
 800bb1c:	10000326 	beq	r2,zero,800bb2c <__ascii_wctomb+0x18>
 800bb20:	29800005 	stb	r6,0(r5)
 800bb24:	00800044 	movi	r2,1
 800bb28:	f800283a 	ret
 800bb2c:	00802284 	movi	r2,138
 800bb30:	20800015 	stw	r2,0(r4)
 800bb34:	00bfffc4 	movi	r2,-1
 800bb38:	f800283a 	ret
 800bb3c:	0005883a 	mov	r2,zero
 800bb40:	f800283a 	ret

0800bb44 <abort>:
 800bb44:	deffff04 	addi	sp,sp,-4
 800bb48:	01000184 	movi	r4,6
 800bb4c:	dfc00015 	stw	ra,0(sp)
 800bb50:	800bdd00 	call	800bdd0 <raise>
 800bb54:	01000044 	movi	r4,1
 800bb58:	800f6f00 	call	800f6f0 <_exit>

0800bb5c <_init_signal_r>:
 800bb5c:	2080b717 	ldw	r2,732(r4)
 800bb60:	10000226 	beq	r2,zero,800bb6c <_init_signal_r+0x10>
 800bb64:	0005883a 	mov	r2,zero
 800bb68:	f800283a 	ret
 800bb6c:	defffe04 	addi	sp,sp,-8
 800bb70:	01402004 	movi	r5,128
 800bb74:	dc000015 	stw	r16,0(sp)
 800bb78:	dfc00115 	stw	ra,4(sp)
 800bb7c:	2021883a 	mov	r16,r4
 800bb80:	80075600 	call	8007560 <_malloc_r>
 800bb84:	8080b715 	stw	r2,732(r16)
 800bb88:	1009883a 	mov	r4,r2
 800bb8c:	10000826 	beq	r2,zero,800bbb0 <_init_signal_r+0x54>
 800bb90:	01802004 	movi	r6,128
 800bb94:	000b883a 	mov	r5,zero
 800bb98:	800803c0 	call	800803c <memset>
 800bb9c:	0005883a 	mov	r2,zero
 800bba0:	dfc00117 	ldw	ra,4(sp)
 800bba4:	dc000017 	ldw	r16,0(sp)
 800bba8:	dec00204 	addi	sp,sp,8
 800bbac:	f800283a 	ret
 800bbb0:	00bfffc4 	movi	r2,-1
 800bbb4:	003ffa06 	br	800bba0 <_init_signal_r+0x44>

0800bbb8 <_signal_r>:
 800bbb8:	defffc04 	addi	sp,sp,-16
 800bbbc:	dc400115 	stw	r17,4(sp)
 800bbc0:	dfc00315 	stw	ra,12(sp)
 800bbc4:	dc800215 	stw	r18,8(sp)
 800bbc8:	dc000015 	stw	r16,0(sp)
 800bbcc:	28800830 	cmpltui	r2,r5,32
 800bbd0:	2023883a 	mov	r17,r4
 800bbd4:	10000e26 	beq	r2,zero,800bc10 <_signal_r+0x58>
 800bbd8:	20c0b717 	ldw	r3,732(r4)
 800bbdc:	2821883a 	mov	r16,r5
 800bbe0:	3025883a 	mov	r18,r6
 800bbe4:	18000e26 	beq	r3,zero,800bc20 <_signal_r+0x68>
 800bbe8:	802090ba 	slli	r16,r16,2
 800bbec:	1c21883a 	add	r16,r3,r16
 800bbf0:	80800017 	ldw	r2,0(r16)
 800bbf4:	84800015 	stw	r18,0(r16)
 800bbf8:	dfc00317 	ldw	ra,12(sp)
 800bbfc:	dc800217 	ldw	r18,8(sp)
 800bc00:	dc400117 	ldw	r17,4(sp)
 800bc04:	dc000017 	ldw	r16,0(sp)
 800bc08:	dec00404 	addi	sp,sp,16
 800bc0c:	f800283a 	ret
 800bc10:	00800584 	movi	r2,22
 800bc14:	20800015 	stw	r2,0(r4)
 800bc18:	00bfffc4 	movi	r2,-1
 800bc1c:	003ff606 	br	800bbf8 <_signal_r+0x40>
 800bc20:	01402004 	movi	r5,128
 800bc24:	80075600 	call	8007560 <_malloc_r>
 800bc28:	8880b715 	stw	r2,732(r17)
 800bc2c:	10000626 	beq	r2,zero,800bc48 <_signal_r+0x90>
 800bc30:	01802004 	movi	r6,128
 800bc34:	000b883a 	mov	r5,zero
 800bc38:	1009883a 	mov	r4,r2
 800bc3c:	800803c0 	call	800803c <memset>
 800bc40:	1007883a 	mov	r3,r2
 800bc44:	003fe806 	br	800bbe8 <_signal_r+0x30>
 800bc48:	00bfffc4 	movi	r2,-1
 800bc4c:	003fea06 	br	800bbf8 <_signal_r+0x40>

0800bc50 <_raise_r>:
 800bc50:	28800830 	cmpltui	r2,r5,32
 800bc54:	10002b26 	beq	r2,zero,800bd04 <_raise_r+0xb4>
 800bc58:	2080b717 	ldw	r2,732(r4)
 800bc5c:	defffd04 	addi	sp,sp,-12
 800bc60:	dc000115 	stw	r16,4(sp)
 800bc64:	dfc00215 	stw	ra,8(sp)
 800bc68:	2821883a 	mov	r16,r5
 800bc6c:	10001026 	beq	r2,zero,800bcb0 <_raise_r+0x60>
 800bc70:	280690ba 	slli	r3,r5,2
 800bc74:	10c5883a 	add	r2,r2,r3
 800bc78:	10c00017 	ldw	r3,0(r2)
 800bc7c:	18000c26 	beq	r3,zero,800bcb0 <_raise_r+0x60>
 800bc80:	19400060 	cmpeqi	r5,r3,1
 800bc84:	28001a1e 	bne	r5,zero,800bcf0 <_raise_r+0xa0>
 800bc88:	197fffd8 	cmpnei	r5,r3,-1
 800bc8c:	28001126 	beq	r5,zero,800bcd4 <_raise_r+0x84>
 800bc90:	10000015 	stw	zero,0(r2)
 800bc94:	8009883a 	mov	r4,r16
 800bc98:	183ee83a 	callr	r3
 800bc9c:	0005883a 	mov	r2,zero
 800bca0:	dfc00217 	ldw	ra,8(sp)
 800bca4:	dc000117 	ldw	r16,4(sp)
 800bca8:	dec00304 	addi	sp,sp,12
 800bcac:	f800283a 	ret
 800bcb0:	d9000015 	stw	r4,0(sp)
 800bcb4:	800c0a80 	call	800c0a8 <_getpid_r>
 800bcb8:	d9000017 	ldw	r4,0(sp)
 800bcbc:	800d883a 	mov	r6,r16
 800bcc0:	100b883a 	mov	r5,r2
 800bcc4:	dfc00217 	ldw	ra,8(sp)
 800bcc8:	dc000117 	ldw	r16,4(sp)
 800bccc:	dec00304 	addi	sp,sp,12
 800bcd0:	800c0481 	jmpi	800c048 <_kill_r>
 800bcd4:	00800584 	movi	r2,22
 800bcd8:	20800015 	stw	r2,0(r4)
 800bcdc:	00800044 	movi	r2,1
 800bce0:	dfc00217 	ldw	ra,8(sp)
 800bce4:	dc000117 	ldw	r16,4(sp)
 800bce8:	dec00304 	addi	sp,sp,12
 800bcec:	f800283a 	ret
 800bcf0:	0005883a 	mov	r2,zero
 800bcf4:	dfc00217 	ldw	ra,8(sp)
 800bcf8:	dc000117 	ldw	r16,4(sp)
 800bcfc:	dec00304 	addi	sp,sp,12
 800bd00:	f800283a 	ret
 800bd04:	00800584 	movi	r2,22
 800bd08:	20800015 	stw	r2,0(r4)
 800bd0c:	00bfffc4 	movi	r2,-1
 800bd10:	f800283a 	ret

0800bd14 <__sigtramp_r>:
 800bd14:	28800830 	cmpltui	r2,r5,32
 800bd18:	10002b26 	beq	r2,zero,800bdc8 <__sigtramp_r+0xb4>
 800bd1c:	20c0b717 	ldw	r3,732(r4)
 800bd20:	defffd04 	addi	sp,sp,-12
 800bd24:	dc400115 	stw	r17,4(sp)
 800bd28:	dc000015 	stw	r16,0(sp)
 800bd2c:	dfc00215 	stw	ra,8(sp)
 800bd30:	2821883a 	mov	r16,r5
 800bd34:	2023883a 	mov	r17,r4
 800bd38:	18001326 	beq	r3,zero,800bd88 <__sigtramp_r+0x74>
 800bd3c:	800490ba 	slli	r2,r16,2
 800bd40:	1887883a 	add	r3,r3,r2
 800bd44:	18800017 	ldw	r2,0(r3)
 800bd48:	10000d26 	beq	r2,zero,800bd80 <__sigtramp_r+0x6c>
 800bd4c:	113fffe0 	cmpeqi	r4,r2,-1
 800bd50:	2000191e 	bne	r4,zero,800bdb8 <__sigtramp_r+0xa4>
 800bd54:	11000060 	cmpeqi	r4,r2,1
 800bd58:	2000151e 	bne	r4,zero,800bdb0 <__sigtramp_r+0x9c>
 800bd5c:	18000015 	stw	zero,0(r3)
 800bd60:	8009883a 	mov	r4,r16
 800bd64:	103ee83a 	callr	r2
 800bd68:	0005883a 	mov	r2,zero
 800bd6c:	dfc00217 	ldw	ra,8(sp)
 800bd70:	dc400117 	ldw	r17,4(sp)
 800bd74:	dc000017 	ldw	r16,0(sp)
 800bd78:	dec00304 	addi	sp,sp,12
 800bd7c:	f800283a 	ret
 800bd80:	00800044 	movi	r2,1
 800bd84:	003ff906 	br	800bd6c <__sigtramp_r+0x58>
 800bd88:	01402004 	movi	r5,128
 800bd8c:	80075600 	call	8007560 <_malloc_r>
 800bd90:	8880b715 	stw	r2,732(r17)
 800bd94:	10000a26 	beq	r2,zero,800bdc0 <__sigtramp_r+0xac>
 800bd98:	01802004 	movi	r6,128
 800bd9c:	000b883a 	mov	r5,zero
 800bda0:	1009883a 	mov	r4,r2
 800bda4:	800803c0 	call	800803c <memset>
 800bda8:	1007883a 	mov	r3,r2
 800bdac:	003fe306 	br	800bd3c <__sigtramp_r+0x28>
 800bdb0:	008000c4 	movi	r2,3
 800bdb4:	003fed06 	br	800bd6c <__sigtramp_r+0x58>
 800bdb8:	00800084 	movi	r2,2
 800bdbc:	003feb06 	br	800bd6c <__sigtramp_r+0x58>
 800bdc0:	00bfffc4 	movi	r2,-1
 800bdc4:	003fe906 	br	800bd6c <__sigtramp_r+0x58>
 800bdc8:	00bfffc4 	movi	r2,-1
 800bdcc:	f800283a 	ret

0800bdd0 <raise>:
 800bdd0:	defffd04 	addi	sp,sp,-12
 800bdd4:	dc400115 	stw	r17,4(sp)
 800bdd8:	00c20074 	movhi	r3,2049
 800bddc:	dfc00215 	stw	ra,8(sp)
 800bde0:	dc000015 	stw	r16,0(sp)
 800bde4:	20800830 	cmpltui	r2,r4,32
 800bde8:	1c51f217 	ldw	r17,18376(r3)
 800bdec:	10002326 	beq	r2,zero,800be7c <raise+0xac>
 800bdf0:	8880b717 	ldw	r2,732(r17)
 800bdf4:	2021883a 	mov	r16,r4
 800bdf8:	10001026 	beq	r2,zero,800be3c <raise+0x6c>
 800bdfc:	200690ba 	slli	r3,r4,2
 800be00:	10c5883a 	add	r2,r2,r3
 800be04:	10c00017 	ldw	r3,0(r2)
 800be08:	18000c26 	beq	r3,zero,800be3c <raise+0x6c>
 800be0c:	19400060 	cmpeqi	r5,r3,1
 800be10:	2800181e 	bne	r5,zero,800be74 <raise+0xa4>
 800be14:	197fffd8 	cmpnei	r5,r3,-1
 800be18:	28001226 	beq	r5,zero,800be64 <raise+0x94>
 800be1c:	10000015 	stw	zero,0(r2)
 800be20:	183ee83a 	callr	r3
 800be24:	0005883a 	mov	r2,zero
 800be28:	dfc00217 	ldw	ra,8(sp)
 800be2c:	dc400117 	ldw	r17,4(sp)
 800be30:	dc000017 	ldw	r16,0(sp)
 800be34:	dec00304 	addi	sp,sp,12
 800be38:	f800283a 	ret
 800be3c:	8809883a 	mov	r4,r17
 800be40:	800c0a80 	call	800c0a8 <_getpid_r>
 800be44:	800d883a 	mov	r6,r16
 800be48:	100b883a 	mov	r5,r2
 800be4c:	8809883a 	mov	r4,r17
 800be50:	dfc00217 	ldw	ra,8(sp)
 800be54:	dc400117 	ldw	r17,4(sp)
 800be58:	dc000017 	ldw	r16,0(sp)
 800be5c:	dec00304 	addi	sp,sp,12
 800be60:	800c0481 	jmpi	800c048 <_kill_r>
 800be64:	00800584 	movi	r2,22
 800be68:	88800015 	stw	r2,0(r17)
 800be6c:	00800044 	movi	r2,1
 800be70:	003fed06 	br	800be28 <raise+0x58>
 800be74:	0005883a 	mov	r2,zero
 800be78:	003feb06 	br	800be28 <raise+0x58>
 800be7c:	00800584 	movi	r2,22
 800be80:	88800015 	stw	r2,0(r17)
 800be84:	00bfffc4 	movi	r2,-1
 800be88:	003fe706 	br	800be28 <raise+0x58>

0800be8c <signal>:
 800be8c:	defffc04 	addi	sp,sp,-16
 800be90:	dc800215 	stw	r18,8(sp)
 800be94:	00c20074 	movhi	r3,2049
 800be98:	dfc00315 	stw	ra,12(sp)
 800be9c:	dc400115 	stw	r17,4(sp)
 800bea0:	dc000015 	stw	r16,0(sp)
 800bea4:	20800830 	cmpltui	r2,r4,32
 800bea8:	1c91f217 	ldw	r18,18376(r3)
 800beac:	10000e26 	beq	r2,zero,800bee8 <signal+0x5c>
 800beb0:	2021883a 	mov	r16,r4
 800beb4:	9100b717 	ldw	r4,732(r18)
 800beb8:	2823883a 	mov	r17,r5
 800bebc:	20000e26 	beq	r4,zero,800bef8 <signal+0x6c>
 800bec0:	802090ba 	slli	r16,r16,2
 800bec4:	2421883a 	add	r16,r4,r16
 800bec8:	80800017 	ldw	r2,0(r16)
 800becc:	84400015 	stw	r17,0(r16)
 800bed0:	dfc00317 	ldw	ra,12(sp)
 800bed4:	dc800217 	ldw	r18,8(sp)
 800bed8:	dc400117 	ldw	r17,4(sp)
 800bedc:	dc000017 	ldw	r16,0(sp)
 800bee0:	dec00404 	addi	sp,sp,16
 800bee4:	f800283a 	ret
 800bee8:	00800584 	movi	r2,22
 800beec:	90800015 	stw	r2,0(r18)
 800bef0:	00bfffc4 	movi	r2,-1
 800bef4:	003ff606 	br	800bed0 <signal+0x44>
 800bef8:	9009883a 	mov	r4,r18
 800befc:	01402004 	movi	r5,128
 800bf00:	80075600 	call	8007560 <_malloc_r>
 800bf04:	9080b715 	stw	r2,732(r18)
 800bf08:	1009883a 	mov	r4,r2
 800bf0c:	10000526 	beq	r2,zero,800bf24 <signal+0x98>
 800bf10:	01802004 	movi	r6,128
 800bf14:	000b883a 	mov	r5,zero
 800bf18:	800803c0 	call	800803c <memset>
 800bf1c:	1009883a 	mov	r4,r2
 800bf20:	003fe706 	br	800bec0 <signal+0x34>
 800bf24:	00bfffc4 	movi	r2,-1
 800bf28:	003fe906 	br	800bed0 <signal+0x44>

0800bf2c <_init_signal>:
 800bf2c:	defffe04 	addi	sp,sp,-8
 800bf30:	00820074 	movhi	r2,2049
 800bf34:	dc000015 	stw	r16,0(sp)
 800bf38:	1411f217 	ldw	r16,18376(r2)
 800bf3c:	dfc00115 	stw	ra,4(sp)
 800bf40:	8080b717 	ldw	r2,732(r16)
 800bf44:	10000526 	beq	r2,zero,800bf5c <_init_signal+0x30>
 800bf48:	0005883a 	mov	r2,zero
 800bf4c:	dfc00117 	ldw	ra,4(sp)
 800bf50:	dc000017 	ldw	r16,0(sp)
 800bf54:	dec00204 	addi	sp,sp,8
 800bf58:	f800283a 	ret
 800bf5c:	8009883a 	mov	r4,r16
 800bf60:	01402004 	movi	r5,128
 800bf64:	80075600 	call	8007560 <_malloc_r>
 800bf68:	8080b715 	stw	r2,732(r16)
 800bf6c:	1009883a 	mov	r4,r2
 800bf70:	10000426 	beq	r2,zero,800bf84 <_init_signal+0x58>
 800bf74:	01802004 	movi	r6,128
 800bf78:	000b883a 	mov	r5,zero
 800bf7c:	800803c0 	call	800803c <memset>
 800bf80:	003ff106 	br	800bf48 <_init_signal+0x1c>
 800bf84:	00bfffc4 	movi	r2,-1
 800bf88:	003ff006 	br	800bf4c <_init_signal+0x20>

0800bf8c <__sigtramp>:
 800bf8c:	defffd04 	addi	sp,sp,-12
 800bf90:	dc400115 	stw	r17,4(sp)
 800bf94:	00c20074 	movhi	r3,2049
 800bf98:	dfc00215 	stw	ra,8(sp)
 800bf9c:	dc000015 	stw	r16,0(sp)
 800bfa0:	20800830 	cmpltui	r2,r4,32
 800bfa4:	1c51f217 	ldw	r17,18376(r3)
 800bfa8:	10002526 	beq	r2,zero,800c040 <__sigtramp+0xb4>
 800bfac:	88c0b717 	ldw	r3,732(r17)
 800bfb0:	2021883a 	mov	r16,r4
 800bfb4:	18001326 	beq	r3,zero,800c004 <__sigtramp+0x78>
 800bfb8:	800890ba 	slli	r4,r16,2
 800bfbc:	1907883a 	add	r3,r3,r4
 800bfc0:	18800017 	ldw	r2,0(r3)
 800bfc4:	10000d26 	beq	r2,zero,800bffc <__sigtramp+0x70>
 800bfc8:	113fffe0 	cmpeqi	r4,r2,-1
 800bfcc:	20001a1e 	bne	r4,zero,800c038 <__sigtramp+0xac>
 800bfd0:	11000060 	cmpeqi	r4,r2,1
 800bfd4:	2000161e 	bne	r4,zero,800c030 <__sigtramp+0xa4>
 800bfd8:	18000015 	stw	zero,0(r3)
 800bfdc:	8009883a 	mov	r4,r16
 800bfe0:	103ee83a 	callr	r2
 800bfe4:	0005883a 	mov	r2,zero
 800bfe8:	dfc00217 	ldw	ra,8(sp)
 800bfec:	dc400117 	ldw	r17,4(sp)
 800bff0:	dc000017 	ldw	r16,0(sp)
 800bff4:	dec00304 	addi	sp,sp,12
 800bff8:	f800283a 	ret
 800bffc:	00800044 	movi	r2,1
 800c000:	003ff906 	br	800bfe8 <__sigtramp+0x5c>
 800c004:	01402004 	movi	r5,128
 800c008:	8809883a 	mov	r4,r17
 800c00c:	80075600 	call	8007560 <_malloc_r>
 800c010:	8880b715 	stw	r2,732(r17)
 800c014:	10000a26 	beq	r2,zero,800c040 <__sigtramp+0xb4>
 800c018:	01802004 	movi	r6,128
 800c01c:	000b883a 	mov	r5,zero
 800c020:	1009883a 	mov	r4,r2
 800c024:	800803c0 	call	800803c <memset>
 800c028:	1007883a 	mov	r3,r2
 800c02c:	003fe206 	br	800bfb8 <__sigtramp+0x2c>
 800c030:	008000c4 	movi	r2,3
 800c034:	003fec06 	br	800bfe8 <__sigtramp+0x5c>
 800c038:	00800084 	movi	r2,2
 800c03c:	003fea06 	br	800bfe8 <__sigtramp+0x5c>
 800c040:	00bfffc4 	movi	r2,-1
 800c044:	003fe806 	br	800bfe8 <__sigtramp+0x5c>

0800c048 <_kill_r>:
 800c048:	2807883a 	mov	r3,r5
 800c04c:	defffe04 	addi	sp,sp,-8
 800c050:	dc000015 	stw	r16,0(sp)
 800c054:	00820074 	movhi	r2,2049
 800c058:	300b883a 	mov	r5,r6
 800c05c:	2021883a 	mov	r16,r4
 800c060:	1809883a 	mov	r4,r3
 800c064:	dfc00115 	stw	ra,4(sp)
 800c068:	1018f915 	stw	zero,25572(r2)
 800c06c:	800f9680 	call	800f968 <kill>
 800c070:	10ffffd8 	cmpnei	r3,r2,-1
 800c074:	18000426 	beq	r3,zero,800c088 <_kill_r+0x40>
 800c078:	dfc00117 	ldw	ra,4(sp)
 800c07c:	dc000017 	ldw	r16,0(sp)
 800c080:	dec00204 	addi	sp,sp,8
 800c084:	f800283a 	ret
 800c088:	00c20074 	movhi	r3,2049
 800c08c:	18d8f917 	ldw	r3,25572(r3)
 800c090:	183ff926 	beq	r3,zero,800c078 <_kill_r+0x30>
 800c094:	80c00015 	stw	r3,0(r16)
 800c098:	dfc00117 	ldw	ra,4(sp)
 800c09c:	dc000017 	ldw	r16,0(sp)
 800c0a0:	dec00204 	addi	sp,sp,8
 800c0a4:	f800283a 	ret

0800c0a8 <_getpid_r>:
 800c0a8:	800f8201 	jmpi	800f820 <getpid>

0800c0ac <__udivdi3>:
 800c0ac:	defff504 	addi	sp,sp,-44
 800c0b0:	dd000515 	stw	r20,20(sp)
 800c0b4:	dc800315 	stw	r18,12(sp)
 800c0b8:	dfc00a15 	stw	ra,40(sp)
 800c0bc:	df000915 	stw	fp,36(sp)
 800c0c0:	ddc00815 	stw	r23,32(sp)
 800c0c4:	dd800715 	stw	r22,28(sp)
 800c0c8:	dd400615 	stw	r21,24(sp)
 800c0cc:	dcc00415 	stw	r19,16(sp)
 800c0d0:	dc400215 	stw	r17,8(sp)
 800c0d4:	dc000115 	stw	r16,4(sp)
 800c0d8:	2029883a 	mov	r20,r4
 800c0dc:	2825883a 	mov	r18,r5
 800c0e0:	3800461e 	bne	r7,zero,800c1fc <__udivdi3+0x150>
 800c0e4:	3823883a 	mov	r17,r7
 800c0e8:	3021883a 	mov	r16,r6
 800c0ec:	2027883a 	mov	r19,r4
 800c0f0:	2980622e 	bgeu	r5,r6,800c27c <__udivdi3+0x1d0>
 800c0f4:	00bfffd4 	movui	r2,65535
 800c0f8:	282b883a 	mov	r21,r5
 800c0fc:	1180aa2e 	bgeu	r2,r6,800c3a8 <__udivdi3+0x2fc>
 800c100:	00804034 	movhi	r2,256
 800c104:	30815a36 	bltu	r6,r2,800c670 <__udivdi3+0x5c4>
 800c108:	3006d63a 	srli	r3,r6,24
 800c10c:	04400604 	movi	r17,24
 800c110:	00820074 	movhi	r2,2049
 800c114:	1885883a 	add	r2,r3,r2
 800c118:	108abc03 	ldbu	r2,10992(r2)
 800c11c:	00c00804 	movi	r3,32
 800c120:	1463883a 	add	r17,r2,r17
 800c124:	1c45c83a 	sub	r2,r3,r17
 800c128:	1c400526 	beq	r3,r17,800c140 <__udivdi3+0x94>
 800c12c:	9086983a 	sll	r3,r18,r2
 800c130:	a462d83a 	srl	r17,r20,r17
 800c134:	30a0983a 	sll	r16,r6,r2
 800c138:	a0a6983a 	sll	r19,r20,r2
 800c13c:	88eab03a 	or	r21,r17,r3
 800c140:	802cd43a 	srli	r22,r16,16
 800c144:	a809883a 	mov	r4,r21
 800c148:	853fffcc 	andi	r20,r16,65535
 800c14c:	b00b883a 	mov	r5,r22
 800c150:	800cde80 	call	800cde8 <__umodsi3>
 800c154:	a809883a 	mov	r4,r21
 800c158:	b00b883a 	mov	r5,r22
 800c15c:	1025883a 	mov	r18,r2
 800c160:	800cd840 	call	800cd84 <__udivsi3>
 800c164:	a009883a 	mov	r4,r20
 800c168:	100b883a 	mov	r5,r2
 800c16c:	102b883a 	mov	r21,r2
 800c170:	800ce440 	call	800ce44 <__mulsi3>
 800c174:	9024943a 	slli	r18,r18,16
 800c178:	9808d43a 	srli	r4,r19,16
 800c17c:	9108b03a 	or	r4,r18,r4
 800c180:	2080052e 	bgeu	r4,r2,800c198 <__udivdi3+0xec>
 800c184:	2409883a 	add	r4,r4,r16
 800c188:	a8ffffc4 	addi	r3,r21,-1
 800c18c:	24000136 	bltu	r4,r16,800c194 <__udivdi3+0xe8>
 800c190:	20814836 	bltu	r4,r2,800c6b4 <__udivdi3+0x608>
 800c194:	182b883a 	mov	r21,r3
 800c198:	20a3c83a 	sub	r17,r4,r2
 800c19c:	8809883a 	mov	r4,r17
 800c1a0:	b00b883a 	mov	r5,r22
 800c1a4:	800cde80 	call	800cde8 <__umodsi3>
 800c1a8:	8809883a 	mov	r4,r17
 800c1ac:	1023883a 	mov	r17,r2
 800c1b0:	b00b883a 	mov	r5,r22
 800c1b4:	8822943a 	slli	r17,r17,16
 800c1b8:	800cd840 	call	800cd84 <__udivsi3>
 800c1bc:	100b883a 	mov	r5,r2
 800c1c0:	a009883a 	mov	r4,r20
 800c1c4:	9cffffcc 	andi	r19,r19,65535
 800c1c8:	1025883a 	mov	r18,r2
 800c1cc:	8ce6b03a 	or	r19,r17,r19
 800c1d0:	800ce440 	call	800ce44 <__mulsi3>
 800c1d4:	9880052e 	bgeu	r19,r2,800c1ec <__udivdi3+0x140>
 800c1d8:	84e7883a 	add	r19,r16,r19
 800c1dc:	90ffffc4 	addi	r3,r18,-1
 800c1e0:	9c000136 	bltu	r19,r16,800c1e8 <__udivdi3+0x13c>
 800c1e4:	98813136 	bltu	r19,r2,800c6ac <__udivdi3+0x600>
 800c1e8:	1825883a 	mov	r18,r3
 800c1ec:	a80c943a 	slli	r6,r21,16
 800c1f0:	0007883a 	mov	r3,zero
 800c1f4:	3484b03a 	or	r2,r6,r18
 800c1f8:	00000306 	br	800c208 <__udivdi3+0x15c>
 800c1fc:	29c00e2e 	bgeu	r5,r7,800c238 <__udivdi3+0x18c>
 800c200:	0007883a 	mov	r3,zero
 800c204:	0005883a 	mov	r2,zero
 800c208:	dfc00a17 	ldw	ra,40(sp)
 800c20c:	df000917 	ldw	fp,36(sp)
 800c210:	ddc00817 	ldw	r23,32(sp)
 800c214:	dd800717 	ldw	r22,28(sp)
 800c218:	dd400617 	ldw	r21,24(sp)
 800c21c:	dd000517 	ldw	r20,20(sp)
 800c220:	dcc00417 	ldw	r19,16(sp)
 800c224:	dc800317 	ldw	r18,12(sp)
 800c228:	dc400217 	ldw	r17,8(sp)
 800c22c:	dc000117 	ldw	r16,4(sp)
 800c230:	dec00b04 	addi	sp,sp,44
 800c234:	f800283a 	ret
 800c238:	00bfffd4 	movui	r2,65535
 800c23c:	11c05f2e 	bgeu	r2,r7,800c3bc <__udivdi3+0x310>
 800c240:	00804034 	movhi	r2,256
 800c244:	3880fc36 	bltu	r7,r2,800c638 <__udivdi3+0x58c>
 800c248:	3804d63a 	srli	r2,r7,24
 800c24c:	01000604 	movi	r4,24
 800c250:	00c20074 	movhi	r3,2049
 800c254:	10c7883a 	add	r3,r2,r3
 800c258:	188abc03 	ldbu	r2,10992(r3)
 800c25c:	00c00804 	movi	r3,32
 800c260:	1105883a 	add	r2,r2,r4
 800c264:	18a3c83a 	sub	r17,r3,r2
 800c268:	1880901e 	bne	r3,r2,800c4ac <__udivdi3+0x400>
 800c26c:	3c80f736 	bltu	r7,r18,800c64c <__udivdi3+0x5a0>
 800c270:	a185403a 	cmpgeu	r2,r20,r6
 800c274:	0007883a 	mov	r3,zero
 800c278:	003fe306 	br	800c208 <__udivdi3+0x15c>
 800c27c:	3000041e 	bne	r6,zero,800c290 <__udivdi3+0x1e4>
 800c280:	000b883a 	mov	r5,zero
 800c284:	01000044 	movi	r4,1
 800c288:	800cd840 	call	800cd84 <__udivsi3>
 800c28c:	1021883a 	mov	r16,r2
 800c290:	00bfffd4 	movui	r2,65535
 800c294:	14003f2e 	bgeu	r2,r16,800c394 <__udivdi3+0x2e8>
 800c298:	00804034 	movhi	r2,256
 800c29c:	8080f136 	bltu	r16,r2,800c664 <__udivdi3+0x5b8>
 800c2a0:	8006d63a 	srli	r3,r16,24
 800c2a4:	04400604 	movi	r17,24
 800c2a8:	00820074 	movhi	r2,2049
 800c2ac:	1885883a 	add	r2,r3,r2
 800c2b0:	108abc03 	ldbu	r2,10992(r2)
 800c2b4:	00c00804 	movi	r3,32
 800c2b8:	1463883a 	add	r17,r2,r17
 800c2bc:	1c45c83a 	sub	r2,r3,r17
 800c2c0:	1c40431e 	bne	r3,r17,800c3d0 <__udivdi3+0x324>
 800c2c4:	802cd43a 	srli	r22,r16,16
 800c2c8:	9423c83a 	sub	r17,r18,r16
 800c2cc:	853fffcc 	andi	r20,r16,65535
 800c2d0:	00c00044 	movi	r3,1
 800c2d4:	b00b883a 	mov	r5,r22
 800c2d8:	8809883a 	mov	r4,r17
 800c2dc:	d8c00015 	stw	r3,0(sp)
 800c2e0:	800cde80 	call	800cde8 <__umodsi3>
 800c2e4:	b00b883a 	mov	r5,r22
 800c2e8:	8809883a 	mov	r4,r17
 800c2ec:	1025883a 	mov	r18,r2
 800c2f0:	800cd840 	call	800cd84 <__udivsi3>
 800c2f4:	1009883a 	mov	r4,r2
 800c2f8:	a00b883a 	mov	r5,r20
 800c2fc:	102b883a 	mov	r21,r2
 800c300:	800ce440 	call	800ce44 <__mulsi3>
 800c304:	9024943a 	slli	r18,r18,16
 800c308:	9808d43a 	srli	r4,r19,16
 800c30c:	d8c00017 	ldw	r3,0(sp)
 800c310:	9108b03a 	or	r4,r18,r4
 800c314:	2080052e 	bgeu	r4,r2,800c32c <__udivdi3+0x280>
 800c318:	2409883a 	add	r4,r4,r16
 800c31c:	a97fffc4 	addi	r5,r21,-1
 800c320:	24000136 	bltu	r4,r16,800c328 <__udivdi3+0x27c>
 800c324:	2080e636 	bltu	r4,r2,800c6c0 <__udivdi3+0x614>
 800c328:	282b883a 	mov	r21,r5
 800c32c:	20a3c83a 	sub	r17,r4,r2
 800c330:	8809883a 	mov	r4,r17
 800c334:	b00b883a 	mov	r5,r22
 800c338:	d8c00015 	stw	r3,0(sp)
 800c33c:	800cde80 	call	800cde8 <__umodsi3>
 800c340:	8809883a 	mov	r4,r17
 800c344:	1023883a 	mov	r17,r2
 800c348:	b00b883a 	mov	r5,r22
 800c34c:	8822943a 	slli	r17,r17,16
 800c350:	800cd840 	call	800cd84 <__udivsi3>
 800c354:	a00b883a 	mov	r5,r20
 800c358:	1009883a 	mov	r4,r2
 800c35c:	9cffffcc 	andi	r19,r19,65535
 800c360:	1025883a 	mov	r18,r2
 800c364:	8ce6b03a 	or	r19,r17,r19
 800c368:	800ce440 	call	800ce44 <__mulsi3>
 800c36c:	d8c00017 	ldw	r3,0(sp)
 800c370:	9880052e 	bgeu	r19,r2,800c388 <__udivdi3+0x2dc>
 800c374:	84e7883a 	add	r19,r16,r19
 800c378:	913fffc4 	addi	r4,r18,-1
 800c37c:	9c000136 	bltu	r19,r16,800c384 <__udivdi3+0x2d8>
 800c380:	9880c836 	bltu	r19,r2,800c6a4 <__udivdi3+0x5f8>
 800c384:	2025883a 	mov	r18,r4
 800c388:	a80c943a 	slli	r6,r21,16
 800c38c:	3484b03a 	or	r2,r6,r18
 800c390:	003f9d06 	br	800c208 <__udivdi3+0x15c>
 800c394:	80804030 	cmpltui	r2,r16,256
 800c398:	1000b81e 	bne	r2,zero,800c67c <__udivdi3+0x5d0>
 800c39c:	8006d23a 	srli	r3,r16,8
 800c3a0:	04400204 	movi	r17,8
 800c3a4:	003fc006 	br	800c2a8 <__udivdi3+0x1fc>
 800c3a8:	30804030 	cmpltui	r2,r6,256
 800c3ac:	1000a51e 	bne	r2,zero,800c644 <__udivdi3+0x598>
 800c3b0:	3006d23a 	srli	r3,r6,8
 800c3b4:	04400204 	movi	r17,8
 800c3b8:	003f5506 	br	800c110 <__udivdi3+0x64>
 800c3bc:	38804030 	cmpltui	r2,r7,256
 800c3c0:	1000a51e 	bne	r2,zero,800c658 <__udivdi3+0x5ac>
 800c3c4:	3804d23a 	srli	r2,r7,8
 800c3c8:	01000204 	movi	r4,8
 800c3cc:	003fa006 	br	800c250 <__udivdi3+0x1a4>
 800c3d0:	80a0983a 	sll	r16,r16,r2
 800c3d4:	946ed83a 	srl	r23,r18,r17
 800c3d8:	9086983a 	sll	r3,r18,r2
 800c3dc:	802cd43a 	srli	r22,r16,16
 800c3e0:	a462d83a 	srl	r17,r20,r17
 800c3e4:	b809883a 	mov	r4,r23
 800c3e8:	b00b883a 	mov	r5,r22
 800c3ec:	88eab03a 	or	r21,r17,r3
 800c3f0:	a0a6983a 	sll	r19,r20,r2
 800c3f4:	800cde80 	call	800cde8 <__umodsi3>
 800c3f8:	b809883a 	mov	r4,r23
 800c3fc:	b00b883a 	mov	r5,r22
 800c400:	1025883a 	mov	r18,r2
 800c404:	853fffcc 	andi	r20,r16,65535
 800c408:	800cd840 	call	800cd84 <__udivsi3>
 800c40c:	a009883a 	mov	r4,r20
 800c410:	100b883a 	mov	r5,r2
 800c414:	102f883a 	mov	r23,r2
 800c418:	800ce440 	call	800ce44 <__mulsi3>
 800c41c:	9024943a 	slli	r18,r18,16
 800c420:	a808d43a 	srli	r4,r21,16
 800c424:	9108b03a 	or	r4,r18,r4
 800c428:	2080062e 	bgeu	r4,r2,800c444 <__udivdi3+0x398>
 800c42c:	2409883a 	add	r4,r4,r16
 800c430:	b8ffffc4 	addi	r3,r23,-1
 800c434:	24009936 	bltu	r4,r16,800c69c <__udivdi3+0x5f0>
 800c438:	2080982e 	bgeu	r4,r2,800c69c <__udivdi3+0x5f0>
 800c43c:	bdffff84 	addi	r23,r23,-2
 800c440:	2409883a 	add	r4,r4,r16
 800c444:	20a3c83a 	sub	r17,r4,r2
 800c448:	8809883a 	mov	r4,r17
 800c44c:	b00b883a 	mov	r5,r22
 800c450:	800cde80 	call	800cde8 <__umodsi3>
 800c454:	1025883a 	mov	r18,r2
 800c458:	8809883a 	mov	r4,r17
 800c45c:	b00b883a 	mov	r5,r22
 800c460:	9024943a 	slli	r18,r18,16
 800c464:	800cd840 	call	800cd84 <__udivsi3>
 800c468:	100b883a 	mov	r5,r2
 800c46c:	a009883a 	mov	r4,r20
 800c470:	ac7fffcc 	andi	r17,r21,65535
 800c474:	1039883a 	mov	fp,r2
 800c478:	9462b03a 	or	r17,r18,r17
 800c47c:	800ce440 	call	800ce44 <__mulsi3>
 800c480:	8880062e 	bgeu	r17,r2,800c49c <__udivdi3+0x3f0>
 800c484:	8c23883a 	add	r17,r17,r16
 800c488:	e0ffffc4 	addi	r3,fp,-1
 800c48c:	8c007f36 	bltu	r17,r16,800c68c <__udivdi3+0x5e0>
 800c490:	88807e2e 	bgeu	r17,r2,800c68c <__udivdi3+0x5e0>
 800c494:	e73fff84 	addi	fp,fp,-2
 800c498:	8c23883a 	add	r17,r17,r16
 800c49c:	b806943a 	slli	r3,r23,16
 800c4a0:	88a3c83a 	sub	r17,r17,r2
 800c4a4:	1f06b03a 	or	r3,r3,fp
 800c4a8:	003f8a06 	br	800c2d4 <__udivdi3+0x228>
 800c4ac:	30a6d83a 	srl	r19,r6,r2
 800c4b0:	3c4e983a 	sll	r7,r7,r17
 800c4b4:	90a0d83a 	srl	r16,r18,r2
 800c4b8:	9446983a 	sll	r3,r18,r17
 800c4bc:	99e6b03a 	or	r19,r19,r7
 800c4c0:	a084d83a 	srl	r2,r20,r2
 800c4c4:	9838d43a 	srli	fp,r19,16
 800c4c8:	8009883a 	mov	r4,r16
 800c4cc:	10eab03a 	or	r21,r2,r3
 800c4d0:	e00b883a 	mov	r5,fp
 800c4d4:	346c983a 	sll	r22,r6,r17
 800c4d8:	dd400015 	stw	r21,0(sp)
 800c4dc:	800cde80 	call	800cde8 <__umodsi3>
 800c4e0:	8009883a 	mov	r4,r16
 800c4e4:	e00b883a 	mov	r5,fp
 800c4e8:	102f883a 	mov	r23,r2
 800c4ec:	9cbfffcc 	andi	r18,r19,65535
 800c4f0:	800cd840 	call	800cd84 <__udivsi3>
 800c4f4:	9009883a 	mov	r4,r18
 800c4f8:	100b883a 	mov	r5,r2
 800c4fc:	1021883a 	mov	r16,r2
 800c500:	800ce440 	call	800ce44 <__mulsi3>
 800c504:	b82e943a 	slli	r23,r23,16
 800c508:	a808d43a 	srli	r4,r21,16
 800c50c:	b908b03a 	or	r4,r23,r4
 800c510:	2080062e 	bgeu	r4,r2,800c52c <__udivdi3+0x480>
 800c514:	24c9883a 	add	r4,r4,r19
 800c518:	817fffc4 	addi	r5,r16,-1
 800c51c:	24c05d36 	bltu	r4,r19,800c694 <__udivdi3+0x5e8>
 800c520:	20805c2e 	bgeu	r4,r2,800c694 <__udivdi3+0x5e8>
 800c524:	843fff84 	addi	r16,r16,-2
 800c528:	24c9883a 	add	r4,r4,r19
 800c52c:	20abc83a 	sub	r21,r4,r2
 800c530:	a809883a 	mov	r4,r21
 800c534:	e00b883a 	mov	r5,fp
 800c538:	800cde80 	call	800cde8 <__umodsi3>
 800c53c:	a809883a 	mov	r4,r21
 800c540:	e00b883a 	mov	r5,fp
 800c544:	102b883a 	mov	r21,r2
 800c548:	800cd840 	call	800cd84 <__udivsi3>
 800c54c:	9009883a 	mov	r4,r18
 800c550:	100b883a 	mov	r5,r2
 800c554:	102f883a 	mov	r23,r2
 800c558:	800ce440 	call	800ce44 <__mulsi3>
 800c55c:	d8c00017 	ldw	r3,0(sp)
 800c560:	a82a943a 	slli	r21,r21,16
 800c564:	100d883a 	mov	r6,r2
 800c568:	1cbfffcc 	andi	r18,r3,65535
 800c56c:	aca4b03a 	or	r18,r21,r18
 800c570:	9080062e 	bgeu	r18,r2,800c58c <__udivdi3+0x4e0>
 800c574:	94e5883a 	add	r18,r18,r19
 800c578:	b8bfffc4 	addi	r2,r23,-1
 800c57c:	94c04136 	bltu	r18,r19,800c684 <__udivdi3+0x5d8>
 800c580:	9180402e 	bgeu	r18,r6,800c684 <__udivdi3+0x5d8>
 800c584:	bdffff84 	addi	r23,r23,-2
 800c588:	94e5883a 	add	r18,r18,r19
 800c58c:	8004943a 	slli	r2,r16,16
 800c590:	bd7fffcc 	andi	r21,r23,65535
 800c594:	b73fffcc 	andi	fp,r22,65535
 800c598:	15e0b03a 	or	r16,r2,r23
 800c59c:	8026d43a 	srli	r19,r16,16
 800c5a0:	a809883a 	mov	r4,r21
 800c5a4:	e00b883a 	mov	r5,fp
 800c5a8:	91a5c83a 	sub	r18,r18,r6
 800c5ac:	b02cd43a 	srli	r22,r22,16
 800c5b0:	800ce440 	call	800ce44 <__mulsi3>
 800c5b4:	9809883a 	mov	r4,r19
 800c5b8:	e00b883a 	mov	r5,fp
 800c5bc:	102f883a 	mov	r23,r2
 800c5c0:	800ce440 	call	800ce44 <__mulsi3>
 800c5c4:	9809883a 	mov	r4,r19
 800c5c8:	b00b883a 	mov	r5,r22
 800c5cc:	1027883a 	mov	r19,r2
 800c5d0:	800ce440 	call	800ce44 <__mulsi3>
 800c5d4:	a809883a 	mov	r4,r21
 800c5d8:	b00b883a 	mov	r5,r22
 800c5dc:	102b883a 	mov	r21,r2
 800c5e0:	800ce440 	call	800ce44 <__mulsi3>
 800c5e4:	b806d43a 	srli	r3,r23,16
 800c5e8:	14c5883a 	add	r2,r2,r19
 800c5ec:	1887883a 	add	r3,r3,r2
 800c5f0:	1cc0022e 	bgeu	r3,r19,800c5fc <__udivdi3+0x550>
 800c5f4:	00800074 	movhi	r2,1
 800c5f8:	a8ab883a 	add	r21,r21,r2
 800c5fc:	1804d43a 	srli	r2,r3,16
 800c600:	156b883a 	add	r21,r2,r21
 800c604:	95400936 	bltu	r18,r21,800c62c <__udivdi3+0x580>
 800c608:	95400326 	beq	r18,r21,800c618 <__udivdi3+0x56c>
 800c60c:	8005883a 	mov	r2,r16
 800c610:	0007883a 	mov	r3,zero
 800c614:	003efc06 	br	800c208 <__udivdi3+0x15c>
 800c618:	1806943a 	slli	r3,r3,16
 800c61c:	a44c983a 	sll	r6,r20,r17
 800c620:	bdffffcc 	andi	r23,r23,65535
 800c624:	1dc7883a 	add	r3,r3,r23
 800c628:	30fff82e 	bgeu	r6,r3,800c60c <__udivdi3+0x560>
 800c62c:	80bfffc4 	addi	r2,r16,-1
 800c630:	0007883a 	mov	r3,zero
 800c634:	003ef406 	br	800c208 <__udivdi3+0x15c>
 800c638:	3804d43a 	srli	r2,r7,16
 800c63c:	01000404 	movi	r4,16
 800c640:	003f0306 	br	800c250 <__udivdi3+0x1a4>
 800c644:	3007883a 	mov	r3,r6
 800c648:	003eb106 	br	800c110 <__udivdi3+0x64>
 800c64c:	0007883a 	mov	r3,zero
 800c650:	00800044 	movi	r2,1
 800c654:	003eec06 	br	800c208 <__udivdi3+0x15c>
 800c658:	3805883a 	mov	r2,r7
 800c65c:	0009883a 	mov	r4,zero
 800c660:	003efb06 	br	800c250 <__udivdi3+0x1a4>
 800c664:	8006d43a 	srli	r3,r16,16
 800c668:	04400404 	movi	r17,16
 800c66c:	003f0e06 	br	800c2a8 <__udivdi3+0x1fc>
 800c670:	3006d43a 	srli	r3,r6,16
 800c674:	04400404 	movi	r17,16
 800c678:	003ea506 	br	800c110 <__udivdi3+0x64>
 800c67c:	8007883a 	mov	r3,r16
 800c680:	003f0906 	br	800c2a8 <__udivdi3+0x1fc>
 800c684:	102f883a 	mov	r23,r2
 800c688:	003fc006 	br	800c58c <__udivdi3+0x4e0>
 800c68c:	1839883a 	mov	fp,r3
 800c690:	003f8206 	br	800c49c <__udivdi3+0x3f0>
 800c694:	2821883a 	mov	r16,r5
 800c698:	003fa406 	br	800c52c <__udivdi3+0x480>
 800c69c:	182f883a 	mov	r23,r3
 800c6a0:	003f6806 	br	800c444 <__udivdi3+0x398>
 800c6a4:	94bfff84 	addi	r18,r18,-2
 800c6a8:	003f3706 	br	800c388 <__udivdi3+0x2dc>
 800c6ac:	94bfff84 	addi	r18,r18,-2
 800c6b0:	003ece06 	br	800c1ec <__udivdi3+0x140>
 800c6b4:	ad7fff84 	addi	r21,r21,-2
 800c6b8:	2409883a 	add	r4,r4,r16
 800c6bc:	003eb606 	br	800c198 <__udivdi3+0xec>
 800c6c0:	ad7fff84 	addi	r21,r21,-2
 800c6c4:	2409883a 	add	r4,r4,r16
 800c6c8:	003f1806 	br	800c32c <__udivdi3+0x280>

0800c6cc <__umoddi3>:
 800c6cc:	defff304 	addi	sp,sp,-52
 800c6d0:	dc400415 	stw	r17,16(sp)
 800c6d4:	dc000315 	stw	r16,12(sp)
 800c6d8:	dfc00c15 	stw	ra,48(sp)
 800c6dc:	df000b15 	stw	fp,44(sp)
 800c6e0:	ddc00a15 	stw	r23,40(sp)
 800c6e4:	dd800915 	stw	r22,36(sp)
 800c6e8:	dd400815 	stw	r21,32(sp)
 800c6ec:	dd000715 	stw	r20,28(sp)
 800c6f0:	dcc00615 	stw	r19,24(sp)
 800c6f4:	dc800515 	stw	r18,20(sp)
 800c6f8:	2823883a 	mov	r17,r5
 800c6fc:	2021883a 	mov	r16,r4
 800c700:	38003b1e 	bne	r7,zero,800c7f0 <__umoddi3+0x124>
 800c704:	3825883a 	mov	r18,r7
 800c708:	3029883a 	mov	r20,r6
 800c70c:	2027883a 	mov	r19,r4
 800c710:	29805b2e 	bgeu	r5,r6,800c880 <__umoddi3+0x1b4>
 800c714:	00bfffd4 	movui	r2,65535
 800c718:	282d883a 	mov	r22,r5
 800c71c:	11809a2e 	bgeu	r2,r6,800c988 <__umoddi3+0x2bc>
 800c720:	00804034 	movhi	r2,256
 800c724:	30814436 	bltu	r6,r2,800cc38 <__umoddi3+0x56c>
 800c728:	3006d63a 	srli	r3,r6,24
 800c72c:	04800604 	movi	r18,24
 800c730:	00820074 	movhi	r2,2049
 800c734:	1885883a 	add	r2,r3,r2
 800c738:	108abc03 	ldbu	r2,10992(r2)
 800c73c:	00c00804 	movi	r3,32
 800c740:	1485883a 	add	r2,r2,r18
 800c744:	18a5c83a 	sub	r18,r3,r2
 800c748:	18800526 	beq	r3,r2,800c760 <__umoddi3+0x94>
 800c74c:	8ca2983a 	sll	r17,r17,r18
 800c750:	8084d83a 	srl	r2,r16,r2
 800c754:	34a8983a 	sll	r20,r6,r18
 800c758:	84a6983a 	sll	r19,r16,r18
 800c75c:	146cb03a 	or	r22,r2,r17
 800c760:	a02ed43a 	srli	r23,r20,16
 800c764:	b009883a 	mov	r4,r22
 800c768:	a57fffcc 	andi	r21,r20,65535
 800c76c:	b80b883a 	mov	r5,r23
 800c770:	800cde80 	call	800cde8 <__umodsi3>
 800c774:	b80b883a 	mov	r5,r23
 800c778:	b009883a 	mov	r4,r22
 800c77c:	1023883a 	mov	r17,r2
 800c780:	800cd840 	call	800cd84 <__udivsi3>
 800c784:	a809883a 	mov	r4,r21
 800c788:	100b883a 	mov	r5,r2
 800c78c:	800ce440 	call	800ce44 <__mulsi3>
 800c790:	8822943a 	slli	r17,r17,16
 800c794:	9808d43a 	srli	r4,r19,16
 800c798:	8908b03a 	or	r4,r17,r4
 800c79c:	2080042e 	bgeu	r4,r2,800c7b0 <__umoddi3+0xe4>
 800c7a0:	2509883a 	add	r4,r4,r20
 800c7a4:	25000236 	bltu	r4,r20,800c7b0 <__umoddi3+0xe4>
 800c7a8:	2080012e 	bgeu	r4,r2,800c7b0 <__umoddi3+0xe4>
 800c7ac:	2509883a 	add	r4,r4,r20
 800c7b0:	20a1c83a 	sub	r16,r4,r2
 800c7b4:	b80b883a 	mov	r5,r23
 800c7b8:	8009883a 	mov	r4,r16
 800c7bc:	800cde80 	call	800cde8 <__umodsi3>
 800c7c0:	b80b883a 	mov	r5,r23
 800c7c4:	8009883a 	mov	r4,r16
 800c7c8:	1023883a 	mov	r17,r2
 800c7cc:	800cd840 	call	800cd84 <__udivsi3>
 800c7d0:	8822943a 	slli	r17,r17,16
 800c7d4:	100b883a 	mov	r5,r2
 800c7d8:	a809883a 	mov	r4,r21
 800c7dc:	800ce440 	call	800ce44 <__mulsi3>
 800c7e0:	98ffffcc 	andi	r3,r19,65535
 800c7e4:	88c6b03a 	or	r3,r17,r3
 800c7e8:	18805e2e 	bgeu	r3,r2,800c964 <__umoddi3+0x298>
 800c7ec:	00005906 	br	800c954 <__umoddi3+0x288>
 800c7f0:	2005883a 	mov	r2,r4
 800c7f4:	29c00d2e 	bgeu	r5,r7,800c82c <__umoddi3+0x160>
 800c7f8:	2807883a 	mov	r3,r5
 800c7fc:	dfc00c17 	ldw	ra,48(sp)
 800c800:	df000b17 	ldw	fp,44(sp)
 800c804:	ddc00a17 	ldw	r23,40(sp)
 800c808:	dd800917 	ldw	r22,36(sp)
 800c80c:	dd400817 	ldw	r21,32(sp)
 800c810:	dd000717 	ldw	r20,28(sp)
 800c814:	dcc00617 	ldw	r19,24(sp)
 800c818:	dc800517 	ldw	r18,20(sp)
 800c81c:	dc400417 	ldw	r17,16(sp)
 800c820:	dc000317 	ldw	r16,12(sp)
 800c824:	dec00d04 	addi	sp,sp,52
 800c828:	f800283a 	ret
 800c82c:	013fffd4 	movui	r4,65535
 800c830:	2807883a 	mov	r3,r5
 800c834:	21c0592e 	bgeu	r4,r7,800c99c <__umoddi3+0x2d0>
 800c838:	01004034 	movhi	r4,256
 800c83c:	39010336 	bltu	r7,r4,800cc4c <__umoddi3+0x580>
 800c840:	3808d63a 	srli	r4,r7,24
 800c844:	02000604 	movi	r8,24
 800c848:	01420074 	movhi	r5,2049
 800c84c:	214b883a 	add	r5,r4,r5
 800c850:	2d0abc03 	ldbu	r20,10992(r5)
 800c854:	01000804 	movi	r4,32
 800c858:	a229883a 	add	r20,r20,r8
 800c85c:	252bc83a 	sub	r21,r4,r20
 800c860:	2500531e 	bne	r4,r20,800c9b0 <__umoddi3+0x2e4>
 800c864:	3c400136 	bltu	r7,r17,800c86c <__umoddi3+0x1a0>
 800c868:	81bfe436 	bltu	r16,r6,800c7fc <__umoddi3+0x130>
 800c86c:	8185c83a 	sub	r2,r16,r6
 800c870:	89cfc83a 	sub	r7,r17,r7
 800c874:	8087803a 	cmpltu	r3,r16,r2
 800c878:	38c7c83a 	sub	r3,r7,r3
 800c87c:	003fdf06 	br	800c7fc <__umoddi3+0x130>
 800c880:	3000041e 	bne	r6,zero,800c894 <__umoddi3+0x1c8>
 800c884:	000b883a 	mov	r5,zero
 800c888:	01000044 	movi	r4,1
 800c88c:	800cd840 	call	800cd84 <__udivsi3>
 800c890:	1029883a 	mov	r20,r2
 800c894:	00bfffd4 	movui	r2,65535
 800c898:	1500362e 	bgeu	r2,r20,800c974 <__umoddi3+0x2a8>
 800c89c:	00804034 	movhi	r2,256
 800c8a0:	a080ed36 	bltu	r20,r2,800cc58 <__umoddi3+0x58c>
 800c8a4:	a006d63a 	srli	r3,r20,24
 800c8a8:	04800604 	movi	r18,24
 800c8ac:	00820074 	movhi	r2,2049
 800c8b0:	1885883a 	add	r2,r3,r2
 800c8b4:	158abc03 	ldbu	r22,10992(r2)
 800c8b8:	00800804 	movi	r2,32
 800c8bc:	b4ad883a 	add	r22,r22,r18
 800c8c0:	15a5c83a 	sub	r18,r2,r22
 800c8c4:	1580a51e 	bne	r2,r22,800cb5c <__umoddi3+0x490>
 800c8c8:	a02ed43a 	srli	r23,r20,16
 800c8cc:	8d23c83a 	sub	r17,r17,r20
 800c8d0:	a57fffcc 	andi	r21,r20,65535
 800c8d4:	8809883a 	mov	r4,r17
 800c8d8:	b80b883a 	mov	r5,r23
 800c8dc:	800cde80 	call	800cde8 <__umodsi3>
 800c8e0:	8809883a 	mov	r4,r17
 800c8e4:	b80b883a 	mov	r5,r23
 800c8e8:	1023883a 	mov	r17,r2
 800c8ec:	800cd840 	call	800cd84 <__udivsi3>
 800c8f0:	1009883a 	mov	r4,r2
 800c8f4:	a80b883a 	mov	r5,r21
 800c8f8:	800ce440 	call	800ce44 <__mulsi3>
 800c8fc:	8822943a 	slli	r17,r17,16
 800c900:	9808d43a 	srli	r4,r19,16
 800c904:	8908b03a 	or	r4,r17,r4
 800c908:	2080032e 	bgeu	r4,r2,800c918 <__umoddi3+0x24c>
 800c90c:	2509883a 	add	r4,r4,r20
 800c910:	25000136 	bltu	r4,r20,800c918 <__umoddi3+0x24c>
 800c914:	2080dc36 	bltu	r4,r2,800cc88 <__umoddi3+0x5bc>
 800c918:	20a1c83a 	sub	r16,r4,r2
 800c91c:	b80b883a 	mov	r5,r23
 800c920:	8009883a 	mov	r4,r16
 800c924:	800cde80 	call	800cde8 <__umodsi3>
 800c928:	b80b883a 	mov	r5,r23
 800c92c:	8009883a 	mov	r4,r16
 800c930:	1023883a 	mov	r17,r2
 800c934:	8822943a 	slli	r17,r17,16
 800c938:	800cd840 	call	800cd84 <__udivsi3>
 800c93c:	a80b883a 	mov	r5,r21
 800c940:	1009883a 	mov	r4,r2
 800c944:	800ce440 	call	800ce44 <__mulsi3>
 800c948:	9cffffcc 	andi	r19,r19,65535
 800c94c:	8cc6b03a 	or	r3,r17,r19
 800c950:	1880042e 	bgeu	r3,r2,800c964 <__umoddi3+0x298>
 800c954:	1d07883a 	add	r3,r3,r20
 800c958:	1d000236 	bltu	r3,r20,800c964 <__umoddi3+0x298>
 800c95c:	1880012e 	bgeu	r3,r2,800c964 <__umoddi3+0x298>
 800c960:	1d07883a 	add	r3,r3,r20
 800c964:	1885c83a 	sub	r2,r3,r2
 800c968:	1484d83a 	srl	r2,r2,r18
 800c96c:	0007883a 	mov	r3,zero
 800c970:	003fa206 	br	800c7fc <__umoddi3+0x130>
 800c974:	a0804030 	cmpltui	r2,r20,256
 800c978:	1000ba1e 	bne	r2,zero,800cc64 <__umoddi3+0x598>
 800c97c:	a006d23a 	srli	r3,r20,8
 800c980:	04800204 	movi	r18,8
 800c984:	003fc906 	br	800c8ac <__umoddi3+0x1e0>
 800c988:	30804030 	cmpltui	r2,r6,256
 800c98c:	1000ad1e 	bne	r2,zero,800cc44 <__umoddi3+0x578>
 800c990:	3006d23a 	srli	r3,r6,8
 800c994:	04800204 	movi	r18,8
 800c998:	003f6506 	br	800c730 <__umoddi3+0x64>
 800c99c:	39004030 	cmpltui	r4,r7,256
 800c9a0:	2000b21e 	bne	r4,zero,800cc6c <__umoddi3+0x5a0>
 800c9a4:	3808d23a 	srli	r4,r7,8
 800c9a8:	02000204 	movi	r8,8
 800c9ac:	003fa606 	br	800c848 <__umoddi3+0x17c>
 800c9b0:	3d4e983a 	sll	r7,r7,r21
 800c9b4:	3508d83a 	srl	r4,r6,r20
 800c9b8:	8d2cd83a 	srl	r22,r17,r20
 800c9bc:	8504d83a 	srl	r2,r16,r20
 800c9c0:	21e4b03a 	or	r18,r4,r7
 800c9c4:	8d62983a 	sll	r17,r17,r21
 800c9c8:	9026d43a 	srli	r19,r18,16
 800c9cc:	354c983a 	sll	r6,r6,r21
 800c9d0:	1444b03a 	or	r2,r2,r17
 800c9d4:	b009883a 	mov	r4,r22
 800c9d8:	980b883a 	mov	r5,r19
 800c9dc:	d9800115 	stw	r6,4(sp)
 800c9e0:	d8800015 	stw	r2,0(sp)
 800c9e4:	800cde80 	call	800cde8 <__umodsi3>
 800c9e8:	980b883a 	mov	r5,r19
 800c9ec:	b009883a 	mov	r4,r22
 800c9f0:	102f883a 	mov	r23,r2
 800c9f4:	947fffcc 	andi	r17,r18,65535
 800c9f8:	800cd840 	call	800cd84 <__udivsi3>
 800c9fc:	8809883a 	mov	r4,r17
 800ca00:	100b883a 	mov	r5,r2
 800ca04:	1039883a 	mov	fp,r2
 800ca08:	800ce440 	call	800ce44 <__mulsi3>
 800ca0c:	d8c00017 	ldw	r3,0(sp)
 800ca10:	b82e943a 	slli	r23,r23,16
 800ca14:	8560983a 	sll	r16,r16,r21
 800ca18:	1808d43a 	srli	r4,r3,16
 800ca1c:	b908b03a 	or	r4,r23,r4
 800ca20:	2080062e 	bgeu	r4,r2,800ca3c <__umoddi3+0x370>
 800ca24:	2489883a 	add	r4,r4,r18
 800ca28:	e17fffc4 	addi	r5,fp,-1
 800ca2c:	24809436 	bltu	r4,r18,800cc80 <__umoddi3+0x5b4>
 800ca30:	2080932e 	bgeu	r4,r2,800cc80 <__umoddi3+0x5b4>
 800ca34:	e73fff84 	addi	fp,fp,-2
 800ca38:	2489883a 	add	r4,r4,r18
 800ca3c:	20adc83a 	sub	r22,r4,r2
 800ca40:	980b883a 	mov	r5,r19
 800ca44:	b009883a 	mov	r4,r22
 800ca48:	800cde80 	call	800cde8 <__umodsi3>
 800ca4c:	980b883a 	mov	r5,r19
 800ca50:	b009883a 	mov	r4,r22
 800ca54:	102f883a 	mov	r23,r2
 800ca58:	800cd840 	call	800cd84 <__udivsi3>
 800ca5c:	100b883a 	mov	r5,r2
 800ca60:	8809883a 	mov	r4,r17
 800ca64:	d8800215 	stw	r2,8(sp)
 800ca68:	800ce440 	call	800ce44 <__mulsi3>
 800ca6c:	d8c00017 	ldw	r3,0(sp)
 800ca70:	b82e943a 	slli	r23,r23,16
 800ca74:	d9400217 	ldw	r5,8(sp)
 800ca78:	1c7fffcc 	andi	r17,r3,65535
 800ca7c:	bc62b03a 	or	r17,r23,r17
 800ca80:	8880062e 	bgeu	r17,r2,800ca9c <__umoddi3+0x3d0>
 800ca84:	8ca3883a 	add	r17,r17,r18
 800ca88:	28ffffc4 	addi	r3,r5,-1
 800ca8c:	8c807a36 	bltu	r17,r18,800cc78 <__umoddi3+0x5ac>
 800ca90:	8880792e 	bgeu	r17,r2,800cc78 <__umoddi3+0x5ac>
 800ca94:	297fff84 	addi	r5,r5,-2
 800ca98:	8ca3883a 	add	r17,r17,r18
 800ca9c:	e02c943a 	slli	r22,fp,16
 800caa0:	d9c00117 	ldw	r7,4(sp)
 800caa4:	29bfffcc 	andi	r6,r5,65535
 800caa8:	b16cb03a 	or	r22,r22,r5
 800caac:	38ffffcc 	andi	r3,r7,65535
 800cab0:	b02cd43a 	srli	r22,r22,16
 800cab4:	180b883a 	mov	r5,r3
 800cab8:	3009883a 	mov	r4,r6
 800cabc:	3838d43a 	srli	fp,r7,16
 800cac0:	182f883a 	mov	r23,r3
 800cac4:	d9800015 	stw	r6,0(sp)
 800cac8:	88a3c83a 	sub	r17,r17,r2
 800cacc:	800ce440 	call	800ce44 <__mulsi3>
 800cad0:	b80b883a 	mov	r5,r23
 800cad4:	b009883a 	mov	r4,r22
 800cad8:	102f883a 	mov	r23,r2
 800cadc:	800ce440 	call	800ce44 <__mulsi3>
 800cae0:	e00b883a 	mov	r5,fp
 800cae4:	b009883a 	mov	r4,r22
 800cae8:	102d883a 	mov	r22,r2
 800caec:	800ce440 	call	800ce44 <__mulsi3>
 800caf0:	d9800017 	ldw	r6,0(sp)
 800caf4:	e00b883a 	mov	r5,fp
 800caf8:	1039883a 	mov	fp,r2
 800cafc:	3009883a 	mov	r4,r6
 800cb00:	800ce440 	call	800ce44 <__mulsi3>
 800cb04:	b808d43a 	srli	r4,r23,16
 800cb08:	1585883a 	add	r2,r2,r22
 800cb0c:	2089883a 	add	r4,r4,r2
 800cb10:	2580022e 	bgeu	r4,r22,800cb1c <__umoddi3+0x450>
 800cb14:	00800074 	movhi	r2,1
 800cb18:	e0b9883a 	add	fp,fp,r2
 800cb1c:	2006d43a 	srli	r3,r4,16
 800cb20:	2008943a 	slli	r4,r4,16
 800cb24:	bdffffcc 	andi	r23,r23,65535
 800cb28:	1f07883a 	add	r3,r3,fp
 800cb2c:	25c9883a 	add	r4,r4,r23
 800cb30:	88c03a36 	bltu	r17,r3,800cc1c <__umoddi3+0x550>
 800cb34:	88c03826 	beq	r17,r3,800cc18 <__umoddi3+0x54c>
 800cb38:	8109c83a 	sub	r4,r16,r4
 800cb3c:	8121803a 	cmpltu	r16,r16,r4
 800cb40:	88c7c83a 	sub	r3,r17,r3
 800cb44:	1c07c83a 	sub	r3,r3,r16
 800cb48:	1d04983a 	sll	r2,r3,r20
 800cb4c:	2548d83a 	srl	r4,r4,r21
 800cb50:	1d46d83a 	srl	r3,r3,r21
 800cb54:	1104b03a 	or	r2,r2,r4
 800cb58:	003f2806 	br	800c7fc <__umoddi3+0x130>
 800cb5c:	a4a8983a 	sll	r20,r20,r18
 800cb60:	8da6d83a 	srl	r19,r17,r22
 800cb64:	8ca2983a 	sll	r17,r17,r18
 800cb68:	a02ed43a 	srli	r23,r20,16
 800cb6c:	9809883a 	mov	r4,r19
 800cb70:	85acd83a 	srl	r22,r16,r22
 800cb74:	b80b883a 	mov	r5,r23
 800cb78:	800cde80 	call	800cde8 <__umodsi3>
 800cb7c:	9809883a 	mov	r4,r19
 800cb80:	b80b883a 	mov	r5,r23
 800cb84:	b46cb03a 	or	r22,r22,r17
 800cb88:	a57fffcc 	andi	r21,r20,65535
 800cb8c:	1023883a 	mov	r17,r2
 800cb90:	800cd840 	call	800cd84 <__udivsi3>
 800cb94:	a809883a 	mov	r4,r21
 800cb98:	100b883a 	mov	r5,r2
 800cb9c:	800ce440 	call	800ce44 <__mulsi3>
 800cba0:	8822943a 	slli	r17,r17,16
 800cba4:	b008d43a 	srli	r4,r22,16
 800cba8:	84a6983a 	sll	r19,r16,r18
 800cbac:	8908b03a 	or	r4,r17,r4
 800cbb0:	2080042e 	bgeu	r4,r2,800cbc4 <__umoddi3+0x4f8>
 800cbb4:	2509883a 	add	r4,r4,r20
 800cbb8:	25000236 	bltu	r4,r20,800cbc4 <__umoddi3+0x4f8>
 800cbbc:	2080012e 	bgeu	r4,r2,800cbc4 <__umoddi3+0x4f8>
 800cbc0:	2509883a 	add	r4,r4,r20
 800cbc4:	20a1c83a 	sub	r16,r4,r2
 800cbc8:	8009883a 	mov	r4,r16
 800cbcc:	b80b883a 	mov	r5,r23
 800cbd0:	800cde80 	call	800cde8 <__umodsi3>
 800cbd4:	8009883a 	mov	r4,r16
 800cbd8:	1021883a 	mov	r16,r2
 800cbdc:	b80b883a 	mov	r5,r23
 800cbe0:	8020943a 	slli	r16,r16,16
 800cbe4:	800cd840 	call	800cd84 <__udivsi3>
 800cbe8:	100b883a 	mov	r5,r2
 800cbec:	a809883a 	mov	r4,r21
 800cbf0:	b47fffcc 	andi	r17,r22,65535
 800cbf4:	800ce440 	call	800ce44 <__mulsi3>
 800cbf8:	8462b03a 	or	r17,r16,r17
 800cbfc:	8880042e 	bgeu	r17,r2,800cc10 <__umoddi3+0x544>
 800cc00:	8d23883a 	add	r17,r17,r20
 800cc04:	8d000236 	bltu	r17,r20,800cc10 <__umoddi3+0x544>
 800cc08:	8880012e 	bgeu	r17,r2,800cc10 <__umoddi3+0x544>
 800cc0c:	8d23883a 	add	r17,r17,r20
 800cc10:	88a3c83a 	sub	r17,r17,r2
 800cc14:	003f2f06 	br	800c8d4 <__umoddi3+0x208>
 800cc18:	813fc72e 	bgeu	r16,r4,800cb38 <__umoddi3+0x46c>
 800cc1c:	d8800117 	ldw	r2,4(sp)
 800cc20:	20a7c83a 	sub	r19,r4,r2
 800cc24:	24c9803a 	cmpltu	r4,r4,r19
 800cc28:	2489883a 	add	r4,r4,r18
 800cc2c:	1907c83a 	sub	r3,r3,r4
 800cc30:	9809883a 	mov	r4,r19
 800cc34:	003fc006 	br	800cb38 <__umoddi3+0x46c>
 800cc38:	3006d43a 	srli	r3,r6,16
 800cc3c:	04800404 	movi	r18,16
 800cc40:	003ebb06 	br	800c730 <__umoddi3+0x64>
 800cc44:	3007883a 	mov	r3,r6
 800cc48:	003eb906 	br	800c730 <__umoddi3+0x64>
 800cc4c:	3808d43a 	srli	r4,r7,16
 800cc50:	02000404 	movi	r8,16
 800cc54:	003efc06 	br	800c848 <__umoddi3+0x17c>
 800cc58:	a006d43a 	srli	r3,r20,16
 800cc5c:	04800404 	movi	r18,16
 800cc60:	003f1206 	br	800c8ac <__umoddi3+0x1e0>
 800cc64:	a007883a 	mov	r3,r20
 800cc68:	003f1006 	br	800c8ac <__umoddi3+0x1e0>
 800cc6c:	3809883a 	mov	r4,r7
 800cc70:	0011883a 	mov	r8,zero
 800cc74:	003ef406 	br	800c848 <__umoddi3+0x17c>
 800cc78:	180b883a 	mov	r5,r3
 800cc7c:	003f8706 	br	800ca9c <__umoddi3+0x3d0>
 800cc80:	2839883a 	mov	fp,r5
 800cc84:	003f6d06 	br	800ca3c <__umoddi3+0x370>
 800cc88:	2509883a 	add	r4,r4,r20
 800cc8c:	003f2206 	br	800c918 <__umoddi3+0x24c>

0800cc90 <__divsi3>:
 800cc90:	20001a16 	blt	r4,zero,800ccfc <__divsi3+0x6c>
 800cc94:	000f883a 	mov	r7,zero
 800cc98:	2800020e 	bge	r5,zero,800cca4 <__divsi3+0x14>
 800cc9c:	014bc83a 	sub	r5,zero,r5
 800cca0:	39c0005c 	xori	r7,r7,1
 800cca4:	200d883a 	mov	r6,r4
 800cca8:	00c00044 	movi	r3,1
 800ccac:	2900092e 	bgeu	r5,r4,800ccd4 <__divsi3+0x44>
 800ccb0:	00800804 	movi	r2,32
 800ccb4:	00c00044 	movi	r3,1
 800ccb8:	00000106 	br	800ccc0 <__divsi3+0x30>
 800ccbc:	10001226 	beq	r2,zero,800cd08 <__divsi3+0x78>
 800ccc0:	294b883a 	add	r5,r5,r5
 800ccc4:	10bfffc4 	addi	r2,r2,-1
 800ccc8:	18c7883a 	add	r3,r3,r3
 800cccc:	293ffb36 	bltu	r5,r4,800ccbc <__divsi3+0x2c>
 800ccd0:	18000d26 	beq	r3,zero,800cd08 <__divsi3+0x78>
 800ccd4:	0005883a 	mov	r2,zero
 800ccd8:	31400236 	bltu	r6,r5,800cce4 <__divsi3+0x54>
 800ccdc:	314dc83a 	sub	r6,r6,r5
 800cce0:	10c4b03a 	or	r2,r2,r3
 800cce4:	1806d07a 	srli	r3,r3,1
 800cce8:	280ad07a 	srli	r5,r5,1
 800ccec:	183ffa1e 	bne	r3,zero,800ccd8 <__divsi3+0x48>
 800ccf0:	38000126 	beq	r7,zero,800ccf8 <__divsi3+0x68>
 800ccf4:	0085c83a 	sub	r2,zero,r2
 800ccf8:	f800283a 	ret
 800ccfc:	0109c83a 	sub	r4,zero,r4
 800cd00:	01c00044 	movi	r7,1
 800cd04:	003fe406 	br	800cc98 <__divsi3+0x8>
 800cd08:	0005883a 	mov	r2,zero
 800cd0c:	003ff806 	br	800ccf0 <__divsi3+0x60>

0800cd10 <__modsi3>:
 800cd10:	20001916 	blt	r4,zero,800cd78 <__modsi3+0x68>
 800cd14:	000f883a 	mov	r7,zero
 800cd18:	2005883a 	mov	r2,r4
 800cd1c:	2800010e 	bge	r5,zero,800cd24 <__modsi3+0x14>
 800cd20:	014bc83a 	sub	r5,zero,r5
 800cd24:	00c00044 	movi	r3,1
 800cd28:	2900092e 	bgeu	r5,r4,800cd50 <__modsi3+0x40>
 800cd2c:	01800804 	movi	r6,32
 800cd30:	00c00044 	movi	r3,1
 800cd34:	00000106 	br	800cd3c <__modsi3+0x2c>
 800cd38:	30000d26 	beq	r6,zero,800cd70 <__modsi3+0x60>
 800cd3c:	294b883a 	add	r5,r5,r5
 800cd40:	31bfffc4 	addi	r6,r6,-1
 800cd44:	18c7883a 	add	r3,r3,r3
 800cd48:	293ffb36 	bltu	r5,r4,800cd38 <__modsi3+0x28>
 800cd4c:	18000826 	beq	r3,zero,800cd70 <__modsi3+0x60>
 800cd50:	1806d07a 	srli	r3,r3,1
 800cd54:	11400136 	bltu	r2,r5,800cd5c <__modsi3+0x4c>
 800cd58:	1145c83a 	sub	r2,r2,r5
 800cd5c:	280ad07a 	srli	r5,r5,1
 800cd60:	183ffb1e 	bne	r3,zero,800cd50 <__modsi3+0x40>
 800cd64:	38000126 	beq	r7,zero,800cd6c <__modsi3+0x5c>
 800cd68:	0085c83a 	sub	r2,zero,r2
 800cd6c:	f800283a 	ret
 800cd70:	2005883a 	mov	r2,r4
 800cd74:	003ffb06 	br	800cd64 <__modsi3+0x54>
 800cd78:	0109c83a 	sub	r4,zero,r4
 800cd7c:	01c00044 	movi	r7,1
 800cd80:	003fe506 	br	800cd18 <__modsi3+0x8>

0800cd84 <__udivsi3>:
 800cd84:	200d883a 	mov	r6,r4
 800cd88:	2900152e 	bgeu	r5,r4,800cde0 <__udivsi3+0x5c>
 800cd8c:	28001416 	blt	r5,zero,800cde0 <__udivsi3+0x5c>
 800cd90:	00800804 	movi	r2,32
 800cd94:	00c00044 	movi	r3,1
 800cd98:	00000206 	br	800cda4 <__udivsi3+0x20>
 800cd9c:	10000e26 	beq	r2,zero,800cdd8 <__udivsi3+0x54>
 800cda0:	28000516 	blt	r5,zero,800cdb8 <__udivsi3+0x34>
 800cda4:	294b883a 	add	r5,r5,r5
 800cda8:	10bfffc4 	addi	r2,r2,-1
 800cdac:	18c7883a 	add	r3,r3,r3
 800cdb0:	293ffa36 	bltu	r5,r4,800cd9c <__udivsi3+0x18>
 800cdb4:	18000826 	beq	r3,zero,800cdd8 <__udivsi3+0x54>
 800cdb8:	0005883a 	mov	r2,zero
 800cdbc:	31400236 	bltu	r6,r5,800cdc8 <__udivsi3+0x44>
 800cdc0:	314dc83a 	sub	r6,r6,r5
 800cdc4:	10c4b03a 	or	r2,r2,r3
 800cdc8:	1806d07a 	srli	r3,r3,1
 800cdcc:	280ad07a 	srli	r5,r5,1
 800cdd0:	183ffa1e 	bne	r3,zero,800cdbc <__udivsi3+0x38>
 800cdd4:	f800283a 	ret
 800cdd8:	0005883a 	mov	r2,zero
 800cddc:	f800283a 	ret
 800cde0:	00c00044 	movi	r3,1
 800cde4:	003ff406 	br	800cdb8 <__udivsi3+0x34>

0800cde8 <__umodsi3>:
 800cde8:	2005883a 	mov	r2,r4
 800cdec:	2900132e 	bgeu	r5,r4,800ce3c <__umodsi3+0x54>
 800cdf0:	28001216 	blt	r5,zero,800ce3c <__umodsi3+0x54>
 800cdf4:	01800804 	movi	r6,32
 800cdf8:	00c00044 	movi	r3,1
 800cdfc:	00000206 	br	800ce08 <__umodsi3+0x20>
 800ce00:	30000c26 	beq	r6,zero,800ce34 <__umodsi3+0x4c>
 800ce04:	28000516 	blt	r5,zero,800ce1c <__umodsi3+0x34>
 800ce08:	294b883a 	add	r5,r5,r5
 800ce0c:	31bfffc4 	addi	r6,r6,-1
 800ce10:	18c7883a 	add	r3,r3,r3
 800ce14:	293ffa36 	bltu	r5,r4,800ce00 <__umodsi3+0x18>
 800ce18:	18000626 	beq	r3,zero,800ce34 <__umodsi3+0x4c>
 800ce1c:	1806d07a 	srli	r3,r3,1
 800ce20:	11400136 	bltu	r2,r5,800ce28 <__umodsi3+0x40>
 800ce24:	1145c83a 	sub	r2,r2,r5
 800ce28:	280ad07a 	srli	r5,r5,1
 800ce2c:	183ffb1e 	bne	r3,zero,800ce1c <__umodsi3+0x34>
 800ce30:	f800283a 	ret
 800ce34:	2005883a 	mov	r2,r4
 800ce38:	f800283a 	ret
 800ce3c:	00c00044 	movi	r3,1
 800ce40:	003ff606 	br	800ce1c <__umodsi3+0x34>

0800ce44 <__mulsi3>:
 800ce44:	0005883a 	mov	r2,zero
 800ce48:	20000726 	beq	r4,zero,800ce68 <__mulsi3+0x24>
 800ce4c:	20c0004c 	andi	r3,r4,1
 800ce50:	2008d07a 	srli	r4,r4,1
 800ce54:	18000126 	beq	r3,zero,800ce5c <__mulsi3+0x18>
 800ce58:	1145883a 	add	r2,r2,r5
 800ce5c:	294b883a 	add	r5,r5,r5
 800ce60:	203ffa1e 	bne	r4,zero,800ce4c <__mulsi3+0x8>
 800ce64:	f800283a 	ret
 800ce68:	f800283a 	ret

0800ce6c <__adddf3>:
 800ce6c:	02000434 	movhi	r8,16
 800ce70:	423fffc4 	addi	r8,r8,-1
 800ce74:	2806d53a 	srli	r3,r5,20
 800ce78:	3804d53a 	srli	r2,r7,20
 800ce7c:	2a14703a 	and	r10,r5,r8
 800ce80:	3a12703a 	and	r9,r7,r8
 800ce84:	280ad7fa 	srli	r5,r5,31
 800ce88:	501490fa 	slli	r10,r10,3
 800ce8c:	2018d77a 	srli	r12,r4,29
 800ce90:	481290fa 	slli	r9,r9,3
 800ce94:	3016d77a 	srli	r11,r6,29
 800ce98:	380ed7fa 	srli	r7,r7,31
 800ce9c:	defffb04 	addi	sp,sp,-20
 800cea0:	dc800215 	stw	r18,8(sp)
 800cea4:	dc000015 	stw	r16,0(sp)
 800cea8:	1c81ffcc 	andi	r18,r3,2047
 800ceac:	1081ffcc 	andi	r2,r2,2047
 800ceb0:	dfc00415 	stw	ra,16(sp)
 800ceb4:	dcc00315 	stw	r19,12(sp)
 800ceb8:	dc400115 	stw	r17,4(sp)
 800cebc:	201c90fa 	slli	r14,r4,3
 800cec0:	301a90fa 	slli	r13,r6,3
 800cec4:	2821883a 	mov	r16,r5
 800cec8:	6294b03a 	or	r10,r12,r10
 800cecc:	5a52b03a 	or	r9,r11,r9
 800ced0:	9087c83a 	sub	r3,r18,r2
 800ced4:	29c06126 	beq	r5,r7,800d05c <__adddf3+0x1f0>
 800ced8:	00c0550e 	bge	zero,r3,800d030 <__adddf3+0x1c4>
 800cedc:	10007326 	beq	r2,zero,800d0ac <__adddf3+0x240>
 800cee0:	9081ffd8 	cmpnei	r2,r18,2047
 800cee4:	1000bd26 	beq	r2,zero,800d1dc <__adddf3+0x370>
 800cee8:	4a402034 	orhi	r9,r9,128
 800ceec:	18800e48 	cmpgei	r2,r3,57
 800cef0:	1000ef1e 	bne	r2,zero,800d2b0 <__adddf3+0x444>
 800cef4:	18800808 	cmpgei	r2,r3,32
 800cef8:	1001321e 	bne	r2,zero,800d3c4 <__adddf3+0x558>
 800cefc:	00800804 	movi	r2,32
 800cf00:	10c5c83a 	sub	r2,r2,r3
 800cf04:	68c8d83a 	srl	r4,r13,r3
 800cf08:	48a2983a 	sll	r17,r9,r2
 800cf0c:	689a983a 	sll	r13,r13,r2
 800cf10:	48c6d83a 	srl	r3,r9,r3
 800cf14:	8922b03a 	or	r17,r17,r4
 800cf18:	681ac03a 	cmpne	r13,r13,zero
 800cf1c:	8b62b03a 	or	r17,r17,r13
 800cf20:	50d5c83a 	sub	r10,r10,r3
 800cf24:	7463c83a 	sub	r17,r14,r17
 800cf28:	7451803a 	cmpltu	r8,r14,r17
 800cf2c:	5211c83a 	sub	r8,r10,r8
 800cf30:	4080202c 	andhi	r2,r8,128
 800cf34:	10008d26 	beq	r2,zero,800d16c <__adddf3+0x300>
 800cf38:	02402034 	movhi	r9,128
 800cf3c:	4a7fffc4 	addi	r9,r9,-1
 800cf40:	4266703a 	and	r19,r8,r9
 800cf44:	9800b326 	beq	r19,zero,800d214 <__adddf3+0x3a8>
 800cf48:	9809883a 	mov	r4,r19
 800cf4c:	800f5580 	call	800f558 <__clzsi2>
 800cf50:	10fffe04 	addi	r3,r2,-8
 800cf54:	02000804 	movi	r8,32
 800cf58:	40d1c83a 	sub	r8,r8,r3
 800cf5c:	8a10d83a 	srl	r8,r17,r8
 800cf60:	98d2983a 	sll	r9,r19,r3
 800cf64:	88e2983a 	sll	r17,r17,r3
 800cf68:	4250b03a 	or	r8,r8,r9
 800cf6c:	1c80b216 	blt	r3,r18,800d238 <__adddf3+0x3cc>
 800cf70:	1c87c83a 	sub	r3,r3,r18
 800cf74:	19000044 	addi	r4,r3,1
 800cf78:	20800808 	cmpgei	r2,r4,32
 800cf7c:	10006f1e 	bne	r2,zero,800d13c <__adddf3+0x2d0>
 800cf80:	00800804 	movi	r2,32
 800cf84:	1105c83a 	sub	r2,r2,r4
 800cf88:	8906d83a 	srl	r3,r17,r4
 800cf8c:	88a2983a 	sll	r17,r17,r2
 800cf90:	4084983a 	sll	r2,r8,r2
 800cf94:	4110d83a 	srl	r8,r8,r4
 800cf98:	8822c03a 	cmpne	r17,r17,zero
 800cf9c:	10c4b03a 	or	r2,r2,r3
 800cfa0:	1462b03a 	or	r17,r2,r17
 800cfa4:	0025883a 	mov	r18,zero
 800cfa8:	888001cc 	andi	r2,r17,7
 800cfac:	10000726 	beq	r2,zero,800cfcc <__adddf3+0x160>
 800cfb0:	888003cc 	andi	r2,r17,15
 800cfb4:	10800120 	cmpeqi	r2,r2,4
 800cfb8:	1000041e 	bne	r2,zero,800cfcc <__adddf3+0x160>
 800cfbc:	88c00104 	addi	r3,r17,4
 800cfc0:	1c63803a 	cmpltu	r17,r3,r17
 800cfc4:	4451883a 	add	r8,r8,r17
 800cfc8:	1823883a 	mov	r17,r3
 800cfcc:	4080202c 	andhi	r2,r8,128
 800cfd0:	10006826 	beq	r2,zero,800d174 <__adddf3+0x308>
 800cfd4:	90c00044 	addi	r3,r18,1
 800cfd8:	1881ffe0 	cmpeqi	r2,r3,2047
 800cfdc:	18c1ffcc 	andi	r3,r3,2047
 800cfe0:	10007a1e 	bne	r2,zero,800d1cc <__adddf3+0x360>
 800cfe4:	00bfe034 	movhi	r2,65408
 800cfe8:	10bfffc4 	addi	r2,r2,-1
 800cfec:	4090703a 	and	r8,r8,r2
 800cff0:	4004977a 	slli	r2,r8,29
 800cff4:	4010927a 	slli	r8,r8,9
 800cff8:	8822d0fa 	srli	r17,r17,3
 800cffc:	4010d33a 	srli	r8,r8,12
 800d000:	1444b03a 	or	r2,r2,r17
 800d004:	1806953a 	slli	r3,r3,20
 800d008:	802097fa 	slli	r16,r16,31
 800d00c:	1a06b03a 	or	r3,r3,r8
 800d010:	1c06b03a 	or	r3,r3,r16
 800d014:	dfc00417 	ldw	ra,16(sp)
 800d018:	dcc00317 	ldw	r19,12(sp)
 800d01c:	dc800217 	ldw	r18,8(sp)
 800d020:	dc400117 	ldw	r17,4(sp)
 800d024:	dc000017 	ldw	r16,0(sp)
 800d028:	dec00504 	addi	sp,sp,20
 800d02c:	f800283a 	ret
 800d030:	18002626 	beq	r3,zero,800d0cc <__adddf3+0x260>
 800d034:	1487c83a 	sub	r3,r2,r18
 800d038:	9000ba1e 	bne	r18,zero,800d324 <__adddf3+0x4b8>
 800d03c:	5388b03a 	or	r4,r10,r14
 800d040:	20011826 	beq	r4,zero,800d4a4 <__adddf3+0x638>
 800d044:	193fffc4 	addi	r4,r3,-1
 800d048:	20015726 	beq	r4,zero,800d5a8 <__adddf3+0x73c>
 800d04c:	18c1ffd8 	cmpnei	r3,r3,2047
 800d050:	18013026 	beq	r3,zero,800d514 <__adddf3+0x6a8>
 800d054:	2007883a 	mov	r3,r4
 800d058:	0000b506 	br	800d330 <__adddf3+0x4c4>
 800d05c:	00c07b0e 	bge	zero,r3,800d24c <__adddf3+0x3e0>
 800d060:	10002e26 	beq	r2,zero,800d11c <__adddf3+0x2b0>
 800d064:	9081ffd8 	cmpnei	r2,r18,2047
 800d068:	10005c26 	beq	r2,zero,800d1dc <__adddf3+0x370>
 800d06c:	4a402034 	orhi	r9,r9,128
 800d070:	18800e48 	cmpgei	r2,r3,57
 800d074:	10004b1e 	bne	r2,zero,800d1a4 <__adddf3+0x338>
 800d078:	18800808 	cmpgei	r2,r3,32
 800d07c:	1000ec26 	beq	r2,zero,800d430 <__adddf3+0x5c4>
 800d080:	1c7ff804 	addi	r17,r3,-32
 800d084:	19000820 	cmpeqi	r4,r3,32
 800d088:	4c44d83a 	srl	r2,r9,r17
 800d08c:	2000041e 	bne	r4,zero,800d0a0 <__adddf3+0x234>
 800d090:	01001004 	movi	r4,64
 800d094:	20c7c83a 	sub	r3,r4,r3
 800d098:	48d2983a 	sll	r9,r9,r3
 800d09c:	6a5ab03a 	or	r13,r13,r9
 800d0a0:	6822c03a 	cmpne	r17,r13,zero
 800d0a4:	88a2b03a 	or	r17,r17,r2
 800d0a8:	00004006 	br	800d1ac <__adddf3+0x340>
 800d0ac:	4b44b03a 	or	r2,r9,r13
 800d0b0:	10008226 	beq	r2,zero,800d2bc <__adddf3+0x450>
 800d0b4:	18bfffc4 	addi	r2,r3,-1
 800d0b8:	10011026 	beq	r2,zero,800d4fc <__adddf3+0x690>
 800d0bc:	18c1ffd8 	cmpnei	r3,r3,2047
 800d0c0:	18004626 	beq	r3,zero,800d1dc <__adddf3+0x370>
 800d0c4:	1007883a 	mov	r3,r2
 800d0c8:	003f8806 	br	800ceec <__adddf3+0x80>
 800d0cc:	90800044 	addi	r2,r18,1
 800d0d0:	1081ff8c 	andi	r2,r2,2046
 800d0d4:	1000a51e 	bne	r2,zero,800d36c <__adddf3+0x500>
 800d0d8:	538ab03a 	or	r5,r10,r14
 800d0dc:	4b44b03a 	or	r2,r9,r13
 800d0e0:	9000f81e 	bne	r18,zero,800d4c4 <__adddf3+0x658>
 800d0e4:	28013726 	beq	r5,zero,800d5c4 <__adddf3+0x758>
 800d0e8:	10011226 	beq	r2,zero,800d534 <__adddf3+0x6c8>
 800d0ec:	7363c83a 	sub	r17,r14,r13
 800d0f0:	7445803a 	cmpltu	r2,r14,r17
 800d0f4:	5251c83a 	sub	r8,r10,r9
 800d0f8:	4091c83a 	sub	r8,r8,r2
 800d0fc:	4080202c 	andhi	r2,r8,128
 800d100:	10018f26 	beq	r2,zero,800d740 <__adddf3+0x8d4>
 800d104:	6ba3c83a 	sub	r17,r13,r14
 800d108:	4a95c83a 	sub	r10,r9,r10
 800d10c:	6c51803a 	cmpltu	r8,r13,r17
 800d110:	5211c83a 	sub	r8,r10,r8
 800d114:	3821883a 	mov	r16,r7
 800d118:	003fa306 	br	800cfa8 <__adddf3+0x13c>
 800d11c:	4b44b03a 	or	r2,r9,r13
 800d120:	10006626 	beq	r2,zero,800d2bc <__adddf3+0x450>
 800d124:	18bfffc4 	addi	r2,r3,-1
 800d128:	1000ec26 	beq	r2,zero,800d4dc <__adddf3+0x670>
 800d12c:	18c1ffd8 	cmpnei	r3,r3,2047
 800d130:	18012d26 	beq	r3,zero,800d5e8 <__adddf3+0x77c>
 800d134:	1007883a 	mov	r3,r2
 800d138:	003fcd06 	br	800d070 <__adddf3+0x204>
 800d13c:	18fff844 	addi	r3,r3,-31
 800d140:	20800820 	cmpeqi	r2,r4,32
 800d144:	40c6d83a 	srl	r3,r8,r3
 800d148:	1000041e 	bne	r2,zero,800d15c <__adddf3+0x2f0>
 800d14c:	00801004 	movi	r2,64
 800d150:	1109c83a 	sub	r4,r2,r4
 800d154:	4110983a 	sll	r8,r8,r4
 800d158:	8a22b03a 	or	r17,r17,r8
 800d15c:	8822c03a 	cmpne	r17,r17,zero
 800d160:	88e2b03a 	or	r17,r17,r3
 800d164:	0011883a 	mov	r8,zero
 800d168:	0025883a 	mov	r18,zero
 800d16c:	888001cc 	andi	r2,r17,7
 800d170:	103f8f1e 	bne	r2,zero,800cfb0 <__adddf3+0x144>
 800d174:	8822d0fa 	srli	r17,r17,3
 800d178:	4004977a 	slli	r2,r8,29
 800d17c:	4014d0fa 	srli	r10,r8,3
 800d180:	9007883a 	mov	r3,r18
 800d184:	8884b03a 	or	r2,r17,r2
 800d188:	1901ffe0 	cmpeqi	r4,r3,2047
 800d18c:	2000191e 	bne	r4,zero,800d1f4 <__adddf3+0x388>
 800d190:	02000434 	movhi	r8,16
 800d194:	423fffc4 	addi	r8,r8,-1
 800d198:	5210703a 	and	r8,r10,r8
 800d19c:	18c1ffcc 	andi	r3,r3,2047
 800d1a0:	003f9806 	br	800d004 <__adddf3+0x198>
 800d1a4:	4b62b03a 	or	r17,r9,r13
 800d1a8:	8822c03a 	cmpne	r17,r17,zero
 800d1ac:	8ba3883a 	add	r17,r17,r14
 800d1b0:	8b91803a 	cmpltu	r8,r17,r14
 800d1b4:	4291883a 	add	r8,r8,r10
 800d1b8:	4080202c 	andhi	r2,r8,128
 800d1bc:	103feb26 	beq	r2,zero,800d16c <__adddf3+0x300>
 800d1c0:	94800044 	addi	r18,r18,1
 800d1c4:	9081ffe0 	cmpeqi	r2,r18,2047
 800d1c8:	10007426 	beq	r2,zero,800d39c <__adddf3+0x530>
 800d1cc:	00c1ffc4 	movi	r3,2047
 800d1d0:	0011883a 	mov	r8,zero
 800d1d4:	0005883a 	mov	r2,zero
 800d1d8:	003f8a06 	br	800d004 <__adddf3+0x198>
 800d1dc:	500a977a 	slli	r5,r10,29
 800d1e0:	00c80034 	movhi	r3,8192
 800d1e4:	18ffffc4 	addi	r3,r3,-1
 800d1e8:	5014d0fa 	srli	r10,r10,3
 800d1ec:	20c4703a 	and	r2,r4,r3
 800d1f0:	1144b03a 	or	r2,r2,r5
 800d1f4:	1286b03a 	or	r3,r2,r10
 800d1f8:	18015426 	beq	r3,zero,800d74c <__adddf3+0x8e0>
 800d1fc:	00c00434 	movhi	r3,16
 800d200:	18ffffc4 	addi	r3,r3,-1
 800d204:	52000234 	orhi	r8,r10,8
 800d208:	40d0703a 	and	r8,r8,r3
 800d20c:	00c1ffc4 	movi	r3,2047
 800d210:	003f7c06 	br	800d004 <__adddf3+0x198>
 800d214:	8809883a 	mov	r4,r17
 800d218:	800f5580 	call	800f558 <__clzsi2>
 800d21c:	10c00604 	addi	r3,r2,24
 800d220:	19000808 	cmpgei	r4,r3,32
 800d224:	203f4b26 	beq	r4,zero,800cf54 <__adddf3+0xe8>
 800d228:	123ffe04 	addi	r8,r2,-8
 800d22c:	8a10983a 	sll	r8,r17,r8
 800d230:	0023883a 	mov	r17,zero
 800d234:	1cbf4e0e 	bge	r3,r18,800cf70 <__adddf3+0x104>
 800d238:	00bfe034 	movhi	r2,65408
 800d23c:	10bfffc4 	addi	r2,r2,-1
 800d240:	90e5c83a 	sub	r18,r18,r3
 800d244:	4090703a 	and	r8,r8,r2
 800d248:	003f5706 	br	800cfa8 <__adddf3+0x13c>
 800d24c:	18002226 	beq	r3,zero,800d2d8 <__adddf3+0x46c>
 800d250:	1487c83a 	sub	r3,r2,r18
 800d254:	90006e26 	beq	r18,zero,800d410 <__adddf3+0x5a4>
 800d258:	1101ffd8 	cmpnei	r4,r2,2047
 800d25c:	2000e926 	beq	r4,zero,800d604 <__adddf3+0x798>
 800d260:	52802034 	orhi	r10,r10,128
 800d264:	19000e48 	cmpgei	r4,r3,57
 800d268:	2000b91e 	bne	r4,zero,800d550 <__adddf3+0x6e4>
 800d26c:	19000808 	cmpgei	r4,r3,32
 800d270:	2001101e 	bne	r4,zero,800d6b4 <__adddf3+0x848>
 800d274:	01000804 	movi	r4,32
 800d278:	20c9c83a 	sub	r4,r4,r3
 800d27c:	5122983a 	sll	r17,r10,r4
 800d280:	70cad83a 	srl	r5,r14,r3
 800d284:	7108983a 	sll	r4,r14,r4
 800d288:	50d4d83a 	srl	r10,r10,r3
 800d28c:	8962b03a 	or	r17,r17,r5
 800d290:	2008c03a 	cmpne	r4,r4,zero
 800d294:	8922b03a 	or	r17,r17,r4
 800d298:	4a93883a 	add	r9,r9,r10
 800d29c:	8b63883a 	add	r17,r17,r13
 800d2a0:	8b51803a 	cmpltu	r8,r17,r13
 800d2a4:	4251883a 	add	r8,r8,r9
 800d2a8:	1025883a 	mov	r18,r2
 800d2ac:	003fc206 	br	800d1b8 <__adddf3+0x34c>
 800d2b0:	4b62b03a 	or	r17,r9,r13
 800d2b4:	8822c03a 	cmpne	r17,r17,zero
 800d2b8:	003f1a06 	br	800cf24 <__adddf3+0xb8>
 800d2bc:	500c977a 	slli	r6,r10,29
 800d2c0:	01480034 	movhi	r5,8192
 800d2c4:	297fffc4 	addi	r5,r5,-1
 800d2c8:	2144703a 	and	r2,r4,r5
 800d2cc:	5014d0fa 	srli	r10,r10,3
 800d2d0:	1184b03a 	or	r2,r2,r6
 800d2d4:	003fac06 	br	800d188 <__adddf3+0x31c>
 800d2d8:	90800044 	addi	r2,r18,1
 800d2dc:	1141ff8c 	andi	r5,r2,2046
 800d2e0:	28005e1e 	bne	r5,zero,800d45c <__adddf3+0x5f0>
 800d2e4:	5384b03a 	or	r2,r10,r14
 800d2e8:	9000a71e 	bne	r18,zero,800d588 <__adddf3+0x71c>
 800d2ec:	1000e526 	beq	r2,zero,800d684 <__adddf3+0x818>
 800d2f0:	4b44b03a 	or	r2,r9,r13
 800d2f4:	10008f26 	beq	r2,zero,800d534 <__adddf3+0x6c8>
 800d2f8:	7363883a 	add	r17,r14,r13
 800d2fc:	5255883a 	add	r10,r10,r9
 800d300:	8b91803a 	cmpltu	r8,r17,r14
 800d304:	5211883a 	add	r8,r10,r8
 800d308:	4080202c 	andhi	r2,r8,128
 800d30c:	103f9726 	beq	r2,zero,800d16c <__adddf3+0x300>
 800d310:	00bfe034 	movhi	r2,65408
 800d314:	10bfffc4 	addi	r2,r2,-1
 800d318:	4090703a 	and	r8,r8,r2
 800d31c:	04800044 	movi	r18,1
 800d320:	003f9206 	br	800d16c <__adddf3+0x300>
 800d324:	1101ffd8 	cmpnei	r4,r2,2047
 800d328:	20007a26 	beq	r4,zero,800d514 <__adddf3+0x6a8>
 800d32c:	52802034 	orhi	r10,r10,128
 800d330:	19000e48 	cmpgei	r4,r3,57
 800d334:	20002e1e 	bne	r4,zero,800d3f0 <__adddf3+0x584>
 800d338:	19000808 	cmpgei	r4,r3,32
 800d33c:	2000871e 	bne	r4,zero,800d55c <__adddf3+0x6f0>
 800d340:	01000804 	movi	r4,32
 800d344:	20c9c83a 	sub	r4,r4,r3
 800d348:	5122983a 	sll	r17,r10,r4
 800d34c:	70cad83a 	srl	r5,r14,r3
 800d350:	711c983a 	sll	r14,r14,r4
 800d354:	50d4d83a 	srl	r10,r10,r3
 800d358:	8962b03a 	or	r17,r17,r5
 800d35c:	701cc03a 	cmpne	r14,r14,zero
 800d360:	8ba2b03a 	or	r17,r17,r14
 800d364:	4a93c83a 	sub	r9,r9,r10
 800d368:	00002306 	br	800d3f8 <__adddf3+0x58c>
 800d36c:	7363c83a 	sub	r17,r14,r13
 800d370:	5267c83a 	sub	r19,r10,r9
 800d374:	7451803a 	cmpltu	r8,r14,r17
 800d378:	9a27c83a 	sub	r19,r19,r8
 800d37c:	9880202c 	andhi	r2,r19,128
 800d380:	1000421e 	bne	r2,zero,800d48c <__adddf3+0x620>
 800d384:	8cc4b03a 	or	r2,r17,r19
 800d388:	103eee1e 	bne	r2,zero,800cf44 <__adddf3+0xd8>
 800d38c:	0015883a 	mov	r10,zero
 800d390:	0021883a 	mov	r16,zero
 800d394:	003f7e06 	br	800d190 <__adddf3+0x324>
 800d398:	04800084 	movi	r18,2
 800d39c:	00bfe034 	movhi	r2,65408
 800d3a0:	10bfffc4 	addi	r2,r2,-1
 800d3a4:	8806d07a 	srli	r3,r17,1
 800d3a8:	4090703a 	and	r8,r8,r2
 800d3ac:	400497fa 	slli	r2,r8,31
 800d3b0:	8c40004c 	andi	r17,r17,1
 800d3b4:	1c62b03a 	or	r17,r3,r17
 800d3b8:	4010d07a 	srli	r8,r8,1
 800d3bc:	1462b03a 	or	r17,r2,r17
 800d3c0:	003ef906 	br	800cfa8 <__adddf3+0x13c>
 800d3c4:	1c7ff804 	addi	r17,r3,-32
 800d3c8:	19000820 	cmpeqi	r4,r3,32
 800d3cc:	4c44d83a 	srl	r2,r9,r17
 800d3d0:	2000041e 	bne	r4,zero,800d3e4 <__adddf3+0x578>
 800d3d4:	01001004 	movi	r4,64
 800d3d8:	20c7c83a 	sub	r3,r4,r3
 800d3dc:	48d2983a 	sll	r9,r9,r3
 800d3e0:	6a5ab03a 	or	r13,r13,r9
 800d3e4:	6822c03a 	cmpne	r17,r13,zero
 800d3e8:	88a2b03a 	or	r17,r17,r2
 800d3ec:	003ecd06 	br	800cf24 <__adddf3+0xb8>
 800d3f0:	5394b03a 	or	r10,r10,r14
 800d3f4:	5022c03a 	cmpne	r17,r10,zero
 800d3f8:	6c63c83a 	sub	r17,r13,r17
 800d3fc:	6c51803a 	cmpltu	r8,r13,r17
 800d400:	4a11c83a 	sub	r8,r9,r8
 800d404:	3821883a 	mov	r16,r7
 800d408:	1025883a 	mov	r18,r2
 800d40c:	003ec806 	br	800cf30 <__adddf3+0xc4>
 800d410:	5388b03a 	or	r4,r10,r14
 800d414:	20008226 	beq	r4,zero,800d620 <__adddf3+0x7b4>
 800d418:	193fffc4 	addi	r4,r3,-1
 800d41c:	2000b026 	beq	r4,zero,800d6e0 <__adddf3+0x874>
 800d420:	18c1ffd8 	cmpnei	r3,r3,2047
 800d424:	18007726 	beq	r3,zero,800d604 <__adddf3+0x798>
 800d428:	2007883a 	mov	r3,r4
 800d42c:	003f8d06 	br	800d264 <__adddf3+0x3f8>
 800d430:	00800804 	movi	r2,32
 800d434:	10c5c83a 	sub	r2,r2,r3
 800d438:	68c8d83a 	srl	r4,r13,r3
 800d43c:	48a2983a 	sll	r17,r9,r2
 800d440:	689a983a 	sll	r13,r13,r2
 800d444:	48c6d83a 	srl	r3,r9,r3
 800d448:	8922b03a 	or	r17,r17,r4
 800d44c:	681ac03a 	cmpne	r13,r13,zero
 800d450:	8b62b03a 	or	r17,r17,r13
 800d454:	50d5883a 	add	r10,r10,r3
 800d458:	003f5406 	br	800d1ac <__adddf3+0x340>
 800d45c:	10c1ffe0 	cmpeqi	r3,r2,2047
 800d460:	183f5a1e 	bne	r3,zero,800d1cc <__adddf3+0x360>
 800d464:	7351883a 	add	r8,r14,r13
 800d468:	4387803a 	cmpltu	r3,r8,r14
 800d46c:	5255883a 	add	r10,r10,r9
 800d470:	50c7883a 	add	r3,r10,r3
 800d474:	401ad07a 	srli	r13,r8,1
 800d478:	182297fa 	slli	r17,r3,31
 800d47c:	1810d07a 	srli	r8,r3,1
 800d480:	1025883a 	mov	r18,r2
 800d484:	8b62b03a 	or	r17,r17,r13
 800d488:	003f3806 	br	800d16c <__adddf3+0x300>
 800d48c:	6ba3c83a 	sub	r17,r13,r14
 800d490:	4a93c83a 	sub	r9,r9,r10
 800d494:	6c51803a 	cmpltu	r8,r13,r17
 800d498:	4a27c83a 	sub	r19,r9,r8
 800d49c:	3821883a 	mov	r16,r7
 800d4a0:	003ea806 	br	800cf44 <__adddf3+0xd8>
 800d4a4:	480a977a 	slli	r5,r9,29
 800d4a8:	01080034 	movhi	r4,8192
 800d4ac:	213fffc4 	addi	r4,r4,-1
 800d4b0:	3104703a 	and	r2,r6,r4
 800d4b4:	4814d0fa 	srli	r10,r9,3
 800d4b8:	1144b03a 	or	r2,r2,r5
 800d4bc:	3821883a 	mov	r16,r7
 800d4c0:	003f3106 	br	800d188 <__adddf3+0x31c>
 800d4c4:	28005d1e 	bne	r5,zero,800d63c <__adddf3+0x7d0>
 800d4c8:	1000121e 	bne	r2,zero,800d514 <__adddf3+0x6a8>
 800d4cc:	0021883a 	mov	r16,zero
 800d4d0:	4015883a 	mov	r10,r8
 800d4d4:	00bfffc4 	movi	r2,-1
 800d4d8:	003f4806 	br	800d1fc <__adddf3+0x390>
 800d4dc:	7363883a 	add	r17,r14,r13
 800d4e0:	5255883a 	add	r10,r10,r9
 800d4e4:	8b91803a 	cmpltu	r8,r17,r14
 800d4e8:	5211883a 	add	r8,r10,r8
 800d4ec:	4080202c 	andhi	r2,r8,128
 800d4f0:	103fa91e 	bne	r2,zero,800d398 <__adddf3+0x52c>
 800d4f4:	04800044 	movi	r18,1
 800d4f8:	003f1c06 	br	800d16c <__adddf3+0x300>
 800d4fc:	7363c83a 	sub	r17,r14,r13
 800d500:	5255c83a 	sub	r10,r10,r9
 800d504:	7451803a 	cmpltu	r8,r14,r17
 800d508:	5211c83a 	sub	r8,r10,r8
 800d50c:	04800044 	movi	r18,1
 800d510:	003e8706 	br	800cf30 <__adddf3+0xc4>
 800d514:	4806977a 	slli	r3,r9,29
 800d518:	00880034 	movhi	r2,8192
 800d51c:	10bfffc4 	addi	r2,r2,-1
 800d520:	3084703a 	and	r2,r6,r2
 800d524:	4814d0fa 	srli	r10,r9,3
 800d528:	10c4b03a 	or	r2,r2,r3
 800d52c:	3821883a 	mov	r16,r7
 800d530:	003f3006 	br	800d1f4 <__adddf3+0x388>
 800d534:	500a977a 	slli	r5,r10,29
 800d538:	00880034 	movhi	r2,8192
 800d53c:	10bfffc4 	addi	r2,r2,-1
 800d540:	2084703a 	and	r2,r4,r2
 800d544:	5014d0fa 	srli	r10,r10,3
 800d548:	1144b03a 	or	r2,r2,r5
 800d54c:	003f1006 	br	800d190 <__adddf3+0x324>
 800d550:	5394b03a 	or	r10,r10,r14
 800d554:	5022c03a 	cmpne	r17,r10,zero
 800d558:	003f5006 	br	800d29c <__adddf3+0x430>
 800d55c:	1c7ff804 	addi	r17,r3,-32
 800d560:	19400820 	cmpeqi	r5,r3,32
 800d564:	5448d83a 	srl	r4,r10,r17
 800d568:	2800041e 	bne	r5,zero,800d57c <__adddf3+0x710>
 800d56c:	01401004 	movi	r5,64
 800d570:	28c7c83a 	sub	r3,r5,r3
 800d574:	50d4983a 	sll	r10,r10,r3
 800d578:	729cb03a 	or	r14,r14,r10
 800d57c:	7022c03a 	cmpne	r17,r14,zero
 800d580:	8922b03a 	or	r17,r17,r4
 800d584:	003f9c06 	br	800d3f8 <__adddf3+0x58c>
 800d588:	10005a1e 	bne	r2,zero,800d6f4 <__adddf3+0x888>
 800d58c:	4804977a 	slli	r2,r9,29
 800d590:	00c80034 	movhi	r3,8192
 800d594:	18ffffc4 	addi	r3,r3,-1
 800d598:	30cc703a 	and	r6,r6,r3
 800d59c:	4814d0fa 	srli	r10,r9,3
 800d5a0:	1184b03a 	or	r2,r2,r6
 800d5a4:	003f1306 	br	800d1f4 <__adddf3+0x388>
 800d5a8:	6ba3c83a 	sub	r17,r13,r14
 800d5ac:	4a95c83a 	sub	r10,r9,r10
 800d5b0:	6c51803a 	cmpltu	r8,r13,r17
 800d5b4:	5211c83a 	sub	r8,r10,r8
 800d5b8:	3821883a 	mov	r16,r7
 800d5bc:	04800044 	movi	r18,1
 800d5c0:	003e5b06 	br	800cf30 <__adddf3+0xc4>
 800d5c4:	103f7126 	beq	r2,zero,800d38c <__adddf3+0x520>
 800d5c8:	4808977a 	slli	r4,r9,29
 800d5cc:	00880034 	movhi	r2,8192
 800d5d0:	10bfffc4 	addi	r2,r2,-1
 800d5d4:	3084703a 	and	r2,r6,r2
 800d5d8:	4814d0fa 	srli	r10,r9,3
 800d5dc:	1104b03a 	or	r2,r2,r4
 800d5e0:	3821883a 	mov	r16,r7
 800d5e4:	003eea06 	br	800d190 <__adddf3+0x324>
 800d5e8:	5006977a 	slli	r3,r10,29
 800d5ec:	00880034 	movhi	r2,8192
 800d5f0:	10bfffc4 	addi	r2,r2,-1
 800d5f4:	2084703a 	and	r2,r4,r2
 800d5f8:	5014d0fa 	srli	r10,r10,3
 800d5fc:	10c4b03a 	or	r2,r2,r3
 800d600:	003efc06 	br	800d1f4 <__adddf3+0x388>
 800d604:	4806977a 	slli	r3,r9,29
 800d608:	00880034 	movhi	r2,8192
 800d60c:	10bfffc4 	addi	r2,r2,-1
 800d610:	3084703a 	and	r2,r6,r2
 800d614:	4814d0fa 	srli	r10,r9,3
 800d618:	10c4b03a 	or	r2,r2,r3
 800d61c:	003ef506 	br	800d1f4 <__adddf3+0x388>
 800d620:	4808977a 	slli	r4,r9,29
 800d624:	00880034 	movhi	r2,8192
 800d628:	10bfffc4 	addi	r2,r2,-1
 800d62c:	3084703a 	and	r2,r6,r2
 800d630:	4814d0fa 	srli	r10,r9,3
 800d634:	1104b03a 	or	r2,r2,r4
 800d638:	003ed306 	br	800d188 <__adddf3+0x31c>
 800d63c:	500a977a 	slli	r5,r10,29
 800d640:	5014d0fa 	srli	r10,r10,3
 800d644:	10001626 	beq	r2,zero,800d6a0 <__adddf3+0x834>
 800d648:	00c80034 	movhi	r3,8192
 800d64c:	18ffffc4 	addi	r3,r3,-1
 800d650:	20c4703a 	and	r2,r4,r3
 800d654:	5100022c 	andhi	r4,r10,8
 800d658:	1144b03a 	or	r2,r2,r5
 800d65c:	203ee526 	beq	r4,zero,800d1f4 <__adddf3+0x388>
 800d660:	4808d0fa 	srli	r4,r9,3
 800d664:	2140022c 	andhi	r5,r4,8
 800d668:	283ee21e 	bne	r5,zero,800d1f4 <__adddf3+0x388>
 800d66c:	4812977a 	slli	r9,r9,29
 800d670:	30c4703a 	and	r2,r6,r3
 800d674:	3821883a 	mov	r16,r7
 800d678:	1244b03a 	or	r2,r2,r9
 800d67c:	2015883a 	mov	r10,r4
 800d680:	003edc06 	br	800d1f4 <__adddf3+0x388>
 800d684:	4804977a 	slli	r2,r9,29
 800d688:	01080034 	movhi	r4,8192
 800d68c:	213fffc4 	addi	r4,r4,-1
 800d690:	310c703a 	and	r6,r6,r4
 800d694:	4814d0fa 	srli	r10,r9,3
 800d698:	1184b03a 	or	r2,r2,r6
 800d69c:	003ebc06 	br	800d190 <__adddf3+0x324>
 800d6a0:	00880034 	movhi	r2,8192
 800d6a4:	10bfffc4 	addi	r2,r2,-1
 800d6a8:	2084703a 	and	r2,r4,r2
 800d6ac:	1144b03a 	or	r2,r2,r5
 800d6b0:	003ed006 	br	800d1f4 <__adddf3+0x388>
 800d6b4:	193ff804 	addi	r4,r3,-32
 800d6b8:	19400820 	cmpeqi	r5,r3,32
 800d6bc:	5108d83a 	srl	r4,r10,r4
 800d6c0:	2800041e 	bne	r5,zero,800d6d4 <__adddf3+0x868>
 800d6c4:	01401004 	movi	r5,64
 800d6c8:	28c7c83a 	sub	r3,r5,r3
 800d6cc:	50d4983a 	sll	r10,r10,r3
 800d6d0:	729cb03a 	or	r14,r14,r10
 800d6d4:	7022c03a 	cmpne	r17,r14,zero
 800d6d8:	8922b03a 	or	r17,r17,r4
 800d6dc:	003eef06 	br	800d29c <__adddf3+0x430>
 800d6e0:	7363883a 	add	r17,r14,r13
 800d6e4:	5255883a 	add	r10,r10,r9
 800d6e8:	8b51803a 	cmpltu	r8,r17,r13
 800d6ec:	5211883a 	add	r8,r10,r8
 800d6f0:	003f7e06 	br	800d4ec <__adddf3+0x680>
 800d6f4:	4b50b03a 	or	r8,r9,r13
 800d6f8:	500a977a 	slli	r5,r10,29
 800d6fc:	5014d0fa 	srli	r10,r10,3
 800d700:	403fe726 	beq	r8,zero,800d6a0 <__adddf3+0x834>
 800d704:	00c80034 	movhi	r3,8192
 800d708:	18ffffc4 	addi	r3,r3,-1
 800d70c:	20c4703a 	and	r2,r4,r3
 800d710:	5100022c 	andhi	r4,r10,8
 800d714:	1144b03a 	or	r2,r2,r5
 800d718:	203eb626 	beq	r4,zero,800d1f4 <__adddf3+0x388>
 800d71c:	4808d0fa 	srli	r4,r9,3
 800d720:	2140022c 	andhi	r5,r4,8
 800d724:	283eb31e 	bne	r5,zero,800d1f4 <__adddf3+0x388>
 800d728:	4804977a 	slli	r2,r9,29
 800d72c:	30cc703a 	and	r6,r6,r3
 800d730:	3821883a 	mov	r16,r7
 800d734:	3084b03a 	or	r2,r6,r2
 800d738:	2015883a 	mov	r10,r4
 800d73c:	003ead06 	br	800d1f4 <__adddf3+0x388>
 800d740:	8a04b03a 	or	r2,r17,r8
 800d744:	103f1126 	beq	r2,zero,800d38c <__adddf3+0x520>
 800d748:	003e8806 	br	800d16c <__adddf3+0x300>
 800d74c:	0005883a 	mov	r2,zero
 800d750:	00c1ffc4 	movi	r3,2047
 800d754:	0011883a 	mov	r8,zero
 800d758:	003e2a06 	br	800d004 <__adddf3+0x198>

0800d75c <__divdf3>:
 800d75c:	2810d53a 	srli	r8,r5,20
 800d760:	defff004 	addi	sp,sp,-64
 800d764:	dc000615 	stw	r16,24(sp)
 800d768:	04000434 	movhi	r16,16
 800d76c:	df000e15 	stw	fp,56(sp)
 800d770:	ddc00d15 	stw	r23,52(sp)
 800d774:	dd800c15 	stw	r22,48(sp)
 800d778:	dd000a15 	stw	r20,40(sp)
 800d77c:	843fffc4 	addi	r16,r16,-1
 800d780:	dfc00f15 	stw	ra,60(sp)
 800d784:	dd400b15 	stw	r21,44(sp)
 800d788:	dcc00915 	stw	r19,36(sp)
 800d78c:	dc800815 	stw	r18,32(sp)
 800d790:	dc400715 	stw	r17,28(sp)
 800d794:	4201ffcc 	andi	r8,r8,2047
 800d798:	282ed7fa 	srli	r23,r5,31
 800d79c:	3039883a 	mov	fp,r6
 800d7a0:	382d883a 	mov	r22,r7
 800d7a4:	2029883a 	mov	r20,r4
 800d7a8:	2c20703a 	and	r16,r5,r16
 800d7ac:	40006826 	beq	r8,zero,800d950 <__divdf3+0x1f4>
 800d7b0:	4081ffe0 	cmpeqi	r2,r8,2047
 800d7b4:	1000791e 	bne	r2,zero,800d99c <__divdf3+0x240>
 800d7b8:	2026d77a 	srli	r19,r4,29
 800d7bc:	800a90fa 	slli	r5,r16,3
 800d7c0:	202890fa 	slli	r20,r4,3
 800d7c4:	44bf0044 	addi	r18,r8,-1023
 800d7c8:	994ab03a 	or	r5,r19,r5
 800d7cc:	2cc02034 	orhi	r19,r5,128
 800d7d0:	0021883a 	mov	r16,zero
 800d7d4:	0023883a 	mov	r17,zero
 800d7d8:	b010d53a 	srli	r8,r22,20
 800d7dc:	00c00434 	movhi	r3,16
 800d7e0:	18ffffc4 	addi	r3,r3,-1
 800d7e4:	4201ffcc 	andi	r8,r8,2047
 800d7e8:	b02ad7fa 	srli	r21,r22,31
 800d7ec:	b0ec703a 	and	r22,r22,r3
 800d7f0:	40004626 	beq	r8,zero,800d90c <__divdf3+0x1b0>
 800d7f4:	4081ffe0 	cmpeqi	r2,r8,2047
 800d7f8:	10006f1e 	bne	r2,zero,800d9b8 <__divdf3+0x25c>
 800d7fc:	b00690fa 	slli	r3,r22,3
 800d800:	e004d77a 	srli	r2,fp,29
 800d804:	e01290fa 	slli	r9,fp,3
 800d808:	423f0044 	addi	r8,r8,-1023
 800d80c:	10c6b03a 	or	r3,r2,r3
 800d810:	1d802034 	orhi	r22,r3,128
 800d814:	9225c83a 	sub	r18,r18,r8
 800d818:	0007883a 	mov	r3,zero
 800d81c:	80800428 	cmpgeui	r2,r16,16
 800d820:	bd4ef03a 	xor	r7,r23,r21
 800d824:	1000a71e 	bne	r2,zero,800dac4 <__divdf3+0x368>
 800d828:	800c90ba 	slli	r6,r16,2
 800d82c:	00820074 	movhi	r2,2049
 800d830:	3085883a 	add	r2,r6,r2
 800d834:	10b60f17 	ldw	r2,-10180(r2)
 800d838:	1000683a 	jmp	r2
 800d83c:	0800dac4 	addi	zero,at,875
 800d840:	0800d8e8 	cmpgeui	zero,at,867
 800d844:	0800d898 	cmpnei	zero,at,866
 800d848:	0800d8f8 	rdprs	zero,at,867
 800d84c:	0800d898 	cmpnei	zero,at,866
 800d850:	0800da68 	cmpgeui	zero,at,873
 800d854:	0800d898 	cmpnei	zero,at,866
 800d858:	0800d8f8 	rdprs	zero,at,867
 800d85c:	0800d8e8 	cmpgeui	zero,at,867
 800d860:	0800d8e8 	cmpgeui	zero,at,867
 800d864:	0800da68 	cmpgeui	zero,at,873
 800d868:	0800d8f8 	rdprs	zero,at,867
 800d86c:	0800d87c 	xorhi	zero,at,865
 800d870:	0800d87c 	xorhi	zero,at,865
 800d874:	0800d87c 	xorhi	zero,at,865
 800d878:	0800da80 	call	800da8 <__alt_mem_SDRAM-0x77ff258>
 800d87c:	b80f883a 	mov	r7,r23
 800d880:	888000a0 	cmpeqi	r2,r17,2
 800d884:	1000181e 	bne	r2,zero,800d8e8 <__divdf3+0x18c>
 800d888:	888000e0 	cmpeqi	r2,r17,3
 800d88c:	1001f61e 	bne	r2,zero,800e068 <__divdf3+0x90c>
 800d890:	88800060 	cmpeqi	r2,r17,1
 800d894:	10006126 	beq	r2,zero,800da1c <__divdf3+0x2c0>
 800d898:	0007883a 	mov	r3,zero
 800d89c:	000b883a 	mov	r5,zero
 800d8a0:	0029883a 	mov	r20,zero
 800d8a4:	1806953a 	slli	r3,r3,20
 800d8a8:	380e97fa 	slli	r7,r7,31
 800d8ac:	a005883a 	mov	r2,r20
 800d8b0:	1946b03a 	or	r3,r3,r5
 800d8b4:	19c6b03a 	or	r3,r3,r7
 800d8b8:	dfc00f17 	ldw	ra,60(sp)
 800d8bc:	df000e17 	ldw	fp,56(sp)
 800d8c0:	ddc00d17 	ldw	r23,52(sp)
 800d8c4:	dd800c17 	ldw	r22,48(sp)
 800d8c8:	dd400b17 	ldw	r21,44(sp)
 800d8cc:	dd000a17 	ldw	r20,40(sp)
 800d8d0:	dcc00917 	ldw	r19,36(sp)
 800d8d4:	dc800817 	ldw	r18,32(sp)
 800d8d8:	dc400717 	ldw	r17,28(sp)
 800d8dc:	dc000617 	ldw	r16,24(sp)
 800d8e0:	dec01004 	addi	sp,sp,64
 800d8e4:	f800283a 	ret
 800d8e8:	00c1ffc4 	movi	r3,2047
 800d8ec:	000b883a 	mov	r5,zero
 800d8f0:	0029883a 	mov	r20,zero
 800d8f4:	003feb06 	br	800d8a4 <__divdf3+0x148>
 800d8f8:	a80f883a 	mov	r7,r21
 800d8fc:	b027883a 	mov	r19,r22
 800d900:	4829883a 	mov	r20,r9
 800d904:	1823883a 	mov	r17,r3
 800d908:	003fdd06 	br	800d880 <__divdf3+0x124>
 800d90c:	b712b03a 	or	r9,r22,fp
 800d910:	48003e26 	beq	r9,zero,800da0c <__divdf3+0x2b0>
 800d914:	b0017726 	beq	r22,zero,800def4 <__divdf3+0x798>
 800d918:	b009883a 	mov	r4,r22
 800d91c:	800f5580 	call	800f558 <__clzsi2>
 800d920:	117ffd44 	addi	r5,r2,-11
 800d924:	01000744 	movi	r4,29
 800d928:	127ffe04 	addi	r9,r2,-8
 800d92c:	2149c83a 	sub	r4,r4,r5
 800d930:	b246983a 	sll	r3,r22,r9
 800d934:	e108d83a 	srl	r4,fp,r4
 800d938:	e252983a 	sll	r9,fp,r9
 800d93c:	20ecb03a 	or	r22,r4,r3
 800d940:	1491883a 	add	r8,r2,r18
 800d944:	4480fcc4 	addi	r18,r8,1011
 800d948:	0007883a 	mov	r3,zero
 800d94c:	003fb306 	br	800d81c <__divdf3+0xc0>
 800d950:	8126b03a 	or	r19,r16,r4
 800d954:	2023883a 	mov	r17,r4
 800d958:	98002726 	beq	r19,zero,800d9f8 <__divdf3+0x29c>
 800d95c:	80017026 	beq	r16,zero,800df20 <__divdf3+0x7c4>
 800d960:	8009883a 	mov	r4,r16
 800d964:	800f5580 	call	800f558 <__clzsi2>
 800d968:	113ffd44 	addi	r4,r2,-11
 800d96c:	00c00744 	movi	r3,29
 800d970:	14fffe04 	addi	r19,r2,-8
 800d974:	1907c83a 	sub	r3,r3,r4
 800d978:	84ca983a 	sll	r5,r16,r19
 800d97c:	88c6d83a 	srl	r3,r17,r3
 800d980:	8ce8983a 	sll	r20,r17,r19
 800d984:	1966b03a 	or	r19,r3,r5
 800d988:	023f0344 	movi	r8,-1011
 800d98c:	40a5c83a 	sub	r18,r8,r2
 800d990:	0021883a 	mov	r16,zero
 800d994:	0023883a 	mov	r17,zero
 800d998:	003f8f06 	br	800d7d8 <__divdf3+0x7c>
 800d99c:	8126b03a 	or	r19,r16,r4
 800d9a0:	9800101e 	bne	r19,zero,800d9e4 <__divdf3+0x288>
 800d9a4:	0029883a 	mov	r20,zero
 800d9a8:	04000204 	movi	r16,8
 800d9ac:	0481ffc4 	movi	r18,2047
 800d9b0:	04400084 	movi	r17,2
 800d9b4:	003f8806 	br	800d7d8 <__divdf3+0x7c>
 800d9b8:	b712b03a 	or	r9,r22,fp
 800d9bc:	94be0044 	addi	r18,r18,-2047
 800d9c0:	4800041e 	bne	r9,zero,800d9d4 <__divdf3+0x278>
 800d9c4:	84000094 	ori	r16,r16,2
 800d9c8:	002d883a 	mov	r22,zero
 800d9cc:	00c00084 	movi	r3,2
 800d9d0:	003f9206 	br	800d81c <__divdf3+0xc0>
 800d9d4:	840000d4 	ori	r16,r16,3
 800d9d8:	e013883a 	mov	r9,fp
 800d9dc:	00c000c4 	movi	r3,3
 800d9e0:	003f8e06 	br	800d81c <__divdf3+0xc0>
 800d9e4:	8027883a 	mov	r19,r16
 800d9e8:	0481ffc4 	movi	r18,2047
 800d9ec:	04000304 	movi	r16,12
 800d9f0:	044000c4 	movi	r17,3
 800d9f4:	003f7806 	br	800d7d8 <__divdf3+0x7c>
 800d9f8:	0029883a 	mov	r20,zero
 800d9fc:	04000104 	movi	r16,4
 800da00:	0025883a 	mov	r18,zero
 800da04:	04400044 	movi	r17,1
 800da08:	003f7306 	br	800d7d8 <__divdf3+0x7c>
 800da0c:	84000054 	ori	r16,r16,1
 800da10:	002d883a 	mov	r22,zero
 800da14:	00c00044 	movi	r3,1
 800da18:	003f8006 	br	800d81c <__divdf3+0xc0>
 800da1c:	9440ffc4 	addi	r17,r18,1023
 800da20:	0441050e 	bge	zero,r17,800de38 <__divdf3+0x6dc>
 800da24:	a08001cc 	andi	r2,r20,7
 800da28:	10016c1e 	bne	r2,zero,800dfdc <__divdf3+0x880>
 800da2c:	a008d0fa 	srli	r4,r20,3
 800da30:	9880402c 	andhi	r2,r19,256
 800da34:	10000426 	beq	r2,zero,800da48 <__divdf3+0x2ec>
 800da38:	00bfc034 	movhi	r2,65280
 800da3c:	10bfffc4 	addi	r2,r2,-1
 800da40:	98a6703a 	and	r19,r19,r2
 800da44:	94410004 	addi	r17,r18,1024
 800da48:	8881ffc8 	cmpgei	r2,r17,2047
 800da4c:	103fa61e 	bne	r2,zero,800d8e8 <__divdf3+0x18c>
 800da50:	9828977a 	slli	r20,r19,29
 800da54:	980a927a 	slli	r5,r19,9
 800da58:	88c1ffcc 	andi	r3,r17,2047
 800da5c:	a128b03a 	or	r20,r20,r4
 800da60:	280ad33a 	srli	r5,r5,12
 800da64:	003f8f06 	br	800d8a4 <__divdf3+0x148>
 800da68:	01400434 	movhi	r5,16
 800da6c:	000f883a 	mov	r7,zero
 800da70:	297fffc4 	addi	r5,r5,-1
 800da74:	053fffc4 	movi	r20,-1
 800da78:	00c1ffc4 	movi	r3,2047
 800da7c:	003f8906 	br	800d8a4 <__divdf3+0x148>
 800da80:	9880022c 	andhi	r2,r19,8
 800da84:	10000926 	beq	r2,zero,800daac <__divdf3+0x350>
 800da88:	b080022c 	andhi	r2,r22,8
 800da8c:	1000071e 	bne	r2,zero,800daac <__divdf3+0x350>
 800da90:	00800434 	movhi	r2,16
 800da94:	b1400234 	orhi	r5,r22,8
 800da98:	10bfffc4 	addi	r2,r2,-1
 800da9c:	288a703a 	and	r5,r5,r2
 800daa0:	a80f883a 	mov	r7,r21
 800daa4:	4829883a 	mov	r20,r9
 800daa8:	003ff306 	br	800da78 <__divdf3+0x31c>
 800daac:	00800434 	movhi	r2,16
 800dab0:	99400234 	orhi	r5,r19,8
 800dab4:	10bfffc4 	addi	r2,r2,-1
 800dab8:	288a703a 	and	r5,r5,r2
 800dabc:	b80f883a 	mov	r7,r23
 800dac0:	003fed06 	br	800da78 <__divdf3+0x31c>
 800dac4:	b4c10536 	bltu	r22,r19,800dedc <__divdf3+0x780>
 800dac8:	b4c10326 	beq	r22,r19,800ded8 <__divdf3+0x77c>
 800dacc:	94bfffc4 	addi	r18,r18,-1
 800dad0:	a039883a 	mov	fp,r20
 800dad4:	9821883a 	mov	r16,r19
 800dad8:	0023883a 	mov	r17,zero
 800dadc:	b006923a 	slli	r3,r22,8
 800dae0:	482cd63a 	srli	r22,r9,24
 800dae4:	8009883a 	mov	r4,r16
 800dae8:	182ed43a 	srli	r23,r3,16
 800daec:	b0ecb03a 	or	r22,r22,r3
 800daf0:	d9c00015 	stw	r7,0(sp)
 800daf4:	b80b883a 	mov	r5,r23
 800daf8:	482a923a 	slli	r21,r9,8
 800dafc:	b53fffcc 	andi	r20,r22,65535
 800db00:	800cd840 	call	800cd84 <__udivsi3>
 800db04:	100b883a 	mov	r5,r2
 800db08:	a009883a 	mov	r4,r20
 800db0c:	1027883a 	mov	r19,r2
 800db10:	800ce440 	call	800ce44 <__mulsi3>
 800db14:	8009883a 	mov	r4,r16
 800db18:	b80b883a 	mov	r5,r23
 800db1c:	1021883a 	mov	r16,r2
 800db20:	800cde80 	call	800cde8 <__umodsi3>
 800db24:	1004943a 	slli	r2,r2,16
 800db28:	e008d43a 	srli	r4,fp,16
 800db2c:	d9c00017 	ldw	r7,0(sp)
 800db30:	2088b03a 	or	r4,r4,r2
 800db34:	2400042e 	bgeu	r4,r16,800db48 <__divdf3+0x3ec>
 800db38:	2589883a 	add	r4,r4,r22
 800db3c:	98bfffc4 	addi	r2,r19,-1
 800db40:	2581082e 	bgeu	r4,r22,800df64 <__divdf3+0x808>
 800db44:	1027883a 	mov	r19,r2
 800db48:	2421c83a 	sub	r16,r4,r16
 800db4c:	b80b883a 	mov	r5,r23
 800db50:	8009883a 	mov	r4,r16
 800db54:	d9c00215 	stw	r7,8(sp)
 800db58:	800cd840 	call	800cd84 <__udivsi3>
 800db5c:	100b883a 	mov	r5,r2
 800db60:	a009883a 	mov	r4,r20
 800db64:	d8800115 	stw	r2,4(sp)
 800db68:	800ce440 	call	800ce44 <__mulsi3>
 800db6c:	b80b883a 	mov	r5,r23
 800db70:	8009883a 	mov	r4,r16
 800db74:	d8800015 	stw	r2,0(sp)
 800db78:	800cde80 	call	800cde8 <__umodsi3>
 800db7c:	100c943a 	slli	r6,r2,16
 800db80:	d8c00017 	ldw	r3,0(sp)
 800db84:	e73fffcc 	andi	fp,fp,65535
 800db88:	e18cb03a 	or	r6,fp,r6
 800db8c:	da000117 	ldw	r8,4(sp)
 800db90:	d9c00217 	ldw	r7,8(sp)
 800db94:	30c0042e 	bgeu	r6,r3,800dba8 <__divdf3+0x44c>
 800db98:	358d883a 	add	r6,r6,r22
 800db9c:	40bfffc4 	addi	r2,r8,-1
 800dba0:	3580ec2e 	bgeu	r6,r22,800df54 <__divdf3+0x7f8>
 800dba4:	1011883a 	mov	r8,r2
 800dba8:	9826943a 	slli	r19,r19,16
 800dbac:	af3fffcc 	andi	fp,r21,65535
 800dbb0:	30c7c83a 	sub	r3,r6,r3
 800dbb4:	9a26b03a 	or	r19,r19,r8
 800dbb8:	9810d43a 	srli	r8,r19,16
 800dbbc:	9abfffcc 	andi	r10,r19,65535
 800dbc0:	5009883a 	mov	r4,r10
 800dbc4:	e00b883a 	mov	r5,fp
 800dbc8:	d9c00515 	stw	r7,20(sp)
 800dbcc:	d8c00315 	stw	r3,12(sp)
 800dbd0:	da800415 	stw	r10,16(sp)
 800dbd4:	da000015 	stw	r8,0(sp)
 800dbd8:	800ce440 	call	800ce44 <__mulsi3>
 800dbdc:	da000017 	ldw	r8,0(sp)
 800dbe0:	e00b883a 	mov	r5,fp
 800dbe4:	d8800215 	stw	r2,8(sp)
 800dbe8:	4009883a 	mov	r4,r8
 800dbec:	800ce440 	call	800ce44 <__mulsi3>
 800dbf0:	da000017 	ldw	r8,0(sp)
 800dbf4:	a820d43a 	srli	r16,r21,16
 800dbf8:	d8800115 	stw	r2,4(sp)
 800dbfc:	4009883a 	mov	r4,r8
 800dc00:	800b883a 	mov	r5,r16
 800dc04:	800ce440 	call	800ce44 <__mulsi3>
 800dc08:	da800417 	ldw	r10,16(sp)
 800dc0c:	8009883a 	mov	r4,r16
 800dc10:	d8800015 	stw	r2,0(sp)
 800dc14:	500b883a 	mov	r5,r10
 800dc18:	800ce440 	call	800ce44 <__mulsi3>
 800dc1c:	d9800217 	ldw	r6,8(sp)
 800dc20:	da000117 	ldw	r8,4(sp)
 800dc24:	da400017 	ldw	r9,0(sp)
 800dc28:	3008d43a 	srli	r4,r6,16
 800dc2c:	1205883a 	add	r2,r2,r8
 800dc30:	d8c00317 	ldw	r3,12(sp)
 800dc34:	2089883a 	add	r4,r4,r2
 800dc38:	d9c00517 	ldw	r7,20(sp)
 800dc3c:	2200022e 	bgeu	r4,r8,800dc48 <__divdf3+0x4ec>
 800dc40:	00800074 	movhi	r2,1
 800dc44:	4893883a 	add	r9,r9,r2
 800dc48:	200ad43a 	srli	r5,r4,16
 800dc4c:	2008943a 	slli	r4,r4,16
 800dc50:	31bfffcc 	andi	r6,r6,65535
 800dc54:	2a4b883a 	add	r5,r5,r9
 800dc58:	218d883a 	add	r6,r4,r6
 800dc5c:	19409436 	bltu	r3,r5,800deb0 <__divdf3+0x754>
 800dc60:	19409226 	beq	r3,r5,800deac <__divdf3+0x750>
 800dc64:	898dc83a 	sub	r6,r17,r6
 800dc68:	89a3803a 	cmpltu	r17,r17,r6
 800dc6c:	1947c83a 	sub	r3,r3,r5
 800dc70:	1c47c83a 	sub	r3,r3,r17
 800dc74:	9440ffc4 	addi	r17,r18,1023
 800dc78:	b0c0d326 	beq	r22,r3,800dfc8 <__divdf3+0x86c>
 800dc7c:	1809883a 	mov	r4,r3
 800dc80:	b80b883a 	mov	r5,r23
 800dc84:	d9800315 	stw	r6,12(sp)
 800dc88:	d9c00215 	stw	r7,8(sp)
 800dc8c:	d8c00015 	stw	r3,0(sp)
 800dc90:	800cd840 	call	800cd84 <__udivsi3>
 800dc94:	100b883a 	mov	r5,r2
 800dc98:	a009883a 	mov	r4,r20
 800dc9c:	d8800115 	stw	r2,4(sp)
 800dca0:	800ce440 	call	800ce44 <__mulsi3>
 800dca4:	d8c00017 	ldw	r3,0(sp)
 800dca8:	b80b883a 	mov	r5,r23
 800dcac:	d8800015 	stw	r2,0(sp)
 800dcb0:	1809883a 	mov	r4,r3
 800dcb4:	800cde80 	call	800cde8 <__umodsi3>
 800dcb8:	d9800317 	ldw	r6,12(sp)
 800dcbc:	1006943a 	slli	r3,r2,16
 800dcc0:	da400017 	ldw	r9,0(sp)
 800dcc4:	3008d43a 	srli	r4,r6,16
 800dcc8:	da000117 	ldw	r8,4(sp)
 800dccc:	d9c00217 	ldw	r7,8(sp)
 800dcd0:	20c6b03a 	or	r3,r4,r3
 800dcd4:	1a40062e 	bgeu	r3,r9,800dcf0 <__divdf3+0x594>
 800dcd8:	1d87883a 	add	r3,r3,r22
 800dcdc:	40bfffc4 	addi	r2,r8,-1
 800dce0:	1d80c836 	bltu	r3,r22,800e004 <__divdf3+0x8a8>
 800dce4:	1a40c72e 	bgeu	r3,r9,800e004 <__divdf3+0x8a8>
 800dce8:	423fff84 	addi	r8,r8,-2
 800dcec:	1d87883a 	add	r3,r3,r22
 800dcf0:	1a47c83a 	sub	r3,r3,r9
 800dcf4:	1809883a 	mov	r4,r3
 800dcf8:	b80b883a 	mov	r5,r23
 800dcfc:	d9800415 	stw	r6,16(sp)
 800dd00:	d9c00315 	stw	r7,12(sp)
 800dd04:	da000215 	stw	r8,8(sp)
 800dd08:	d8c00115 	stw	r3,4(sp)
 800dd0c:	800cd840 	call	800cd84 <__udivsi3>
 800dd10:	100b883a 	mov	r5,r2
 800dd14:	a009883a 	mov	r4,r20
 800dd18:	d8800015 	stw	r2,0(sp)
 800dd1c:	800ce440 	call	800ce44 <__mulsi3>
 800dd20:	d8c00117 	ldw	r3,4(sp)
 800dd24:	b80b883a 	mov	r5,r23
 800dd28:	102f883a 	mov	r23,r2
 800dd2c:	1809883a 	mov	r4,r3
 800dd30:	800cde80 	call	800cde8 <__umodsi3>
 800dd34:	d9800417 	ldw	r6,16(sp)
 800dd38:	1004943a 	slli	r2,r2,16
 800dd3c:	da400017 	ldw	r9,0(sp)
 800dd40:	31bfffcc 	andi	r6,r6,65535
 800dd44:	308cb03a 	or	r6,r6,r2
 800dd48:	da000217 	ldw	r8,8(sp)
 800dd4c:	d9c00317 	ldw	r7,12(sp)
 800dd50:	35c0062e 	bgeu	r6,r23,800dd6c <__divdf3+0x610>
 800dd54:	358d883a 	add	r6,r6,r22
 800dd58:	48bfffc4 	addi	r2,r9,-1
 800dd5c:	3580a736 	bltu	r6,r22,800dffc <__divdf3+0x8a0>
 800dd60:	35c0a62e 	bgeu	r6,r23,800dffc <__divdf3+0x8a0>
 800dd64:	4a7fff84 	addi	r9,r9,-2
 800dd68:	358d883a 	add	r6,r6,r22
 800dd6c:	4028943a 	slli	r20,r8,16
 800dd70:	35d5c83a 	sub	r10,r6,r23
 800dd74:	e009883a 	mov	r4,fp
 800dd78:	a268b03a 	or	r20,r20,r9
 800dd7c:	a23fffcc 	andi	r8,r20,65535
 800dd80:	a02ed43a 	srli	r23,r20,16
 800dd84:	400b883a 	mov	r5,r8
 800dd88:	d9c00315 	stw	r7,12(sp)
 800dd8c:	da800215 	stw	r10,8(sp)
 800dd90:	da000115 	stw	r8,4(sp)
 800dd94:	800ce440 	call	800ce44 <__mulsi3>
 800dd98:	e00b883a 	mov	r5,fp
 800dd9c:	b809883a 	mov	r4,r23
 800dda0:	1039883a 	mov	fp,r2
 800dda4:	800ce440 	call	800ce44 <__mulsi3>
 800dda8:	8009883a 	mov	r4,r16
 800ddac:	b80b883a 	mov	r5,r23
 800ddb0:	d8800015 	stw	r2,0(sp)
 800ddb4:	800ce440 	call	800ce44 <__mulsi3>
 800ddb8:	da000117 	ldw	r8,4(sp)
 800ddbc:	8009883a 	mov	r4,r16
 800ddc0:	1021883a 	mov	r16,r2
 800ddc4:	400b883a 	mov	r5,r8
 800ddc8:	800ce440 	call	800ce44 <__mulsi3>
 800ddcc:	d9800017 	ldw	r6,0(sp)
 800ddd0:	e006d43a 	srli	r3,fp,16
 800ddd4:	da800217 	ldw	r10,8(sp)
 800ddd8:	1185883a 	add	r2,r2,r6
 800dddc:	1887883a 	add	r3,r3,r2
 800dde0:	d9c00317 	ldw	r7,12(sp)
 800dde4:	1980022e 	bgeu	r3,r6,800ddf0 <__divdf3+0x694>
 800dde8:	00800074 	movhi	r2,1
 800ddec:	80a1883a 	add	r16,r16,r2
 800ddf0:	1808d43a 	srli	r4,r3,16
 800ddf4:	1806943a 	slli	r3,r3,16
 800ddf8:	e73fffcc 	andi	fp,fp,65535
 800ddfc:	2409883a 	add	r4,r4,r16
 800de00:	1f07883a 	add	r3,r3,fp
 800de04:	51000436 	bltu	r10,r4,800de18 <__divdf3+0x6bc>
 800de08:	51000226 	beq	r10,r4,800de14 <__divdf3+0x6b8>
 800de0c:	a5000054 	ori	r20,r20,1
 800de10:	003f0306 	br	800da20 <__divdf3+0x2c4>
 800de14:	183f0226 	beq	r3,zero,800da20 <__divdf3+0x2c4>
 800de18:	b28d883a 	add	r6,r22,r10
 800de1c:	a0bfffc4 	addi	r2,r20,-1
 800de20:	35806536 	bltu	r6,r22,800dfb8 <__divdf3+0x85c>
 800de24:	31008036 	bltu	r6,r4,800e028 <__divdf3+0x8cc>
 800de28:	31009426 	beq	r6,r4,800e07c <__divdf3+0x920>
 800de2c:	1029883a 	mov	r20,r2
 800de30:	003ff606 	br	800de0c <__divdf3+0x6b0>
 800de34:	053fffc4 	movi	r20,-1
 800de38:	01400044 	movi	r5,1
 800de3c:	2c4bc83a 	sub	r5,r5,r17
 800de40:	28800e48 	cmpgei	r2,r5,57
 800de44:	103e941e 	bne	r2,zero,800d898 <__divdf3+0x13c>
 800de48:	28800808 	cmpgei	r2,r5,32
 800de4c:	1000491e 	bne	r2,zero,800df74 <__divdf3+0x818>
 800de50:	92010784 	addi	r8,r18,1054
 800de54:	9a04983a 	sll	r2,r19,r8
 800de58:	a146d83a 	srl	r3,r20,r5
 800de5c:	a210983a 	sll	r8,r20,r8
 800de60:	994ad83a 	srl	r5,r19,r5
 800de64:	10e8b03a 	or	r20,r2,r3
 800de68:	4010c03a 	cmpne	r8,r8,zero
 800de6c:	a228b03a 	or	r20,r20,r8
 800de70:	a08001cc 	andi	r2,r20,7
 800de74:	10000726 	beq	r2,zero,800de94 <__divdf3+0x738>
 800de78:	a08003cc 	andi	r2,r20,15
 800de7c:	10800120 	cmpeqi	r2,r2,4
 800de80:	1000041e 	bne	r2,zero,800de94 <__divdf3+0x738>
 800de84:	a0800104 	addi	r2,r20,4
 800de88:	1529803a 	cmpltu	r20,r2,r20
 800de8c:	2d0b883a 	add	r5,r5,r20
 800de90:	1029883a 	mov	r20,r2
 800de94:	2880202c 	andhi	r2,r5,128
 800de98:	10006f26 	beq	r2,zero,800e058 <__divdf3+0x8fc>
 800de9c:	00c00044 	movi	r3,1
 800dea0:	000b883a 	mov	r5,zero
 800dea4:	0029883a 	mov	r20,zero
 800dea8:	003e7e06 	br	800d8a4 <__divdf3+0x148>
 800deac:	89bf6d2e 	bgeu	r17,r6,800dc64 <__divdf3+0x508>
 800deb0:	8d63883a 	add	r17,r17,r21
 800deb4:	8d45803a 	cmpltu	r2,r17,r21
 800deb8:	1585883a 	add	r2,r2,r22
 800debc:	1887883a 	add	r3,r3,r2
 800dec0:	98bfffc4 	addi	r2,r19,-1
 800dec4:	b0c0202e 	bgeu	r22,r3,800df48 <__divdf3+0x7ec>
 800dec8:	19405136 	bltu	r3,r5,800e010 <__divdf3+0x8b4>
 800decc:	28c04f26 	beq	r5,r3,800e00c <__divdf3+0x8b0>
 800ded0:	1027883a 	mov	r19,r2
 800ded4:	003f6306 	br	800dc64 <__divdf3+0x508>
 800ded8:	a27efc36 	bltu	r20,r9,800dacc <__divdf3+0x370>
 800dedc:	983897fa 	slli	fp,r19,31
 800dee0:	a004d07a 	srli	r2,r20,1
 800dee4:	9820d07a 	srli	r16,r19,1
 800dee8:	a02297fa 	slli	r17,r20,31
 800deec:	e0b8b03a 	or	fp,fp,r2
 800def0:	003efa06 	br	800dadc <__divdf3+0x380>
 800def4:	e009883a 	mov	r4,fp
 800def8:	800f5580 	call	800f558 <__clzsi2>
 800defc:	11400544 	addi	r5,r2,21
 800df00:	29000748 	cmpgei	r4,r5,29
 800df04:	1007883a 	mov	r3,r2
 800df08:	10800804 	addi	r2,r2,32
 800df0c:	203e8526 	beq	r4,zero,800d924 <__divdf3+0x1c8>
 800df10:	18fffe04 	addi	r3,r3,-8
 800df14:	e0ec983a 	sll	r22,fp,r3
 800df18:	0013883a 	mov	r9,zero
 800df1c:	003e8806 	br	800d940 <__divdf3+0x1e4>
 800df20:	800f5580 	call	800f558 <__clzsi2>
 800df24:	11000544 	addi	r4,r2,21
 800df28:	20c00748 	cmpgei	r3,r4,29
 800df2c:	100b883a 	mov	r5,r2
 800df30:	10800804 	addi	r2,r2,32
 800df34:	183e8d26 	beq	r3,zero,800d96c <__divdf3+0x210>
 800df38:	297ffe04 	addi	r5,r5,-8
 800df3c:	a166983a 	sll	r19,r20,r5
 800df40:	0029883a 	mov	r20,zero
 800df44:	003e9006 	br	800d988 <__divdf3+0x22c>
 800df48:	b0ffe11e 	bne	r22,r3,800ded0 <__divdf3+0x774>
 800df4c:	8d7fe036 	bltu	r17,r21,800ded0 <__divdf3+0x774>
 800df50:	003fdd06 	br	800dec8 <__divdf3+0x76c>
 800df54:	30ff132e 	bgeu	r6,r3,800dba4 <__divdf3+0x448>
 800df58:	423fff84 	addi	r8,r8,-2
 800df5c:	358d883a 	add	r6,r6,r22
 800df60:	003f1106 	br	800dba8 <__divdf3+0x44c>
 800df64:	243ef72e 	bgeu	r4,r16,800db44 <__divdf3+0x3e8>
 800df68:	9cffff84 	addi	r19,r19,-2
 800df6c:	2589883a 	add	r4,r4,r22
 800df70:	003ef506 	br	800db48 <__divdf3+0x3ec>
 800df74:	00fff844 	movi	r3,-31
 800df78:	1c47c83a 	sub	r3,r3,r17
 800df7c:	29400820 	cmpeqi	r5,r5,32
 800df80:	98c6d83a 	srl	r3,r19,r3
 800df84:	2800031e 	bne	r5,zero,800df94 <__divdf3+0x838>
 800df88:	91410f84 	addi	r5,r18,1086
 800df8c:	994a983a 	sll	r5,r19,r5
 800df90:	a168b03a 	or	r20,r20,r5
 800df94:	a028c03a 	cmpne	r20,r20,zero
 800df98:	a0e8b03a 	or	r20,r20,r3
 800df9c:	a4c001cc 	andi	r19,r20,7
 800dfa0:	9800291e 	bne	r19,zero,800e048 <__divdf3+0x8ec>
 800dfa4:	000b883a 	mov	r5,zero
 800dfa8:	a028d0fa 	srli	r20,r20,3
 800dfac:	0007883a 	mov	r3,zero
 800dfb0:	a4e8b03a 	or	r20,r20,r19
 800dfb4:	003e3b06 	br	800d8a4 <__divdf3+0x148>
 800dfb8:	1029883a 	mov	r20,r2
 800dfbc:	313f931e 	bne	r6,r4,800de0c <__divdf3+0x6b0>
 800dfc0:	1d7f921e 	bne	r3,r21,800de0c <__divdf3+0x6b0>
 800dfc4:	003e9606 	br	800da20 <__divdf3+0x2c4>
 800dfc8:	047f9a0e 	bge	zero,r17,800de34 <__divdf3+0x6d8>
 800dfcc:	0009883a 	mov	r4,zero
 800dfd0:	05000044 	movi	r20,1
 800dfd4:	9d27883a 	add	r19,r19,r20
 800dfd8:	003e9506 	br	800da30 <__divdf3+0x2d4>
 800dfdc:	a08003cc 	andi	r2,r20,15
 800dfe0:	10800118 	cmpnei	r2,r2,4
 800dfe4:	103e9126 	beq	r2,zero,800da2c <__divdf3+0x2d0>
 800dfe8:	a1000104 	addi	r4,r20,4
 800dfec:	00bffec4 	movi	r2,-5
 800dff0:	2008d0fa 	srli	r4,r4,3
 800dff4:	1529803a 	cmpltu	r20,r2,r20
 800dff8:	003ff606 	br	800dfd4 <__divdf3+0x878>
 800dffc:	1013883a 	mov	r9,r2
 800e000:	003f5a06 	br	800dd6c <__divdf3+0x610>
 800e004:	1011883a 	mov	r8,r2
 800e008:	003f3906 	br	800dcf0 <__divdf3+0x594>
 800e00c:	89bfb02e 	bgeu	r17,r6,800ded0 <__divdf3+0x774>
 800e010:	8d63883a 	add	r17,r17,r21
 800e014:	8d45803a 	cmpltu	r2,r17,r21
 800e018:	1585883a 	add	r2,r2,r22
 800e01c:	9cffff84 	addi	r19,r19,-2
 800e020:	1887883a 	add	r3,r3,r2
 800e024:	003f0f06 	br	800dc64 <__divdf3+0x508>
 800e028:	ad45883a 	add	r2,r21,r21
 800e02c:	156b803a 	cmpltu	r21,r2,r21
 800e030:	adad883a 	add	r22,r21,r22
 800e034:	358d883a 	add	r6,r6,r22
 800e038:	a53fff84 	addi	r20,r20,-2
 800e03c:	102b883a 	mov	r21,r2
 800e040:	313fdf26 	beq	r6,r4,800dfc0 <__divdf3+0x864>
 800e044:	003f7106 	br	800de0c <__divdf3+0x6b0>
 800e048:	a08003cc 	andi	r2,r20,15
 800e04c:	10800118 	cmpnei	r2,r2,4
 800e050:	000b883a 	mov	r5,zero
 800e054:	103f8b1e 	bne	r2,zero,800de84 <__divdf3+0x728>
 800e058:	2804927a 	slli	r2,r5,9
 800e05c:	2826977a 	slli	r19,r5,29
 800e060:	100ad33a 	srli	r5,r2,12
 800e064:	003fd006 	br	800dfa8 <__divdf3+0x84c>
 800e068:	00800434 	movhi	r2,16
 800e06c:	99400234 	orhi	r5,r19,8
 800e070:	10bfffc4 	addi	r2,r2,-1
 800e074:	288a703a 	and	r5,r5,r2
 800e078:	003e7f06 	br	800da78 <__divdf3+0x31c>
 800e07c:	a8ffea36 	bltu	r21,r3,800e028 <__divdf3+0x8cc>
 800e080:	1029883a 	mov	r20,r2
 800e084:	1d7f611e 	bne	r3,r21,800de0c <__divdf3+0x6b0>
 800e088:	003e6506 	br	800da20 <__divdf3+0x2c4>

0800e08c <__eqdf2>:
 800e08c:	2810d53a 	srli	r8,r5,20
 800e090:	3806d53a 	srli	r3,r7,20
 800e094:	00800434 	movhi	r2,16
 800e098:	4201ffcc 	andi	r8,r8,2047
 800e09c:	10bfffc4 	addi	r2,r2,-1
 800e0a0:	4241ffd8 	cmpnei	r9,r8,2047
 800e0a4:	2814d7fa 	srli	r10,r5,31
 800e0a8:	3816d7fa 	srli	r11,r7,31
 800e0ac:	288a703a 	and	r5,r5,r2
 800e0b0:	388e703a 	and	r7,r7,r2
 800e0b4:	1881ffcc 	andi	r2,r3,2047
 800e0b8:	48000626 	beq	r9,zero,800e0d4 <__eqdf2+0x48>
 800e0bc:	10c1ffe0 	cmpeqi	r3,r2,2047
 800e0c0:	1800021e 	bne	r3,zero,800e0cc <__eqdf2+0x40>
 800e0c4:	4080011e 	bne	r8,r2,800e0cc <__eqdf2+0x40>
 800e0c8:	29c00826 	beq	r5,r7,800e0ec <__eqdf2+0x60>
 800e0cc:	00800044 	movi	r2,1
 800e0d0:	f800283a 	ret
 800e0d4:	2906b03a 	or	r3,r5,r4
 800e0d8:	183ffc1e 	bne	r3,zero,800e0cc <__eqdf2+0x40>
 800e0dc:	1081ffd8 	cmpnei	r2,r2,2047
 800e0e0:	103ffa1e 	bne	r2,zero,800e0cc <__eqdf2+0x40>
 800e0e4:	398eb03a 	or	r7,r7,r6
 800e0e8:	383ff81e 	bne	r7,zero,800e0cc <__eqdf2+0x40>
 800e0ec:	21bff71e 	bne	r4,r6,800e0cc <__eqdf2+0x40>
 800e0f0:	52c00426 	beq	r10,r11,800e104 <__eqdf2+0x78>
 800e0f4:	403ff51e 	bne	r8,zero,800e0cc <__eqdf2+0x40>
 800e0f8:	290ab03a 	or	r5,r5,r4
 800e0fc:	2804c03a 	cmpne	r2,r5,zero
 800e100:	f800283a 	ret
 800e104:	0005883a 	mov	r2,zero
 800e108:	f800283a 	ret

0800e10c <__gedf2>:
 800e10c:	2810d53a 	srli	r8,r5,20
 800e110:	3812d53a 	srli	r9,r7,20
 800e114:	00c00434 	movhi	r3,16
 800e118:	4201ffcc 	andi	r8,r8,2047
 800e11c:	18ffffc4 	addi	r3,r3,-1
 800e120:	4281ffd8 	cmpnei	r10,r8,2047
 800e124:	2816d7fa 	srli	r11,r5,31
 800e128:	3804d7fa 	srli	r2,r7,31
 800e12c:	28ca703a 	and	r5,r5,r3
 800e130:	38ce703a 	and	r7,r7,r3
 800e134:	48c1ffcc 	andi	r3,r9,2047
 800e138:	50000a26 	beq	r10,zero,800e164 <__gedf2+0x58>
 800e13c:	1a41ffd8 	cmpnei	r9,r3,2047
 800e140:	48000c26 	beq	r9,zero,800e174 <__gedf2+0x68>
 800e144:	4000171e 	bne	r8,zero,800e1a4 <__gedf2+0x98>
 800e148:	2912b03a 	or	r9,r5,r4
 800e14c:	1800121e 	bne	r3,zero,800e198 <__gedf2+0x8c>
 800e150:	3994b03a 	or	r10,r7,r6
 800e154:	5000101e 	bne	r10,zero,800e198 <__gedf2+0x8c>
 800e158:	48000a1e 	bne	r9,zero,800e184 <__gedf2+0x78>
 800e15c:	0005883a 	mov	r2,zero
 800e160:	f800283a 	ret
 800e164:	2912b03a 	or	r9,r5,r4
 800e168:	48001d1e 	bne	r9,zero,800e1e0 <__gedf2+0xd4>
 800e16c:	1a41ffe0 	cmpeqi	r9,r3,2047
 800e170:	48000c26 	beq	r9,zero,800e1a4 <__gedf2+0x98>
 800e174:	3992b03a 	or	r9,r7,r6
 800e178:	4800191e 	bne	r9,zero,800e1e0 <__gedf2+0xd4>
 800e17c:	40000526 	beq	r8,zero,800e194 <__gedf2+0x88>
 800e180:	58800c26 	beq	r11,r2,800e1b4 <__gedf2+0xa8>
 800e184:	00800044 	movi	r2,1
 800e188:	58000526 	beq	r11,zero,800e1a0 <__gedf2+0x94>
 800e18c:	00bfffc4 	movi	r2,-1
 800e190:	f800283a 	ret
 800e194:	2912b03a 	or	r9,r5,r4
 800e198:	483ff91e 	bne	r9,zero,800e180 <__gedf2+0x74>
 800e19c:	103ffb26 	beq	r2,zero,800e18c <__gedf2+0x80>
 800e1a0:	f800283a 	ret
 800e1a4:	183ff61e 	bne	r3,zero,800e180 <__gedf2+0x74>
 800e1a8:	3992b03a 	or	r9,r7,r6
 800e1ac:	483ff41e 	bne	r9,zero,800e180 <__gedf2+0x74>
 800e1b0:	003ff406 	br	800e184 <__gedf2+0x78>
 800e1b4:	1a000716 	blt	r3,r8,800e1d4 <__gedf2+0xc8>
 800e1b8:	40fff816 	blt	r8,r3,800e19c <__gedf2+0x90>
 800e1bc:	397ff136 	bltu	r7,r5,800e184 <__gedf2+0x78>
 800e1c0:	29c00926 	beq	r5,r7,800e1e8 <__gedf2+0xdc>
 800e1c4:	29ffe52e 	bgeu	r5,r7,800e15c <__gedf2+0x50>
 800e1c8:	583ff026 	beq	r11,zero,800e18c <__gedf2+0x80>
 800e1cc:	5805883a 	mov	r2,r11
 800e1d0:	f800283a 	ret
 800e1d4:	103fed1e 	bne	r2,zero,800e18c <__gedf2+0x80>
 800e1d8:	00800044 	movi	r2,1
 800e1dc:	f800283a 	ret
 800e1e0:	00bfff84 	movi	r2,-2
 800e1e4:	f800283a 	ret
 800e1e8:	313fe636 	bltu	r6,r4,800e184 <__gedf2+0x78>
 800e1ec:	21bfdb2e 	bgeu	r4,r6,800e15c <__gedf2+0x50>
 800e1f0:	003ff506 	br	800e1c8 <__gedf2+0xbc>

0800e1f4 <__ledf2>:
 800e1f4:	2810d53a 	srli	r8,r5,20
 800e1f8:	3812d53a 	srli	r9,r7,20
 800e1fc:	00c00434 	movhi	r3,16
 800e200:	4201ffcc 	andi	r8,r8,2047
 800e204:	18ffffc4 	addi	r3,r3,-1
 800e208:	4281ffd8 	cmpnei	r10,r8,2047
 800e20c:	2816d7fa 	srli	r11,r5,31
 800e210:	3804d7fa 	srli	r2,r7,31
 800e214:	28ca703a 	and	r5,r5,r3
 800e218:	38ce703a 	and	r7,r7,r3
 800e21c:	48c1ffcc 	andi	r3,r9,2047
 800e220:	50000a26 	beq	r10,zero,800e24c <__ledf2+0x58>
 800e224:	1a41ffd8 	cmpnei	r9,r3,2047
 800e228:	48000c26 	beq	r9,zero,800e25c <__ledf2+0x68>
 800e22c:	4000191e 	bne	r8,zero,800e294 <__ledf2+0xa0>
 800e230:	2912b03a 	or	r9,r5,r4
 800e234:	18000d1e 	bne	r3,zero,800e26c <__ledf2+0x78>
 800e238:	3994b03a 	or	r10,r7,r6
 800e23c:	50000b1e 	bne	r10,zero,800e26c <__ledf2+0x78>
 800e240:	48000c1e 	bne	r9,zero,800e274 <__ledf2+0x80>
 800e244:	0005883a 	mov	r2,zero
 800e248:	f800283a 	ret
 800e24c:	2912b03a 	or	r9,r5,r4
 800e250:	48000c1e 	bne	r9,zero,800e284 <__ledf2+0x90>
 800e254:	1a41ffe0 	cmpeqi	r9,r3,2047
 800e258:	48000e26 	beq	r9,zero,800e294 <__ledf2+0xa0>
 800e25c:	3992b03a 	or	r9,r7,r6
 800e260:	4800081e 	bne	r9,zero,800e284 <__ledf2+0x90>
 800e264:	4000021e 	bne	r8,zero,800e270 <__ledf2+0x7c>
 800e268:	2912b03a 	or	r9,r5,r4
 800e26c:	48000726 	beq	r9,zero,800e28c <__ledf2+0x98>
 800e270:	58800c26 	beq	r11,r2,800e2a4 <__ledf2+0xb0>
 800e274:	00800044 	movi	r2,1
 800e278:	58000526 	beq	r11,zero,800e290 <__ledf2+0x9c>
 800e27c:	00bfffc4 	movi	r2,-1
 800e280:	f800283a 	ret
 800e284:	00800084 	movi	r2,2
 800e288:	f800283a 	ret
 800e28c:	103ffb26 	beq	r2,zero,800e27c <__ledf2+0x88>
 800e290:	f800283a 	ret
 800e294:	183ff61e 	bne	r3,zero,800e270 <__ledf2+0x7c>
 800e298:	3992b03a 	or	r9,r7,r6
 800e29c:	483ff41e 	bne	r9,zero,800e270 <__ledf2+0x7c>
 800e2a0:	003ff406 	br	800e274 <__ledf2+0x80>
 800e2a4:	1a00030e 	bge	r3,r8,800e2b4 <__ledf2+0xc0>
 800e2a8:	103ff41e 	bne	r2,zero,800e27c <__ledf2+0x88>
 800e2ac:	00800044 	movi	r2,1
 800e2b0:	f800283a 	ret
 800e2b4:	40fff516 	blt	r8,r3,800e28c <__ledf2+0x98>
 800e2b8:	397fee36 	bltu	r7,r5,800e274 <__ledf2+0x80>
 800e2bc:	29c00426 	beq	r5,r7,800e2d0 <__ledf2+0xdc>
 800e2c0:	29ffe02e 	bgeu	r5,r7,800e244 <__ledf2+0x50>
 800e2c4:	583fed26 	beq	r11,zero,800e27c <__ledf2+0x88>
 800e2c8:	5805883a 	mov	r2,r11
 800e2cc:	f800283a 	ret
 800e2d0:	313fe836 	bltu	r6,r4,800e274 <__ledf2+0x80>
 800e2d4:	21bfdb2e 	bgeu	r4,r6,800e244 <__ledf2+0x50>
 800e2d8:	003ffa06 	br	800e2c4 <__ledf2+0xd0>

0800e2dc <__muldf3>:
 800e2dc:	2810d53a 	srli	r8,r5,20
 800e2e0:	defff004 	addi	sp,sp,-64
 800e2e4:	00800434 	movhi	r2,16
 800e2e8:	df000e15 	stw	fp,56(sp)
 800e2ec:	dd000a15 	stw	r20,40(sp)
 800e2f0:	dcc00915 	stw	r19,36(sp)
 800e2f4:	dc400715 	stw	r17,28(sp)
 800e2f8:	10bfffc4 	addi	r2,r2,-1
 800e2fc:	dfc00f15 	stw	ra,60(sp)
 800e300:	ddc00d15 	stw	r23,52(sp)
 800e304:	dd800c15 	stw	r22,48(sp)
 800e308:	dd400b15 	stw	r21,44(sp)
 800e30c:	dc800815 	stw	r18,32(sp)
 800e310:	dc000615 	stw	r16,24(sp)
 800e314:	4201ffcc 	andi	r8,r8,2047
 800e318:	2828d7fa 	srli	r20,r5,31
 800e31c:	2023883a 	mov	r17,r4
 800e320:	3039883a 	mov	fp,r6
 800e324:	28a6703a 	and	r19,r5,r2
 800e328:	40013426 	beq	r8,zero,800e7fc <__muldf3+0x520>
 800e32c:	4081ffe0 	cmpeqi	r2,r8,2047
 800e330:	1001461e 	bne	r2,zero,800e84c <__muldf3+0x570>
 800e334:	980a90fa 	slli	r5,r19,3
 800e338:	2026d77a 	srli	r19,r4,29
 800e33c:	202490fa 	slli	r18,r4,3
 800e340:	423f0044 	addi	r8,r8,-1023
 800e344:	9966b03a 	or	r19,r19,r5
 800e348:	9cc02034 	orhi	r19,r19,128
 800e34c:	002b883a 	mov	r21,zero
 800e350:	002d883a 	mov	r22,zero
 800e354:	3804d53a 	srli	r2,r7,20
 800e358:	00c00434 	movhi	r3,16
 800e35c:	18ffffc4 	addi	r3,r3,-1
 800e360:	1081ffcc 	andi	r2,r2,2047
 800e364:	382ed7fa 	srli	r23,r7,31
 800e368:	38e0703a 	and	r16,r7,r3
 800e36c:	10011026 	beq	r2,zero,800e7b0 <__muldf3+0x4d4>
 800e370:	10c1ffe0 	cmpeqi	r3,r2,2047
 800e374:	18013c1e 	bne	r3,zero,800e868 <__muldf3+0x58c>
 800e378:	e008d77a 	srli	r4,fp,29
 800e37c:	802090fa 	slli	r16,r16,3
 800e380:	e02290fa 	slli	r17,fp,3
 800e384:	10bf0044 	addi	r2,r2,-1023
 800e388:	2420b03a 	or	r16,r4,r16
 800e38c:	84002034 	orhi	r16,r16,128
 800e390:	4091883a 	add	r8,r8,r2
 800e394:	0009883a 	mov	r4,zero
 800e398:	a8800428 	cmpgeui	r2,r21,16
 800e39c:	a5ccf03a 	xor	r6,r20,r23
 800e3a0:	41c00044 	addi	r7,r8,1
 800e3a4:	1000371e 	bne	r2,zero,800e484 <__muldf3+0x1a8>
 800e3a8:	a80490ba 	slli	r2,r21,2
 800e3ac:	00c20074 	movhi	r3,2049
 800e3b0:	10c7883a 	add	r3,r2,r3
 800e3b4:	18b8ef17 	ldw	r2,-7236(r3)
 800e3b8:	1000683a 	jmp	r2
 800e3bc:	0800e484 	addi	zero,at,914
 800e3c0:	0800e400 	call	800e40 <__alt_mem_SDRAM-0x77ff1c0>
 800e3c4:	0800e400 	call	800e40 <__alt_mem_SDRAM-0x77ff1c0>
 800e3c8:	0800e3fc 	xorhi	zero,at,911
 800e3cc:	0800e40c 	andi	zero,at,912
 800e3d0:	0800e40c 	andi	zero,at,912
 800e3d4:	0800e8dc 	xori	zero,at,931
 800e3d8:	0800e3fc 	xorhi	zero,at,911
 800e3dc:	0800e40c 	andi	zero,at,912
 800e3e0:	0800e8dc 	xori	zero,at,931
 800e3e4:	0800e40c 	andi	zero,at,912
 800e3e8:	0800e3fc 	xorhi	zero,at,911
 800e3ec:	0800e884 	addi	zero,at,930
 800e3f0:	0800e884 	addi	zero,at,930
 800e3f4:	0800e884 	addi	zero,at,930
 800e3f8:	0800e968 	cmpgeui	zero,at,933
 800e3fc:	b80d883a 	mov	r6,r23
 800e400:	8027883a 	mov	r19,r16
 800e404:	8825883a 	mov	r18,r17
 800e408:	202d883a 	mov	r22,r4
 800e40c:	b08000a0 	cmpeqi	r2,r22,2
 800e410:	1000181e 	bne	r2,zero,800e474 <__muldf3+0x198>
 800e414:	b08000e0 	cmpeqi	r2,r22,3
 800e418:	1001961e 	bne	r2,zero,800ea74 <__muldf3+0x798>
 800e41c:	b0800060 	cmpeqi	r2,r22,1
 800e420:	1000c926 	beq	r2,zero,800e748 <__muldf3+0x46c>
 800e424:	0007883a 	mov	r3,zero
 800e428:	0027883a 	mov	r19,zero
 800e42c:	0025883a 	mov	r18,zero
 800e430:	1806953a 	slli	r3,r3,20
 800e434:	300c97fa 	slli	r6,r6,31
 800e438:	9005883a 	mov	r2,r18
 800e43c:	1cc6b03a 	or	r3,r3,r19
 800e440:	1986b03a 	or	r3,r3,r6
 800e444:	dfc00f17 	ldw	ra,60(sp)
 800e448:	df000e17 	ldw	fp,56(sp)
 800e44c:	ddc00d17 	ldw	r23,52(sp)
 800e450:	dd800c17 	ldw	r22,48(sp)
 800e454:	dd400b17 	ldw	r21,44(sp)
 800e458:	dd000a17 	ldw	r20,40(sp)
 800e45c:	dcc00917 	ldw	r19,36(sp)
 800e460:	dc800817 	ldw	r18,32(sp)
 800e464:	dc400717 	ldw	r17,28(sp)
 800e468:	dc000617 	ldw	r16,24(sp)
 800e46c:	dec01004 	addi	sp,sp,64
 800e470:	f800283a 	ret
 800e474:	00c1ffc4 	movi	r3,2047
 800e478:	0027883a 	mov	r19,zero
 800e47c:	0025883a 	mov	r18,zero
 800e480:	003feb06 	br	800e430 <__muldf3+0x154>
 800e484:	9028d43a 	srli	r20,r18,16
 800e488:	8f3fffcc 	andi	fp,r17,65535
 800e48c:	957fffcc 	andi	r21,r18,65535
 800e490:	a80b883a 	mov	r5,r21
 800e494:	e009883a 	mov	r4,fp
 800e498:	d9800315 	stw	r6,12(sp)
 800e49c:	da000215 	stw	r8,8(sp)
 800e4a0:	d9c00115 	stw	r7,4(sp)
 800e4a4:	8822d43a 	srli	r17,r17,16
 800e4a8:	800ce440 	call	800ce44 <__mulsi3>
 800e4ac:	e00b883a 	mov	r5,fp
 800e4b0:	a009883a 	mov	r4,r20
 800e4b4:	102d883a 	mov	r22,r2
 800e4b8:	800ce440 	call	800ce44 <__mulsi3>
 800e4bc:	880b883a 	mov	r5,r17
 800e4c0:	a009883a 	mov	r4,r20
 800e4c4:	102f883a 	mov	r23,r2
 800e4c8:	800ce440 	call	800ce44 <__mulsi3>
 800e4cc:	a80b883a 	mov	r5,r21
 800e4d0:	8809883a 	mov	r4,r17
 800e4d4:	d8800015 	stw	r2,0(sp)
 800e4d8:	800ce440 	call	800ce44 <__mulsi3>
 800e4dc:	b006d43a 	srli	r3,r22,16
 800e4e0:	15e5883a 	add	r18,r2,r23
 800e4e4:	d9c00117 	ldw	r7,4(sp)
 800e4e8:	1c87883a 	add	r3,r3,r18
 800e4ec:	da000217 	ldw	r8,8(sp)
 800e4f0:	d9800317 	ldw	r6,12(sp)
 800e4f4:	1dc0042e 	bgeu	r3,r23,800e508 <__muldf3+0x22c>
 800e4f8:	d9000017 	ldw	r4,0(sp)
 800e4fc:	00800074 	movhi	r2,1
 800e500:	2085883a 	add	r2,r4,r2
 800e504:	d8800015 	stw	r2,0(sp)
 800e508:	1804943a 	slli	r2,r3,16
 800e50c:	85ffffcc 	andi	r23,r16,65535
 800e510:	b5bfffcc 	andi	r22,r22,65535
 800e514:	1585883a 	add	r2,r2,r22
 800e518:	a80b883a 	mov	r5,r21
 800e51c:	b809883a 	mov	r4,r23
 800e520:	1824d43a 	srli	r18,r3,16
 800e524:	d9800515 	stw	r6,20(sp)
 800e528:	da000415 	stw	r8,16(sp)
 800e52c:	d9c00315 	stw	r7,12(sp)
 800e530:	8020d43a 	srli	r16,r16,16
 800e534:	d8800115 	stw	r2,4(sp)
 800e538:	800ce440 	call	800ce44 <__mulsi3>
 800e53c:	a009883a 	mov	r4,r20
 800e540:	b80b883a 	mov	r5,r23
 800e544:	d8800215 	stw	r2,8(sp)
 800e548:	800ce440 	call	800ce44 <__mulsi3>
 800e54c:	a009883a 	mov	r4,r20
 800e550:	800b883a 	mov	r5,r16
 800e554:	102d883a 	mov	r22,r2
 800e558:	800ce440 	call	800ce44 <__mulsi3>
 800e55c:	a80b883a 	mov	r5,r21
 800e560:	8009883a 	mov	r4,r16
 800e564:	1029883a 	mov	r20,r2
 800e568:	800ce440 	call	800ce44 <__mulsi3>
 800e56c:	da800217 	ldw	r10,8(sp)
 800e570:	1585883a 	add	r2,r2,r22
 800e574:	d9c00317 	ldw	r7,12(sp)
 800e578:	5006d43a 	srli	r3,r10,16
 800e57c:	da000417 	ldw	r8,16(sp)
 800e580:	d9800517 	ldw	r6,20(sp)
 800e584:	1887883a 	add	r3,r3,r2
 800e588:	1d80022e 	bgeu	r3,r22,800e594 <__muldf3+0x2b8>
 800e58c:	00800074 	movhi	r2,1
 800e590:	a0a9883a 	add	r20,r20,r2
 800e594:	1804d43a 	srli	r2,r3,16
 800e598:	1806943a 	slli	r3,r3,16
 800e59c:	982cd43a 	srli	r22,r19,16
 800e5a0:	9d7fffcc 	andi	r21,r19,65535
 800e5a4:	e009883a 	mov	r4,fp
 800e5a8:	54ffffcc 	andi	r19,r10,65535
 800e5ac:	a80b883a 	mov	r5,r21
 800e5b0:	1ce7883a 	add	r19,r3,r19
 800e5b4:	d9800515 	stw	r6,20(sp)
 800e5b8:	da000415 	stw	r8,16(sp)
 800e5bc:	d9c00315 	stw	r7,12(sp)
 800e5c0:	1529883a 	add	r20,r2,r20
 800e5c4:	800ce440 	call	800ce44 <__mulsi3>
 800e5c8:	e00b883a 	mov	r5,fp
 800e5cc:	b009883a 	mov	r4,r22
 800e5d0:	d8800215 	stw	r2,8(sp)
 800e5d4:	800ce440 	call	800ce44 <__mulsi3>
 800e5d8:	8809883a 	mov	r4,r17
 800e5dc:	b00b883a 	mov	r5,r22
 800e5e0:	1039883a 	mov	fp,r2
 800e5e4:	800ce440 	call	800ce44 <__mulsi3>
 800e5e8:	8809883a 	mov	r4,r17
 800e5ec:	a80b883a 	mov	r5,r21
 800e5f0:	1023883a 	mov	r17,r2
 800e5f4:	800ce440 	call	800ce44 <__mulsi3>
 800e5f8:	d8c00217 	ldw	r3,8(sp)
 800e5fc:	1705883a 	add	r2,r2,fp
 800e600:	d9c00317 	ldw	r7,12(sp)
 800e604:	1808d43a 	srli	r4,r3,16
 800e608:	da000417 	ldw	r8,16(sp)
 800e60c:	d9800517 	ldw	r6,20(sp)
 800e610:	2089883a 	add	r4,r4,r2
 800e614:	94e5883a 	add	r18,r18,r19
 800e618:	2700022e 	bgeu	r4,fp,800e624 <__muldf3+0x348>
 800e61c:	00800074 	movhi	r2,1
 800e620:	88a3883a 	add	r17,r17,r2
 800e624:	2004d43a 	srli	r2,r4,16
 800e628:	2038943a 	slli	fp,r4,16
 800e62c:	18ffffcc 	andi	r3,r3,65535
 800e630:	b809883a 	mov	r4,r23
 800e634:	a80b883a 	mov	r5,r21
 800e638:	d9800415 	stw	r6,16(sp)
 800e63c:	da000315 	stw	r8,12(sp)
 800e640:	d9c00215 	stw	r7,8(sp)
 800e644:	e0f9883a 	add	fp,fp,r3
 800e648:	1463883a 	add	r17,r2,r17
 800e64c:	800ce440 	call	800ce44 <__mulsi3>
 800e650:	b80b883a 	mov	r5,r23
 800e654:	b009883a 	mov	r4,r22
 800e658:	102f883a 	mov	r23,r2
 800e65c:	800ce440 	call	800ce44 <__mulsi3>
 800e660:	b00b883a 	mov	r5,r22
 800e664:	8009883a 	mov	r4,r16
 800e668:	102d883a 	mov	r22,r2
 800e66c:	800ce440 	call	800ce44 <__mulsi3>
 800e670:	a80b883a 	mov	r5,r21
 800e674:	8009883a 	mov	r4,r16
 800e678:	1021883a 	mov	r16,r2
 800e67c:	800ce440 	call	800ce44 <__mulsi3>
 800e680:	b80ad43a 	srli	r5,r23,16
 800e684:	1585883a 	add	r2,r2,r22
 800e688:	d9c00217 	ldw	r7,8(sp)
 800e68c:	288b883a 	add	r5,r5,r2
 800e690:	da000317 	ldw	r8,12(sp)
 800e694:	d9800417 	ldw	r6,16(sp)
 800e698:	2d80022e 	bgeu	r5,r22,800e6a4 <__muldf3+0x3c8>
 800e69c:	00800074 	movhi	r2,1
 800e6a0:	80a1883a 	add	r16,r16,r2
 800e6a4:	2806943a 	slli	r3,r5,16
 800e6a8:	d8800017 	ldw	r2,0(sp)
 800e6ac:	bdffffcc 	andi	r23,r23,65535
 800e6b0:	1dc7883a 	add	r3,r3,r23
 800e6b4:	90ab883a 	add	r21,r18,r2
 800e6b8:	acd5803a 	cmpltu	r10,r21,r19
 800e6bc:	1d07883a 	add	r3,r3,r20
 800e6c0:	af2b883a 	add	r21,r21,fp
 800e6c4:	1a97883a 	add	r11,r3,r10
 800e6c8:	af09803a 	cmpltu	r4,r21,fp
 800e6cc:	2826d43a 	srli	r19,r5,16
 800e6d0:	5c53883a 	add	r9,r11,r17
 800e6d4:	4905883a 	add	r2,r9,r4
 800e6d8:	1d07803a 	cmpltu	r3,r3,r20
 800e6dc:	5a95803a 	cmpltu	r10,r11,r10
 800e6e0:	1a86b03a 	or	r3,r3,r10
 800e6e4:	1109803a 	cmpltu	r4,r2,r4
 800e6e8:	4c53803a 	cmpltu	r9,r9,r17
 800e6ec:	1ce7883a 	add	r19,r3,r19
 800e6f0:	4908b03a 	or	r4,r9,r4
 800e6f4:	a824927a 	slli	r18,r21,9
 800e6f8:	d8c00117 	ldw	r3,4(sp)
 800e6fc:	9927883a 	add	r19,r19,r4
 800e700:	9c27883a 	add	r19,r19,r16
 800e704:	9826927a 	slli	r19,r19,9
 800e708:	a82ad5fa 	srli	r21,r21,23
 800e70c:	100ad5fa 	srli	r5,r2,23
 800e710:	90e4b03a 	or	r18,r18,r3
 800e714:	1004927a 	slli	r2,r2,9
 800e718:	9024c03a 	cmpne	r18,r18,zero
 800e71c:	9564b03a 	or	r18,r18,r21
 800e720:	98c0402c 	andhi	r3,r19,256
 800e724:	90a4b03a 	or	r18,r18,r2
 800e728:	9966b03a 	or	r19,r19,r5
 800e72c:	1800b626 	beq	r3,zero,800ea08 <__muldf3+0x72c>
 800e730:	9006d07a 	srli	r3,r18,1
 800e734:	980497fa 	slli	r2,r19,31
 800e738:	9480004c 	andi	r18,r18,1
 800e73c:	9826d07a 	srli	r19,r19,1
 800e740:	1c86b03a 	or	r3,r3,r18
 800e744:	18a4b03a 	or	r18,r3,r2
 800e748:	3900ffc4 	addi	r4,r7,1023
 800e74c:	0100690e 	bge	zero,r4,800e8f4 <__muldf3+0x618>
 800e750:	908001cc 	andi	r2,r18,7
 800e754:	10000726 	beq	r2,zero,800e774 <__muldf3+0x498>
 800e758:	908003cc 	andi	r2,r18,15
 800e75c:	10800120 	cmpeqi	r2,r2,4
 800e760:	1000041e 	bne	r2,zero,800e774 <__muldf3+0x498>
 800e764:	90800104 	addi	r2,r18,4
 800e768:	14a5803a 	cmpltu	r18,r2,r18
 800e76c:	9ca7883a 	add	r19,r19,r18
 800e770:	1025883a 	mov	r18,r2
 800e774:	9880402c 	andhi	r2,r19,256
 800e778:	10000426 	beq	r2,zero,800e78c <__muldf3+0x4b0>
 800e77c:	00bfc034 	movhi	r2,65280
 800e780:	10bfffc4 	addi	r2,r2,-1
 800e784:	98a6703a 	and	r19,r19,r2
 800e788:	39010004 	addi	r4,r7,1024
 800e78c:	2081ffc8 	cmpgei	r2,r4,2047
 800e790:	103f381e 	bne	r2,zero,800e474 <__muldf3+0x198>
 800e794:	9804977a 	slli	r2,r19,29
 800e798:	9024d0fa 	srli	r18,r18,3
 800e79c:	9826927a 	slli	r19,r19,9
 800e7a0:	20c1ffcc 	andi	r3,r4,2047
 800e7a4:	14a4b03a 	or	r18,r2,r18
 800e7a8:	9826d33a 	srli	r19,r19,12
 800e7ac:	003f2006 	br	800e430 <__muldf3+0x154>
 800e7b0:	8722b03a 	or	r17,r16,fp
 800e7b4:	88004526 	beq	r17,zero,800e8cc <__muldf3+0x5f0>
 800e7b8:	da000015 	stw	r8,0(sp)
 800e7bc:	80008626 	beq	r16,zero,800e9d8 <__muldf3+0x6fc>
 800e7c0:	8009883a 	mov	r4,r16
 800e7c4:	800f5580 	call	800f558 <__clzsi2>
 800e7c8:	da000017 	ldw	r8,0(sp)
 800e7cc:	117ffd44 	addi	r5,r2,-11
 800e7d0:	01000744 	movi	r4,29
 800e7d4:	147ffe04 	addi	r17,r2,-8
 800e7d8:	2149c83a 	sub	r4,r4,r5
 800e7dc:	8460983a 	sll	r16,r16,r17
 800e7e0:	e108d83a 	srl	r4,fp,r4
 800e7e4:	e462983a 	sll	r17,fp,r17
 800e7e8:	2420b03a 	or	r16,r4,r16
 800e7ec:	4091c83a 	sub	r8,r8,r2
 800e7f0:	423f0344 	addi	r8,r8,-1011
 800e7f4:	0009883a 	mov	r4,zero
 800e7f8:	003ee706 	br	800e398 <__muldf3+0xbc>
 800e7fc:	9924b03a 	or	r18,r19,r4
 800e800:	90002d26 	beq	r18,zero,800e8b8 <__muldf3+0x5dc>
 800e804:	d9c00015 	stw	r7,0(sp)
 800e808:	98006826 	beq	r19,zero,800e9ac <__muldf3+0x6d0>
 800e80c:	9809883a 	mov	r4,r19
 800e810:	800f5580 	call	800f558 <__clzsi2>
 800e814:	d9c00017 	ldw	r7,0(sp)
 800e818:	113ffd44 	addi	r4,r2,-11
 800e81c:	00c00744 	movi	r3,29
 800e820:	14bffe04 	addi	r18,r2,-8
 800e824:	1907c83a 	sub	r3,r3,r4
 800e828:	9ca6983a 	sll	r19,r19,r18
 800e82c:	88c6d83a 	srl	r3,r17,r3
 800e830:	8ca4983a 	sll	r18,r17,r18
 800e834:	1ce6b03a 	or	r19,r3,r19
 800e838:	023f0344 	movi	r8,-1011
 800e83c:	4091c83a 	sub	r8,r8,r2
 800e840:	002b883a 	mov	r21,zero
 800e844:	002d883a 	mov	r22,zero
 800e848:	003ec206 	br	800e354 <__muldf3+0x78>
 800e84c:	9924b03a 	or	r18,r19,r4
 800e850:	9000141e 	bne	r18,zero,800e8a4 <__muldf3+0x5c8>
 800e854:	0027883a 	mov	r19,zero
 800e858:	05400204 	movi	r21,8
 800e85c:	0201ffc4 	movi	r8,2047
 800e860:	05800084 	movi	r22,2
 800e864:	003ebb06 	br	800e354 <__muldf3+0x78>
 800e868:	8722b03a 	or	r17,r16,fp
 800e86c:	4201ffc4 	addi	r8,r8,2047
 800e870:	8800081e 	bne	r17,zero,800e894 <__muldf3+0x5b8>
 800e874:	ad400094 	ori	r21,r21,2
 800e878:	0021883a 	mov	r16,zero
 800e87c:	01000084 	movi	r4,2
 800e880:	003ec506 	br	800e398 <__muldf3+0xbc>
 800e884:	b08000a0 	cmpeqi	r2,r22,2
 800e888:	a00d883a 	mov	r6,r20
 800e88c:	103ee126 	beq	r2,zero,800e414 <__muldf3+0x138>
 800e890:	003ef806 	br	800e474 <__muldf3+0x198>
 800e894:	ad4000d4 	ori	r21,r21,3
 800e898:	e023883a 	mov	r17,fp
 800e89c:	010000c4 	movi	r4,3
 800e8a0:	003ebd06 	br	800e398 <__muldf3+0xbc>
 800e8a4:	2025883a 	mov	r18,r4
 800e8a8:	05400304 	movi	r21,12
 800e8ac:	0201ffc4 	movi	r8,2047
 800e8b0:	058000c4 	movi	r22,3
 800e8b4:	003ea706 	br	800e354 <__muldf3+0x78>
 800e8b8:	0027883a 	mov	r19,zero
 800e8bc:	05400104 	movi	r21,4
 800e8c0:	0011883a 	mov	r8,zero
 800e8c4:	05800044 	movi	r22,1
 800e8c8:	003ea206 	br	800e354 <__muldf3+0x78>
 800e8cc:	ad400054 	ori	r21,r21,1
 800e8d0:	0021883a 	mov	r16,zero
 800e8d4:	01000044 	movi	r4,1
 800e8d8:	003eaf06 	br	800e398 <__muldf3+0xbc>
 800e8dc:	04c00434 	movhi	r19,16
 800e8e0:	000d883a 	mov	r6,zero
 800e8e4:	9cffffc4 	addi	r19,r19,-1
 800e8e8:	04bfffc4 	movi	r18,-1
 800e8ec:	00c1ffc4 	movi	r3,2047
 800e8f0:	003ecf06 	br	800e430 <__muldf3+0x154>
 800e8f4:	00800044 	movi	r2,1
 800e8f8:	1105c83a 	sub	r2,r2,r4
 800e8fc:	10c00e48 	cmpgei	r3,r2,57
 800e900:	183ec81e 	bne	r3,zero,800e424 <__muldf3+0x148>
 800e904:	10c00808 	cmpgei	r3,r2,32
 800e908:	1800411e 	bne	r3,zero,800ea10 <__muldf3+0x734>
 800e90c:	39c10784 	addi	r7,r7,1054
 800e910:	99c6983a 	sll	r3,r19,r7
 800e914:	9088d83a 	srl	r4,r18,r2
 800e918:	91ce983a 	sll	r7,r18,r7
 800e91c:	98a6d83a 	srl	r19,r19,r2
 800e920:	1904b03a 	or	r2,r3,r4
 800e924:	3824c03a 	cmpne	r18,r7,zero
 800e928:	1484b03a 	or	r2,r2,r18
 800e92c:	10c001cc 	andi	r3,r2,7
 800e930:	18000726 	beq	r3,zero,800e950 <__muldf3+0x674>
 800e934:	10c003cc 	andi	r3,r2,15
 800e938:	18c00120 	cmpeqi	r3,r3,4
 800e93c:	1800041e 	bne	r3,zero,800e950 <__muldf3+0x674>
 800e940:	10c00104 	addi	r3,r2,4
 800e944:	1885803a 	cmpltu	r2,r3,r2
 800e948:	98a7883a 	add	r19,r19,r2
 800e94c:	1805883a 	mov	r2,r3
 800e950:	98c0202c 	andhi	r3,r19,128
 800e954:	18004326 	beq	r3,zero,800ea64 <__muldf3+0x788>
 800e958:	00c00044 	movi	r3,1
 800e95c:	0027883a 	mov	r19,zero
 800e960:	0025883a 	mov	r18,zero
 800e964:	003eb206 	br	800e430 <__muldf3+0x154>
 800e968:	9880022c 	andhi	r2,r19,8
 800e96c:	10000926 	beq	r2,zero,800e994 <__muldf3+0x6b8>
 800e970:	8080022c 	andhi	r2,r16,8
 800e974:	1000071e 	bne	r2,zero,800e994 <__muldf3+0x6b8>
 800e978:	00800434 	movhi	r2,16
 800e97c:	84c00234 	orhi	r19,r16,8
 800e980:	10bfffc4 	addi	r2,r2,-1
 800e984:	98a6703a 	and	r19,r19,r2
 800e988:	b80d883a 	mov	r6,r23
 800e98c:	8825883a 	mov	r18,r17
 800e990:	003fd606 	br	800e8ec <__muldf3+0x610>
 800e994:	00800434 	movhi	r2,16
 800e998:	9cc00234 	orhi	r19,r19,8
 800e99c:	10bfffc4 	addi	r2,r2,-1
 800e9a0:	98a6703a 	and	r19,r19,r2
 800e9a4:	a00d883a 	mov	r6,r20
 800e9a8:	003fd006 	br	800e8ec <__muldf3+0x610>
 800e9ac:	800f5580 	call	800f558 <__clzsi2>
 800e9b0:	11000544 	addi	r4,r2,21
 800e9b4:	21400748 	cmpgei	r5,r4,29
 800e9b8:	1007883a 	mov	r3,r2
 800e9bc:	d9c00017 	ldw	r7,0(sp)
 800e9c0:	10800804 	addi	r2,r2,32
 800e9c4:	283f9526 	beq	r5,zero,800e81c <__muldf3+0x540>
 800e9c8:	18fffe04 	addi	r3,r3,-8
 800e9cc:	88e6983a 	sll	r19,r17,r3
 800e9d0:	0025883a 	mov	r18,zero
 800e9d4:	003f9806 	br	800e838 <__muldf3+0x55c>
 800e9d8:	e009883a 	mov	r4,fp
 800e9dc:	800f5580 	call	800f558 <__clzsi2>
 800e9e0:	11400544 	addi	r5,r2,21
 800e9e4:	29000748 	cmpgei	r4,r5,29
 800e9e8:	1007883a 	mov	r3,r2
 800e9ec:	da000017 	ldw	r8,0(sp)
 800e9f0:	10800804 	addi	r2,r2,32
 800e9f4:	203f7626 	beq	r4,zero,800e7d0 <__muldf3+0x4f4>
 800e9f8:	1c3ffe04 	addi	r16,r3,-8
 800e9fc:	e420983a 	sll	r16,fp,r16
 800ea00:	0023883a 	mov	r17,zero
 800ea04:	003f7906 	br	800e7ec <__muldf3+0x510>
 800ea08:	400f883a 	mov	r7,r8
 800ea0c:	003f4e06 	br	800e748 <__muldf3+0x46c>
 800ea10:	00fff844 	movi	r3,-31
 800ea14:	1907c83a 	sub	r3,r3,r4
 800ea18:	10800820 	cmpeqi	r2,r2,32
 800ea1c:	98c6d83a 	srl	r3,r19,r3
 800ea20:	1000031e 	bne	r2,zero,800ea30 <__muldf3+0x754>
 800ea24:	39c10f84 	addi	r7,r7,1086
 800ea28:	99e6983a 	sll	r19,r19,r7
 800ea2c:	94e4b03a 	or	r18,r18,r19
 800ea30:	9024c03a 	cmpne	r18,r18,zero
 800ea34:	90c4b03a 	or	r2,r18,r3
 800ea38:	148001cc 	andi	r18,r2,7
 800ea3c:	9000051e 	bne	r18,zero,800ea54 <__muldf3+0x778>
 800ea40:	0027883a 	mov	r19,zero
 800ea44:	1004d0fa 	srli	r2,r2,3
 800ea48:	0007883a 	mov	r3,zero
 800ea4c:	14a4b03a 	or	r18,r2,r18
 800ea50:	003e7706 	br	800e430 <__muldf3+0x154>
 800ea54:	10c003cc 	andi	r3,r2,15
 800ea58:	18c00118 	cmpnei	r3,r3,4
 800ea5c:	0027883a 	mov	r19,zero
 800ea60:	183fb71e 	bne	r3,zero,800e940 <__muldf3+0x664>
 800ea64:	9806927a 	slli	r3,r19,9
 800ea68:	9824977a 	slli	r18,r19,29
 800ea6c:	1826d33a 	srli	r19,r3,12
 800ea70:	003ff406 	br	800ea44 <__muldf3+0x768>
 800ea74:	00800434 	movhi	r2,16
 800ea78:	9cc00234 	orhi	r19,r19,8
 800ea7c:	10bfffc4 	addi	r2,r2,-1
 800ea80:	98a6703a 	and	r19,r19,r2
 800ea84:	003f9906 	br	800e8ec <__muldf3+0x610>

0800ea88 <__subdf3>:
 800ea88:	00800434 	movhi	r2,16
 800ea8c:	3810d53a 	srli	r8,r7,20
 800ea90:	10bfffc4 	addi	r2,r2,-1
 800ea94:	2806d53a 	srli	r3,r5,20
 800ea98:	2892703a 	and	r9,r5,r2
 800ea9c:	3884703a 	and	r2,r7,r2
 800eaa0:	280ad7fa 	srli	r5,r5,31
 800eaa4:	481290fa 	slli	r9,r9,3
 800eaa8:	2018d77a 	srli	r12,r4,29
 800eaac:	100490fa 	slli	r2,r2,3
 800eab0:	3016d77a 	srli	r11,r6,29
 800eab4:	defffb04 	addi	sp,sp,-20
 800eab8:	4201ffcc 	andi	r8,r8,2047
 800eabc:	dc800215 	stw	r18,8(sp)
 800eac0:	dc400115 	stw	r17,4(sp)
 800eac4:	1c81ffcc 	andi	r18,r3,2047
 800eac8:	dfc00415 	stw	ra,16(sp)
 800eacc:	dcc00315 	stw	r19,12(sp)
 800ead0:	dc000015 	stw	r16,0(sp)
 800ead4:	4281ffd8 	cmpnei	r10,r8,2047
 800ead8:	2823883a 	mov	r17,r5
 800eadc:	201c90fa 	slli	r14,r4,3
 800eae0:	380ed7fa 	srli	r7,r7,31
 800eae4:	301a90fa 	slli	r13,r6,3
 800eae8:	29403fcc 	andi	r5,r5,255
 800eaec:	6252b03a 	or	r9,r12,r9
 800eaf0:	589eb03a 	or	r15,r11,r2
 800eaf4:	9207c83a 	sub	r3,r18,r8
 800eaf8:	50006826 	beq	r10,zero,800ec9c <__subdf3+0x214>
 800eafc:	3ac0005c 	xori	r11,r7,1
 800eb00:	2ac07326 	beq	r5,r11,800ecd0 <__subdf3+0x248>
 800eb04:	00c0590e 	bge	zero,r3,800ec6c <__subdf3+0x1e4>
 800eb08:	4000691e 	bne	r8,zero,800ecb0 <__subdf3+0x228>
 800eb0c:	7b44b03a 	or	r2,r15,r13
 800eb10:	1000fb26 	beq	r2,zero,800ef00 <__subdf3+0x478>
 800eb14:	18bfffc4 	addi	r2,r3,-1
 800eb18:	10019126 	beq	r2,zero,800f160 <__subdf3+0x6d8>
 800eb1c:	18c1ffd8 	cmpnei	r3,r3,2047
 800eb20:	1800c326 	beq	r3,zero,800ee30 <__subdf3+0x3a8>
 800eb24:	1007883a 	mov	r3,r2
 800eb28:	18800e48 	cmpgei	r2,r3,57
 800eb2c:	1000651e 	bne	r2,zero,800ecc4 <__subdf3+0x23c>
 800eb30:	18800808 	cmpgei	r2,r3,32
 800eb34:	1001331e 	bne	r2,zero,800f004 <__subdf3+0x57c>
 800eb38:	00800804 	movi	r2,32
 800eb3c:	10c5c83a 	sub	r2,r2,r3
 800eb40:	78a0983a 	sll	r16,r15,r2
 800eb44:	68c8d83a 	srl	r4,r13,r3
 800eb48:	689a983a 	sll	r13,r13,r2
 800eb4c:	78c4d83a 	srl	r2,r15,r3
 800eb50:	8120b03a 	or	r16,r16,r4
 800eb54:	681ac03a 	cmpne	r13,r13,zero
 800eb58:	8360b03a 	or	r16,r16,r13
 800eb5c:	4893c83a 	sub	r9,r9,r2
 800eb60:	7421c83a 	sub	r16,r14,r16
 800eb64:	7409803a 	cmpltu	r4,r14,r16
 800eb68:	4909c83a 	sub	r4,r9,r4
 800eb6c:	2080202c 	andhi	r2,r4,128
 800eb70:	10009326 	beq	r2,zero,800edc0 <__subdf3+0x338>
 800eb74:	04c02034 	movhi	r19,128
 800eb78:	9cffffc4 	addi	r19,r19,-1
 800eb7c:	24e6703a 	and	r19,r4,r19
 800eb80:	9800b926 	beq	r19,zero,800ee68 <__subdf3+0x3e0>
 800eb84:	9809883a 	mov	r4,r19
 800eb88:	800f5580 	call	800f558 <__clzsi2>
 800eb8c:	10fffe04 	addi	r3,r2,-8
 800eb90:	01000804 	movi	r4,32
 800eb94:	20c9c83a 	sub	r4,r4,r3
 800eb98:	8108d83a 	srl	r4,r16,r4
 800eb9c:	98e6983a 	sll	r19,r19,r3
 800eba0:	80e0983a 	sll	r16,r16,r3
 800eba4:	24c8b03a 	or	r4,r4,r19
 800eba8:	1c80b816 	blt	r3,r18,800ee8c <__subdf3+0x404>
 800ebac:	1c87c83a 	sub	r3,r3,r18
 800ebb0:	19400044 	addi	r5,r3,1
 800ebb4:	28800808 	cmpgei	r2,r5,32
 800ebb8:	1000751e 	bne	r2,zero,800ed90 <__subdf3+0x308>
 800ebbc:	00800804 	movi	r2,32
 800ebc0:	1145c83a 	sub	r2,r2,r5
 800ebc4:	8146d83a 	srl	r3,r16,r5
 800ebc8:	80a0983a 	sll	r16,r16,r2
 800ebcc:	2084983a 	sll	r2,r4,r2
 800ebd0:	2148d83a 	srl	r4,r4,r5
 800ebd4:	8020c03a 	cmpne	r16,r16,zero
 800ebd8:	10c4b03a 	or	r2,r2,r3
 800ebdc:	1420b03a 	or	r16,r2,r16
 800ebe0:	0025883a 	mov	r18,zero
 800ebe4:	808001cc 	andi	r2,r16,7
 800ebe8:	10000726 	beq	r2,zero,800ec08 <__subdf3+0x180>
 800ebec:	808003cc 	andi	r2,r16,15
 800ebf0:	10800120 	cmpeqi	r2,r2,4
 800ebf4:	1000041e 	bne	r2,zero,800ec08 <__subdf3+0x180>
 800ebf8:	80800104 	addi	r2,r16,4
 800ebfc:	1421803a 	cmpltu	r16,r2,r16
 800ec00:	2409883a 	add	r4,r4,r16
 800ec04:	1021883a 	mov	r16,r2
 800ec08:	2080202c 	andhi	r2,r4,128
 800ec0c:	10006e26 	beq	r2,zero,800edc8 <__subdf3+0x340>
 800ec10:	90c00044 	addi	r3,r18,1
 800ec14:	1881ffe0 	cmpeqi	r2,r3,2047
 800ec18:	18c1ffcc 	andi	r3,r3,2047
 800ec1c:	1000801e 	bne	r2,zero,800ee20 <__subdf3+0x398>
 800ec20:	00bfe034 	movhi	r2,65408
 800ec24:	10bfffc4 	addi	r2,r2,-1
 800ec28:	2088703a 	and	r4,r4,r2
 800ec2c:	2004977a 	slli	r2,r4,29
 800ec30:	2008927a 	slli	r4,r4,9
 800ec34:	8020d0fa 	srli	r16,r16,3
 800ec38:	2008d33a 	srli	r4,r4,12
 800ec3c:	1404b03a 	or	r2,r2,r16
 800ec40:	1806953a 	slli	r3,r3,20
 800ec44:	882297fa 	slli	r17,r17,31
 800ec48:	1906b03a 	or	r3,r3,r4
 800ec4c:	1c46b03a 	or	r3,r3,r17
 800ec50:	dfc00417 	ldw	ra,16(sp)
 800ec54:	dcc00317 	ldw	r19,12(sp)
 800ec58:	dc800217 	ldw	r18,8(sp)
 800ec5c:	dc400117 	ldw	r17,4(sp)
 800ec60:	dc000017 	ldw	r16,0(sp)
 800ec64:	dec00504 	addi	sp,sp,20
 800ec68:	f800283a 	ret
 800ec6c:	18002c26 	beq	r3,zero,800ed20 <__subdf3+0x298>
 800ec70:	4487c83a 	sub	r3,r8,r18
 800ec74:	5823883a 	mov	r17,r11
 800ec78:	9000bb1e 	bne	r18,zero,800ef68 <__subdf3+0x4e0>
 800ec7c:	4b84b03a 	or	r2,r9,r14
 800ec80:	10011726 	beq	r2,zero,800f0e0 <__subdf3+0x658>
 800ec84:	18bfffc4 	addi	r2,r3,-1
 800ec88:	10016326 	beq	r2,zero,800f218 <__subdf3+0x790>
 800ec8c:	18c1ffd8 	cmpnei	r3,r3,2047
 800ec90:	18012c26 	beq	r3,zero,800f144 <__subdf3+0x6bc>
 800ec94:	1007883a 	mov	r3,r2
 800ec98:	0000b506 	br	800ef70 <__subdf3+0x4e8>
 800ec9c:	7b44b03a 	or	r2,r15,r13
 800eca0:	103f9626 	beq	r2,zero,800eafc <__subdf3+0x74>
 800eca4:	3ac03fcc 	andi	r11,r7,255
 800eca8:	29c07d26 	beq	r5,r7,800eea0 <__subdf3+0x418>
 800ecac:	00ffef0e 	bge	zero,r3,800ec6c <__subdf3+0x1e4>
 800ecb0:	9081ffd8 	cmpnei	r2,r18,2047
 800ecb4:	10005e26 	beq	r2,zero,800ee30 <__subdf3+0x3a8>
 800ecb8:	18800e48 	cmpgei	r2,r3,57
 800ecbc:	7bc02034 	orhi	r15,r15,128
 800ecc0:	103f9b26 	beq	r2,zero,800eb30 <__subdf3+0xa8>
 800ecc4:	7b60b03a 	or	r16,r15,r13
 800ecc8:	8020c03a 	cmpne	r16,r16,zero
 800eccc:	003fa406 	br	800eb60 <__subdf3+0xd8>
 800ecd0:	00c0730e 	bge	zero,r3,800eea0 <__subdf3+0x418>
 800ecd4:	40002626 	beq	r8,zero,800ed70 <__subdf3+0x2e8>
 800ecd8:	9081ffd8 	cmpnei	r2,r18,2047
 800ecdc:	10005426 	beq	r2,zero,800ee30 <__subdf3+0x3a8>
 800ece0:	7bc02034 	orhi	r15,r15,128
 800ece4:	18800e48 	cmpgei	r2,r3,57
 800ece8:	1000431e 	bne	r2,zero,800edf8 <__subdf3+0x370>
 800ecec:	18800808 	cmpgei	r2,r3,32
 800ecf0:	1000de26 	beq	r2,zero,800f06c <__subdf3+0x5e4>
 800ecf4:	1c3ff804 	addi	r16,r3,-32
 800ecf8:	18800820 	cmpeqi	r2,r3,32
 800ecfc:	7c0ad83a 	srl	r5,r15,r16
 800ed00:	1000041e 	bne	r2,zero,800ed14 <__subdf3+0x28c>
 800ed04:	00801004 	movi	r2,64
 800ed08:	10c5c83a 	sub	r2,r2,r3
 800ed0c:	7884983a 	sll	r2,r15,r2
 800ed10:	689ab03a 	or	r13,r13,r2
 800ed14:	6820c03a 	cmpne	r16,r13,zero
 800ed18:	8160b03a 	or	r16,r16,r5
 800ed1c:	00003806 	br	800ee00 <__subdf3+0x378>
 800ed20:	90800044 	addi	r2,r18,1
 800ed24:	1081ff8c 	andi	r2,r2,2046
 800ed28:	1000a01e 	bne	r2,zero,800efac <__subdf3+0x524>
 800ed2c:	4b8ab03a 	or	r5,r9,r14
 800ed30:	7b44b03a 	or	r2,r15,r13
 800ed34:	9000f11e 	bne	r18,zero,800f0fc <__subdf3+0x674>
 800ed38:	28012e26 	beq	r5,zero,800f1f4 <__subdf3+0x76c>
 800ed3c:	10010e26 	beq	r2,zero,800f178 <__subdf3+0x6f0>
 800ed40:	7361c83a 	sub	r16,r14,r13
 800ed44:	7405803a 	cmpltu	r2,r14,r16
 800ed48:	4bc9c83a 	sub	r4,r9,r15
 800ed4c:	2089c83a 	sub	r4,r4,r2
 800ed50:	2080202c 	andhi	r2,r4,128
 800ed54:	10016d26 	beq	r2,zero,800f30c <__subdf3+0x884>
 800ed58:	6ba1c83a 	sub	r16,r13,r14
 800ed5c:	7a49c83a 	sub	r4,r15,r9
 800ed60:	6c1b803a 	cmpltu	r13,r13,r16
 800ed64:	2349c83a 	sub	r4,r4,r13
 800ed68:	5823883a 	mov	r17,r11
 800ed6c:	003f9d06 	br	800ebe4 <__subdf3+0x15c>
 800ed70:	7b44b03a 	or	r2,r15,r13
 800ed74:	10006226 	beq	r2,zero,800ef00 <__subdf3+0x478>
 800ed78:	18bfffc4 	addi	r2,r3,-1
 800ed7c:	1000e926 	beq	r2,zero,800f124 <__subdf3+0x69c>
 800ed80:	18c1ffd8 	cmpnei	r3,r3,2047
 800ed84:	18012a26 	beq	r3,zero,800f230 <__subdf3+0x7a8>
 800ed88:	1007883a 	mov	r3,r2
 800ed8c:	003fd506 	br	800ece4 <__subdf3+0x25c>
 800ed90:	18fff844 	addi	r3,r3,-31
 800ed94:	28800820 	cmpeqi	r2,r5,32
 800ed98:	20c6d83a 	srl	r3,r4,r3
 800ed9c:	1000041e 	bne	r2,zero,800edb0 <__subdf3+0x328>
 800eda0:	00801004 	movi	r2,64
 800eda4:	114bc83a 	sub	r5,r2,r5
 800eda8:	2148983a 	sll	r4,r4,r5
 800edac:	8120b03a 	or	r16,r16,r4
 800edb0:	8020c03a 	cmpne	r16,r16,zero
 800edb4:	80e0b03a 	or	r16,r16,r3
 800edb8:	0009883a 	mov	r4,zero
 800edbc:	0025883a 	mov	r18,zero
 800edc0:	808001cc 	andi	r2,r16,7
 800edc4:	103f891e 	bne	r2,zero,800ebec <__subdf3+0x164>
 800edc8:	8020d0fa 	srli	r16,r16,3
 800edcc:	2004977a 	slli	r2,r4,29
 800edd0:	2012d0fa 	srli	r9,r4,3
 800edd4:	9007883a 	mov	r3,r18
 800edd8:	8084b03a 	or	r2,r16,r2
 800eddc:	1901ffe0 	cmpeqi	r4,r3,2047
 800ede0:	2000191e 	bne	r4,zero,800ee48 <__subdf3+0x3c0>
 800ede4:	01000434 	movhi	r4,16
 800ede8:	213fffc4 	addi	r4,r4,-1
 800edec:	4908703a 	and	r4,r9,r4
 800edf0:	18c1ffcc 	andi	r3,r3,2047
 800edf4:	003f9206 	br	800ec40 <__subdf3+0x1b8>
 800edf8:	7b60b03a 	or	r16,r15,r13
 800edfc:	8020c03a 	cmpne	r16,r16,zero
 800ee00:	83a1883a 	add	r16,r16,r14
 800ee04:	8389803a 	cmpltu	r4,r16,r14
 800ee08:	2249883a 	add	r4,r4,r9
 800ee0c:	2080202c 	andhi	r2,r4,128
 800ee10:	103feb26 	beq	r2,zero,800edc0 <__subdf3+0x338>
 800ee14:	94800044 	addi	r18,r18,1
 800ee18:	9081ffe0 	cmpeqi	r2,r18,2047
 800ee1c:	10006f26 	beq	r2,zero,800efdc <__subdf3+0x554>
 800ee20:	00c1ffc4 	movi	r3,2047
 800ee24:	0009883a 	mov	r4,zero
 800ee28:	0005883a 	mov	r2,zero
 800ee2c:	003f8406 	br	800ec40 <__subdf3+0x1b8>
 800ee30:	4806977a 	slli	r3,r9,29
 800ee34:	00880034 	movhi	r2,8192
 800ee38:	10bfffc4 	addi	r2,r2,-1
 800ee3c:	4812d0fa 	srli	r9,r9,3
 800ee40:	2088703a 	and	r4,r4,r2
 800ee44:	20c4b03a 	or	r2,r4,r3
 800ee48:	4886b03a 	or	r3,r9,r2
 800ee4c:	18013726 	beq	r3,zero,800f32c <__subdf3+0x8a4>
 800ee50:	00c00434 	movhi	r3,16
 800ee54:	18ffffc4 	addi	r3,r3,-1
 800ee58:	49000234 	orhi	r4,r9,8
 800ee5c:	20c8703a 	and	r4,r4,r3
 800ee60:	00c1ffc4 	movi	r3,2047
 800ee64:	003f7606 	br	800ec40 <__subdf3+0x1b8>
 800ee68:	8009883a 	mov	r4,r16
 800ee6c:	800f5580 	call	800f558 <__clzsi2>
 800ee70:	10c00604 	addi	r3,r2,24
 800ee74:	19000808 	cmpgei	r4,r3,32
 800ee78:	203f4526 	beq	r4,zero,800eb90 <__subdf3+0x108>
 800ee7c:	113ffe04 	addi	r4,r2,-8
 800ee80:	8108983a 	sll	r4,r16,r4
 800ee84:	0021883a 	mov	r16,zero
 800ee88:	1cbf480e 	bge	r3,r18,800ebac <__subdf3+0x124>
 800ee8c:	00bfe034 	movhi	r2,65408
 800ee90:	10bfffc4 	addi	r2,r2,-1
 800ee94:	90e5c83a 	sub	r18,r18,r3
 800ee98:	2088703a 	and	r4,r4,r2
 800ee9c:	003f5106 	br	800ebe4 <__subdf3+0x15c>
 800eea0:	18001e26 	beq	r3,zero,800ef1c <__subdf3+0x494>
 800eea4:	4487c83a 	sub	r3,r8,r18
 800eea8:	90006826 	beq	r18,zero,800f04c <__subdf3+0x5c4>
 800eeac:	5000a526 	beq	r10,zero,800f144 <__subdf3+0x6bc>
 800eeb0:	4a402034 	orhi	r9,r9,128
 800eeb4:	18800e48 	cmpgei	r2,r3,57
 800eeb8:	1000b61e 	bne	r2,zero,800f194 <__subdf3+0x70c>
 800eebc:	18800808 	cmpgei	r2,r3,32
 800eec0:	1001021e 	bne	r2,zero,800f2cc <__subdf3+0x844>
 800eec4:	00800804 	movi	r2,32
 800eec8:	10c5c83a 	sub	r2,r2,r3
 800eecc:	48a0983a 	sll	r16,r9,r2
 800eed0:	70c8d83a 	srl	r4,r14,r3
 800eed4:	7084983a 	sll	r2,r14,r2
 800eed8:	48d2d83a 	srl	r9,r9,r3
 800eedc:	8120b03a 	or	r16,r16,r4
 800eee0:	1004c03a 	cmpne	r2,r2,zero
 800eee4:	80a0b03a 	or	r16,r16,r2
 800eee8:	7a5f883a 	add	r15,r15,r9
 800eeec:	8361883a 	add	r16,r16,r13
 800eef0:	8349803a 	cmpltu	r4,r16,r13
 800eef4:	23c9883a 	add	r4,r4,r15
 800eef8:	4025883a 	mov	r18,r8
 800eefc:	003fc306 	br	800ee0c <__subdf3+0x384>
 800ef00:	480a977a 	slli	r5,r9,29
 800ef04:	00880034 	movhi	r2,8192
 800ef08:	10bfffc4 	addi	r2,r2,-1
 800ef0c:	2088703a 	and	r4,r4,r2
 800ef10:	4812d0fa 	srli	r9,r9,3
 800ef14:	2144b03a 	or	r2,r4,r5
 800ef18:	003fb006 	br	800eddc <__subdf3+0x354>
 800ef1c:	90800044 	addi	r2,r18,1
 800ef20:	1141ff8c 	andi	r5,r2,2046
 800ef24:	28005c1e 	bne	r5,zero,800f098 <__subdf3+0x610>
 800ef28:	4b84b03a 	or	r2,r9,r14
 800ef2c:	9000a71e 	bne	r18,zero,800f1cc <__subdf3+0x744>
 800ef30:	1000df26 	beq	r2,zero,800f2b0 <__subdf3+0x828>
 800ef34:	7b44b03a 	or	r2,r15,r13
 800ef38:	10008f26 	beq	r2,zero,800f178 <__subdf3+0x6f0>
 800ef3c:	7361883a 	add	r16,r14,r13
 800ef40:	4bc9883a 	add	r4,r9,r15
 800ef44:	839d803a 	cmpltu	r14,r16,r14
 800ef48:	2389883a 	add	r4,r4,r14
 800ef4c:	2080202c 	andhi	r2,r4,128
 800ef50:	103f9b26 	beq	r2,zero,800edc0 <__subdf3+0x338>
 800ef54:	00bfe034 	movhi	r2,65408
 800ef58:	10bfffc4 	addi	r2,r2,-1
 800ef5c:	2088703a 	and	r4,r4,r2
 800ef60:	04800044 	movi	r18,1
 800ef64:	003f9606 	br	800edc0 <__subdf3+0x338>
 800ef68:	50007626 	beq	r10,zero,800f144 <__subdf3+0x6bc>
 800ef6c:	4a402034 	orhi	r9,r9,128
 800ef70:	18800e48 	cmpgei	r2,r3,57
 800ef74:	10002e1e 	bne	r2,zero,800f030 <__subdf3+0x5a8>
 800ef78:	18800808 	cmpgei	r2,r3,32
 800ef7c:	1000881e 	bne	r2,zero,800f1a0 <__subdf3+0x718>
 800ef80:	00800804 	movi	r2,32
 800ef84:	10c5c83a 	sub	r2,r2,r3
 800ef88:	48a0983a 	sll	r16,r9,r2
 800ef8c:	70c8d83a 	srl	r4,r14,r3
 800ef90:	709c983a 	sll	r14,r14,r2
 800ef94:	48d2d83a 	srl	r9,r9,r3
 800ef98:	8120b03a 	or	r16,r16,r4
 800ef9c:	701cc03a 	cmpne	r14,r14,zero
 800efa0:	83a0b03a 	or	r16,r16,r14
 800efa4:	7a5fc83a 	sub	r15,r15,r9
 800efa8:	00002306 	br	800f038 <__subdf3+0x5b0>
 800efac:	7361c83a 	sub	r16,r14,r13
 800efb0:	4be7c83a 	sub	r19,r9,r15
 800efb4:	7409803a 	cmpltu	r4,r14,r16
 800efb8:	9927c83a 	sub	r19,r19,r4
 800efbc:	9880202c 	andhi	r2,r19,128
 800efc0:	1000411e 	bne	r2,zero,800f0c8 <__subdf3+0x640>
 800efc4:	84c4b03a 	or	r2,r16,r19
 800efc8:	103eed1e 	bne	r2,zero,800eb80 <__subdf3+0xf8>
 800efcc:	0013883a 	mov	r9,zero
 800efd0:	0023883a 	mov	r17,zero
 800efd4:	003f8306 	br	800ede4 <__subdf3+0x35c>
 800efd8:	04800084 	movi	r18,2
 800efdc:	00bfe034 	movhi	r2,65408
 800efe0:	10bfffc4 	addi	r2,r2,-1
 800efe4:	8006d07a 	srli	r3,r16,1
 800efe8:	2088703a 	and	r4,r4,r2
 800efec:	200497fa 	slli	r2,r4,31
 800eff0:	8400004c 	andi	r16,r16,1
 800eff4:	1c20b03a 	or	r16,r3,r16
 800eff8:	2008d07a 	srli	r4,r4,1
 800effc:	1420b03a 	or	r16,r2,r16
 800f000:	003ef806 	br	800ebe4 <__subdf3+0x15c>
 800f004:	1c3ff804 	addi	r16,r3,-32
 800f008:	18800820 	cmpeqi	r2,r3,32
 800f00c:	7c0ad83a 	srl	r5,r15,r16
 800f010:	1000041e 	bne	r2,zero,800f024 <__subdf3+0x59c>
 800f014:	00801004 	movi	r2,64
 800f018:	10c5c83a 	sub	r2,r2,r3
 800f01c:	7884983a 	sll	r2,r15,r2
 800f020:	689ab03a 	or	r13,r13,r2
 800f024:	6820c03a 	cmpne	r16,r13,zero
 800f028:	8160b03a 	or	r16,r16,r5
 800f02c:	003ecc06 	br	800eb60 <__subdf3+0xd8>
 800f030:	4b92b03a 	or	r9,r9,r14
 800f034:	4820c03a 	cmpne	r16,r9,zero
 800f038:	6c21c83a 	sub	r16,r13,r16
 800f03c:	6c09803a 	cmpltu	r4,r13,r16
 800f040:	7909c83a 	sub	r4,r15,r4
 800f044:	4025883a 	mov	r18,r8
 800f048:	003ec806 	br	800eb6c <__subdf3+0xe4>
 800f04c:	4b84b03a 	or	r2,r9,r14
 800f050:	10007e26 	beq	r2,zero,800f24c <__subdf3+0x7c4>
 800f054:	18bfffc4 	addi	r2,r3,-1
 800f058:	1000a726 	beq	r2,zero,800f2f8 <__subdf3+0x870>
 800f05c:	18c1ffd8 	cmpnei	r3,r3,2047
 800f060:	18003826 	beq	r3,zero,800f144 <__subdf3+0x6bc>
 800f064:	1007883a 	mov	r3,r2
 800f068:	003f9206 	br	800eeb4 <__subdf3+0x42c>
 800f06c:	00800804 	movi	r2,32
 800f070:	10c5c83a 	sub	r2,r2,r3
 800f074:	78a0983a 	sll	r16,r15,r2
 800f078:	68c8d83a 	srl	r4,r13,r3
 800f07c:	689a983a 	sll	r13,r13,r2
 800f080:	78c4d83a 	srl	r2,r15,r3
 800f084:	8120b03a 	or	r16,r16,r4
 800f088:	681ac03a 	cmpne	r13,r13,zero
 800f08c:	8360b03a 	or	r16,r16,r13
 800f090:	4893883a 	add	r9,r9,r2
 800f094:	003f5a06 	br	800ee00 <__subdf3+0x378>
 800f098:	10c1ffe0 	cmpeqi	r3,r2,2047
 800f09c:	183f601e 	bne	r3,zero,800ee20 <__subdf3+0x398>
 800f0a0:	735b883a 	add	r13,r14,r13
 800f0a4:	6b9d803a 	cmpltu	r14,r13,r14
 800f0a8:	4bc9883a 	add	r4,r9,r15
 800f0ac:	2389883a 	add	r4,r4,r14
 800f0b0:	202097fa 	slli	r16,r4,31
 800f0b4:	681ad07a 	srli	r13,r13,1
 800f0b8:	2008d07a 	srli	r4,r4,1
 800f0bc:	1025883a 	mov	r18,r2
 800f0c0:	8360b03a 	or	r16,r16,r13
 800f0c4:	003f3e06 	br	800edc0 <__subdf3+0x338>
 800f0c8:	6ba1c83a 	sub	r16,r13,r14
 800f0cc:	7a49c83a 	sub	r4,r15,r9
 800f0d0:	6c1b803a 	cmpltu	r13,r13,r16
 800f0d4:	2367c83a 	sub	r19,r4,r13
 800f0d8:	5823883a 	mov	r17,r11
 800f0dc:	003ea806 	br	800eb80 <__subdf3+0xf8>
 800f0e0:	7808977a 	slli	r4,r15,29
 800f0e4:	00880034 	movhi	r2,8192
 800f0e8:	10bfffc4 	addi	r2,r2,-1
 800f0ec:	308c703a 	and	r6,r6,r2
 800f0f0:	7812d0fa 	srli	r9,r15,3
 800f0f4:	3104b03a 	or	r2,r6,r4
 800f0f8:	003f3806 	br	800eddc <__subdf3+0x354>
 800f0fc:	28005a1e 	bne	r5,zero,800f268 <__subdf3+0x7e0>
 800f100:	10008526 	beq	r2,zero,800f318 <__subdf3+0x890>
 800f104:	7806977a 	slli	r3,r15,29
 800f108:	00880034 	movhi	r2,8192
 800f10c:	10bfffc4 	addi	r2,r2,-1
 800f110:	3084703a 	and	r2,r6,r2
 800f114:	7812d0fa 	srli	r9,r15,3
 800f118:	10c4b03a 	or	r2,r2,r3
 800f11c:	5823883a 	mov	r17,r11
 800f120:	003f4906 	br	800ee48 <__subdf3+0x3c0>
 800f124:	7361883a 	add	r16,r14,r13
 800f128:	4bc9883a 	add	r4,r9,r15
 800f12c:	839d803a 	cmpltu	r14,r16,r14
 800f130:	2389883a 	add	r4,r4,r14
 800f134:	2080202c 	andhi	r2,r4,128
 800f138:	103fa71e 	bne	r2,zero,800efd8 <__subdf3+0x550>
 800f13c:	04800044 	movi	r18,1
 800f140:	003f1f06 	br	800edc0 <__subdf3+0x338>
 800f144:	7806977a 	slli	r3,r15,29
 800f148:	00880034 	movhi	r2,8192
 800f14c:	10bfffc4 	addi	r2,r2,-1
 800f150:	3084703a 	and	r2,r6,r2
 800f154:	7812d0fa 	srli	r9,r15,3
 800f158:	10c4b03a 	or	r2,r2,r3
 800f15c:	003f3a06 	br	800ee48 <__subdf3+0x3c0>
 800f160:	7361c83a 	sub	r16,r14,r13
 800f164:	4bc9c83a 	sub	r4,r9,r15
 800f168:	741d803a 	cmpltu	r14,r14,r16
 800f16c:	2389c83a 	sub	r4,r4,r14
 800f170:	04800044 	movi	r18,1
 800f174:	003e7d06 	br	800eb6c <__subdf3+0xe4>
 800f178:	480a977a 	slli	r5,r9,29
 800f17c:	00880034 	movhi	r2,8192
 800f180:	10bfffc4 	addi	r2,r2,-1
 800f184:	2084703a 	and	r2,r4,r2
 800f188:	4812d0fa 	srli	r9,r9,3
 800f18c:	1144b03a 	or	r2,r2,r5
 800f190:	003f1406 	br	800ede4 <__subdf3+0x35c>
 800f194:	4b92b03a 	or	r9,r9,r14
 800f198:	4820c03a 	cmpne	r16,r9,zero
 800f19c:	003f5306 	br	800eeec <__subdf3+0x464>
 800f1a0:	1c3ff804 	addi	r16,r3,-32
 800f1a4:	19000820 	cmpeqi	r4,r3,32
 800f1a8:	4c04d83a 	srl	r2,r9,r16
 800f1ac:	2000041e 	bne	r4,zero,800f1c0 <__subdf3+0x738>
 800f1b0:	01001004 	movi	r4,64
 800f1b4:	20c7c83a 	sub	r3,r4,r3
 800f1b8:	48d2983a 	sll	r9,r9,r3
 800f1bc:	725cb03a 	or	r14,r14,r9
 800f1c0:	7020c03a 	cmpne	r16,r14,zero
 800f1c4:	80a0b03a 	or	r16,r16,r2
 800f1c8:	003f9b06 	br	800f038 <__subdf3+0x5b0>
 800f1cc:	103fdd26 	beq	r2,zero,800f144 <__subdf3+0x6bc>
 800f1d0:	7b5ab03a 	or	r13,r15,r13
 800f1d4:	480a977a 	slli	r5,r9,29
 800f1d8:	4812d0fa 	srli	r9,r9,3
 800f1dc:	6800251e 	bne	r13,zero,800f274 <__subdf3+0x7ec>
 800f1e0:	00880034 	movhi	r2,8192
 800f1e4:	10bfffc4 	addi	r2,r2,-1
 800f1e8:	2084703a 	and	r2,r4,r2
 800f1ec:	1144b03a 	or	r2,r2,r5
 800f1f0:	003f1506 	br	800ee48 <__subdf3+0x3c0>
 800f1f4:	103f7526 	beq	r2,zero,800efcc <__subdf3+0x544>
 800f1f8:	7808977a 	slli	r4,r15,29
 800f1fc:	00880034 	movhi	r2,8192
 800f200:	10bfffc4 	addi	r2,r2,-1
 800f204:	3084703a 	and	r2,r6,r2
 800f208:	7812d0fa 	srli	r9,r15,3
 800f20c:	1104b03a 	or	r2,r2,r4
 800f210:	5823883a 	mov	r17,r11
 800f214:	003ef306 	br	800ede4 <__subdf3+0x35c>
 800f218:	6ba1c83a 	sub	r16,r13,r14
 800f21c:	7a49c83a 	sub	r4,r15,r9
 800f220:	6c1b803a 	cmpltu	r13,r13,r16
 800f224:	2349c83a 	sub	r4,r4,r13
 800f228:	04800044 	movi	r18,1
 800f22c:	003e4f06 	br	800eb6c <__subdf3+0xe4>
 800f230:	4806977a 	slli	r3,r9,29
 800f234:	00880034 	movhi	r2,8192
 800f238:	10bfffc4 	addi	r2,r2,-1
 800f23c:	2084703a 	and	r2,r4,r2
 800f240:	4812d0fa 	srli	r9,r9,3
 800f244:	10c4b03a 	or	r2,r2,r3
 800f248:	003eff06 	br	800ee48 <__subdf3+0x3c0>
 800f24c:	7808977a 	slli	r4,r15,29
 800f250:	00880034 	movhi	r2,8192
 800f254:	10bfffc4 	addi	r2,r2,-1
 800f258:	3084703a 	and	r2,r6,r2
 800f25c:	7812d0fa 	srli	r9,r15,3
 800f260:	1104b03a 	or	r2,r2,r4
 800f264:	003edd06 	br	800eddc <__subdf3+0x354>
 800f268:	480a977a 	slli	r5,r9,29
 800f26c:	4812d0fa 	srli	r9,r9,3
 800f270:	103fdb26 	beq	r2,zero,800f1e0 <__subdf3+0x758>
 800f274:	00c80034 	movhi	r3,8192
 800f278:	18ffffc4 	addi	r3,r3,-1
 800f27c:	20c4703a 	and	r2,r4,r3
 800f280:	4900022c 	andhi	r4,r9,8
 800f284:	1144b03a 	or	r2,r2,r5
 800f288:	203eef26 	beq	r4,zero,800ee48 <__subdf3+0x3c0>
 800f28c:	7808d0fa 	srli	r4,r15,3
 800f290:	2140022c 	andhi	r5,r4,8
 800f294:	283eec1e 	bne	r5,zero,800ee48 <__subdf3+0x3c0>
 800f298:	7804977a 	slli	r2,r15,29
 800f29c:	30cc703a 	and	r6,r6,r3
 800f2a0:	5823883a 	mov	r17,r11
 800f2a4:	3084b03a 	or	r2,r6,r2
 800f2a8:	2013883a 	mov	r9,r4
 800f2ac:	003ee606 	br	800ee48 <__subdf3+0x3c0>
 800f2b0:	7808977a 	slli	r4,r15,29
 800f2b4:	00880034 	movhi	r2,8192
 800f2b8:	10bfffc4 	addi	r2,r2,-1
 800f2bc:	3084703a 	and	r2,r6,r2
 800f2c0:	7812d0fa 	srli	r9,r15,3
 800f2c4:	1104b03a 	or	r2,r2,r4
 800f2c8:	003ec606 	br	800ede4 <__subdf3+0x35c>
 800f2cc:	18bff804 	addi	r2,r3,-32
 800f2d0:	19000820 	cmpeqi	r4,r3,32
 800f2d4:	4884d83a 	srl	r2,r9,r2
 800f2d8:	2000041e 	bne	r4,zero,800f2ec <__subdf3+0x864>
 800f2dc:	01001004 	movi	r4,64
 800f2e0:	20c7c83a 	sub	r3,r4,r3
 800f2e4:	48d2983a 	sll	r9,r9,r3
 800f2e8:	725cb03a 	or	r14,r14,r9
 800f2ec:	7020c03a 	cmpne	r16,r14,zero
 800f2f0:	80a0b03a 	or	r16,r16,r2
 800f2f4:	003efd06 	br	800eeec <__subdf3+0x464>
 800f2f8:	7361883a 	add	r16,r14,r13
 800f2fc:	4bc9883a 	add	r4,r9,r15
 800f300:	835b803a 	cmpltu	r13,r16,r13
 800f304:	2349883a 	add	r4,r4,r13
 800f308:	003f8a06 	br	800f134 <__subdf3+0x6ac>
 800f30c:	8104b03a 	or	r2,r16,r4
 800f310:	103f2e26 	beq	r2,zero,800efcc <__subdf3+0x544>
 800f314:	003eaa06 	br	800edc0 <__subdf3+0x338>
 800f318:	02400434 	movhi	r9,16
 800f31c:	0023883a 	mov	r17,zero
 800f320:	00bfffc4 	movi	r2,-1
 800f324:	4a7fffc4 	addi	r9,r9,-1
 800f328:	003ec906 	br	800ee50 <__subdf3+0x3c8>
 800f32c:	0005883a 	mov	r2,zero
 800f330:	00c1ffc4 	movi	r3,2047
 800f334:	0009883a 	mov	r4,zero
 800f338:	003e4106 	br	800ec40 <__subdf3+0x1b8>

0800f33c <__unorddf2>:
 800f33c:	2806d53a 	srli	r3,r5,20
 800f340:	3810d53a 	srli	r8,r7,20
 800f344:	02400434 	movhi	r9,16
 800f348:	18c1ffcc 	andi	r3,r3,2047
 800f34c:	4a7fffc4 	addi	r9,r9,-1
 800f350:	18c1ffd8 	cmpnei	r3,r3,2047
 800f354:	2a4a703a 	and	r5,r5,r9
 800f358:	3a4e703a 	and	r7,r7,r9
 800f35c:	4201ffcc 	andi	r8,r8,2047
 800f360:	18000426 	beq	r3,zero,800f374 <__unorddf2+0x38>
 800f364:	4201ffd8 	cmpnei	r8,r8,2047
 800f368:	40000626 	beq	r8,zero,800f384 <__unorddf2+0x48>
 800f36c:	0005883a 	mov	r2,zero
 800f370:	f800283a 	ret
 800f374:	290ab03a 	or	r5,r5,r4
 800f378:	283ffa26 	beq	r5,zero,800f364 <__unorddf2+0x28>
 800f37c:	00800044 	movi	r2,1
 800f380:	f800283a 	ret
 800f384:	398eb03a 	or	r7,r7,r6
 800f388:	3804c03a 	cmpne	r2,r7,zero
 800f38c:	f800283a 	ret

0800f390 <__fixdfsi>:
 800f390:	2806d53a 	srli	r3,r5,20
 800f394:	01800434 	movhi	r6,16
 800f398:	31bfffc4 	addi	r6,r6,-1
 800f39c:	18c1ffcc 	andi	r3,r3,2047
 800f3a0:	19c0ffd0 	cmplti	r7,r3,1023
 800f3a4:	2810d7fa 	srli	r8,r5,31
 800f3a8:	298a703a 	and	r5,r5,r6
 800f3ac:	3800061e 	bne	r7,zero,800f3c8 <__fixdfsi+0x38>
 800f3b0:	18810790 	cmplti	r2,r3,1054
 800f3b4:	1000061e 	bne	r2,zero,800f3d0 <__fixdfsi+0x40>
 800f3b8:	00a00034 	movhi	r2,32768
 800f3bc:	10bfffc4 	addi	r2,r2,-1
 800f3c0:	4085883a 	add	r2,r8,r2
 800f3c4:	f800283a 	ret
 800f3c8:	0005883a 	mov	r2,zero
 800f3cc:	f800283a 	ret
 800f3d0:	01810cc4 	movi	r6,1075
 800f3d4:	30cdc83a 	sub	r6,r6,r3
 800f3d8:	30800808 	cmpgei	r2,r6,32
 800f3dc:	29400434 	orhi	r5,r5,16
 800f3e0:	1000071e 	bne	r2,zero,800f400 <__fixdfsi+0x70>
 800f3e4:	18befb44 	addi	r2,r3,-1043
 800f3e8:	2884983a 	sll	r2,r5,r2
 800f3ec:	2188d83a 	srl	r4,r4,r6
 800f3f0:	1104b03a 	or	r2,r2,r4
 800f3f4:	403ff526 	beq	r8,zero,800f3cc <__fixdfsi+0x3c>
 800f3f8:	0085c83a 	sub	r2,zero,r2
 800f3fc:	f800283a 	ret
 800f400:	008104c4 	movi	r2,1043
 800f404:	10c5c83a 	sub	r2,r2,r3
 800f408:	2884d83a 	srl	r2,r5,r2
 800f40c:	003ff906 	br	800f3f4 <__fixdfsi+0x64>

0800f410 <__floatsidf>:
 800f410:	defffd04 	addi	sp,sp,-12
 800f414:	dfc00215 	stw	ra,8(sp)
 800f418:	dc400115 	stw	r17,4(sp)
 800f41c:	dc000015 	stw	r16,0(sp)
 800f420:	20001326 	beq	r4,zero,800f470 <__floatsidf+0x60>
 800f424:	2022d7fa 	srli	r17,r4,31
 800f428:	2021883a 	mov	r16,r4
 800f42c:	20002416 	blt	r4,zero,800f4c0 <__floatsidf+0xb0>
 800f430:	8009883a 	mov	r4,r16
 800f434:	800f5580 	call	800f558 <__clzsi2>
 800f438:	01010784 	movi	r4,1054
 800f43c:	2089c83a 	sub	r4,r4,r2
 800f440:	114002c8 	cmpgei	r5,r2,11
 800f444:	20c1ffcc 	andi	r3,r4,2047
 800f448:	2800161e 	bne	r5,zero,800f4a4 <__floatsidf+0x94>
 800f44c:	010002c4 	movi	r4,11
 800f450:	2089c83a 	sub	r4,r4,r2
 800f454:	810ad83a 	srl	r5,r16,r4
 800f458:	01000434 	movhi	r4,16
 800f45c:	10800544 	addi	r2,r2,21
 800f460:	213fffc4 	addi	r4,r4,-1
 800f464:	8084983a 	sll	r2,r16,r2
 800f468:	290a703a 	and	r5,r5,r4
 800f46c:	00000406 	br	800f480 <__floatsidf+0x70>
 800f470:	0023883a 	mov	r17,zero
 800f474:	0007883a 	mov	r3,zero
 800f478:	000b883a 	mov	r5,zero
 800f47c:	0005883a 	mov	r2,zero
 800f480:	1808953a 	slli	r4,r3,20
 800f484:	880697fa 	slli	r3,r17,31
 800f488:	2148b03a 	or	r4,r4,r5
 800f48c:	20c6b03a 	or	r3,r4,r3
 800f490:	dfc00217 	ldw	ra,8(sp)
 800f494:	dc400117 	ldw	r17,4(sp)
 800f498:	dc000017 	ldw	r16,0(sp)
 800f49c:	dec00304 	addi	sp,sp,12
 800f4a0:	f800283a 	ret
 800f4a4:	10bffd44 	addi	r2,r2,-11
 800f4a8:	808a983a 	sll	r5,r16,r2
 800f4ac:	00800434 	movhi	r2,16
 800f4b0:	10bfffc4 	addi	r2,r2,-1
 800f4b4:	288a703a 	and	r5,r5,r2
 800f4b8:	0005883a 	mov	r2,zero
 800f4bc:	003ff006 	br	800f480 <__floatsidf+0x70>
 800f4c0:	0121c83a 	sub	r16,zero,r4
 800f4c4:	003fda06 	br	800f430 <__floatsidf+0x20>

0800f4c8 <__floatunsidf>:
 800f4c8:	defffe04 	addi	sp,sp,-8
 800f4cc:	dc000015 	stw	r16,0(sp)
 800f4d0:	dfc00115 	stw	ra,4(sp)
 800f4d4:	2021883a 	mov	r16,r4
 800f4d8:	20000f26 	beq	r4,zero,800f518 <__floatunsidf+0x50>
 800f4dc:	800f5580 	call	800f558 <__clzsi2>
 800f4e0:	00c10784 	movi	r3,1054
 800f4e4:	1887c83a 	sub	r3,r3,r2
 800f4e8:	110002c8 	cmpgei	r4,r2,11
 800f4ec:	18c1ffcc 	andi	r3,r3,2047
 800f4f0:	2000121e 	bne	r4,zero,800f53c <__floatunsidf+0x74>
 800f4f4:	014002c4 	movi	r5,11
 800f4f8:	288bc83a 	sub	r5,r5,r2
 800f4fc:	814ad83a 	srl	r5,r16,r5
 800f500:	01000434 	movhi	r4,16
 800f504:	10800544 	addi	r2,r2,21
 800f508:	213fffc4 	addi	r4,r4,-1
 800f50c:	80a0983a 	sll	r16,r16,r2
 800f510:	290a703a 	and	r5,r5,r4
 800f514:	00000206 	br	800f520 <__floatunsidf+0x58>
 800f518:	0007883a 	mov	r3,zero
 800f51c:	000b883a 	mov	r5,zero
 800f520:	1806953a 	slli	r3,r3,20
 800f524:	8005883a 	mov	r2,r16
 800f528:	1946b03a 	or	r3,r3,r5
 800f52c:	dfc00117 	ldw	ra,4(sp)
 800f530:	dc000017 	ldw	r16,0(sp)
 800f534:	dec00204 	addi	sp,sp,8
 800f538:	f800283a 	ret
 800f53c:	117ffd44 	addi	r5,r2,-11
 800f540:	814a983a 	sll	r5,r16,r5
 800f544:	00800434 	movhi	r2,16
 800f548:	10bfffc4 	addi	r2,r2,-1
 800f54c:	288a703a 	and	r5,r5,r2
 800f550:	0021883a 	mov	r16,zero
 800f554:	003ff206 	br	800f520 <__floatunsidf+0x58>

0800f558 <__clzsi2>:
 800f558:	00bfffd4 	movui	r2,65535
 800f55c:	11000436 	bltu	r2,r4,800f570 <__clzsi2+0x18>
 800f560:	20804030 	cmpltui	r2,r4,256
 800f564:	10000e26 	beq	r2,zero,800f5a0 <__clzsi2+0x48>
 800f568:	01400804 	movi	r5,32
 800f56c:	00000406 	br	800f580 <__clzsi2+0x28>
 800f570:	00804034 	movhi	r2,256
 800f574:	20800736 	bltu	r4,r2,800f594 <__clzsi2+0x3c>
 800f578:	2008d63a 	srli	r4,r4,24
 800f57c:	01400204 	movi	r5,8
 800f580:	00c20074 	movhi	r3,2049
 800f584:	20c7883a 	add	r3,r4,r3
 800f588:	188abc03 	ldbu	r2,10992(r3)
 800f58c:	2885c83a 	sub	r2,r5,r2
 800f590:	f800283a 	ret
 800f594:	2008d43a 	srli	r4,r4,16
 800f598:	01400404 	movi	r5,16
 800f59c:	003ff806 	br	800f580 <__clzsi2+0x28>
 800f5a0:	2008d23a 	srli	r4,r4,8
 800f5a4:	01400604 	movi	r5,24
 800f5a8:	003ff506 	br	800f580 <__clzsi2+0x28>

0800f5ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f5ac:	defffe04 	addi	sp,sp,-8
 800f5b0:	dfc00115 	stw	ra,4(sp)
 800f5b4:	df000015 	stw	fp,0(sp)
 800f5b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f5bc:	d0a00917 	ldw	r2,-32732(gp)
 800f5c0:	10000326 	beq	r2,zero,800f5d0 <alt_get_errno+0x24>
 800f5c4:	d0a00917 	ldw	r2,-32732(gp)
 800f5c8:	103ee83a 	callr	r2
 800f5cc:	00000106 	br	800f5d4 <alt_get_errno+0x28>
 800f5d0:	d0a70804 	addi	r2,gp,-25568
}
 800f5d4:	e037883a 	mov	sp,fp
 800f5d8:	dfc00117 	ldw	ra,4(sp)
 800f5dc:	df000017 	ldw	fp,0(sp)
 800f5e0:	dec00204 	addi	sp,sp,8
 800f5e4:	f800283a 	ret

0800f5e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f5e8:	defffb04 	addi	sp,sp,-20
 800f5ec:	dfc00415 	stw	ra,16(sp)
 800f5f0:	df000315 	stw	fp,12(sp)
 800f5f4:	df000304 	addi	fp,sp,12
 800f5f8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f5fc:	e0bffd17 	ldw	r2,-12(fp)
 800f600:	10000916 	blt	r2,zero,800f628 <close+0x40>
 800f604:	e0fffd17 	ldw	r3,-12(fp)
 800f608:	1805883a 	mov	r2,r3
 800f60c:	1085883a 	add	r2,r2,r2
 800f610:	10c5883a 	add	r2,r2,r3
 800f614:	100490ba 	slli	r2,r2,2
 800f618:	00c20074 	movhi	r3,2049
 800f61c:	18cd7904 	addi	r3,r3,13796
 800f620:	10c5883a 	add	r2,r2,r3
 800f624:	00000106 	br	800f62c <close+0x44>
 800f628:	0005883a 	mov	r2,zero
 800f62c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 800f630:	e0bfff17 	ldw	r2,-4(fp)
 800f634:	10001926 	beq	r2,zero,800f69c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f638:	e0bfff17 	ldw	r2,-4(fp)
 800f63c:	10800017 	ldw	r2,0(r2)
 800f640:	10800417 	ldw	r2,16(r2)
 800f644:	10000626 	beq	r2,zero,800f660 <close+0x78>
 800f648:	e0bfff17 	ldw	r2,-4(fp)
 800f64c:	10800017 	ldw	r2,0(r2)
 800f650:	10800417 	ldw	r2,16(r2)
 800f654:	e13fff17 	ldw	r4,-4(fp)
 800f658:	103ee83a 	callr	r2
 800f65c:	00000106 	br	800f664 <close+0x7c>
 800f660:	0005883a 	mov	r2,zero
 800f664:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f668:	e13ffd17 	ldw	r4,-12(fp)
 800f66c:	800fea40 	call	800fea4 <alt_release_fd>
    if (rval < 0)
 800f670:	e0bffe17 	ldw	r2,-8(fp)
 800f674:	1000070e 	bge	r2,zero,800f694 <close+0xac>
    {
      ALT_ERRNO = -rval;
 800f678:	800f5ac0 	call	800f5ac <alt_get_errno>
 800f67c:	1007883a 	mov	r3,r2
 800f680:	e0bffe17 	ldw	r2,-8(fp)
 800f684:	0085c83a 	sub	r2,zero,r2
 800f688:	18800015 	stw	r2,0(r3)
      return -1;
 800f68c:	00bfffc4 	movi	r2,-1
 800f690:	00000706 	br	800f6b0 <close+0xc8>
    }
    return 0;
 800f694:	0005883a 	mov	r2,zero
 800f698:	00000506 	br	800f6b0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f69c:	800f5ac0 	call	800f5ac <alt_get_errno>
 800f6a0:	1007883a 	mov	r3,r2
 800f6a4:	00801444 	movi	r2,81
 800f6a8:	18800015 	stw	r2,0(r3)
    return -1;
 800f6ac:	00bfffc4 	movi	r2,-1
  }
}
 800f6b0:	e037883a 	mov	sp,fp
 800f6b4:	dfc00117 	ldw	ra,4(sp)
 800f6b8:	df000017 	ldw	fp,0(sp)
 800f6bc:	dec00204 	addi	sp,sp,8
 800f6c0:	f800283a 	ret

0800f6c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f6c4:	defffc04 	addi	sp,sp,-16
 800f6c8:	df000315 	stw	fp,12(sp)
 800f6cc:	df000304 	addi	fp,sp,12
 800f6d0:	e13fff15 	stw	r4,-4(fp)
 800f6d4:	e17ffe15 	stw	r5,-8(fp)
 800f6d8:	e1bffd15 	stw	r6,-12(fp)
  return len;
 800f6dc:	e0bffd17 	ldw	r2,-12(fp)
}
 800f6e0:	e037883a 	mov	sp,fp
 800f6e4:	df000017 	ldw	fp,0(sp)
 800f6e8:	dec00104 	addi	sp,sp,4
 800f6ec:	f800283a 	ret

0800f6f0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800f6f0:	defffd04 	addi	sp,sp,-12
 800f6f4:	df000215 	stw	fp,8(sp)
 800f6f8:	df000204 	addi	fp,sp,8
 800f6fc:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800f700:	0001883a 	nop
 800f704:	e0bffe17 	ldw	r2,-8(fp)
 800f708:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800f70c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800f710:	10000226 	beq	r2,zero,800f71c <_exit+0x2c>
    ALT_SIM_FAIL();
 800f714:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 800f718:	00000106 	br	800f720 <_exit+0x30>
    ALT_SIM_PASS();
 800f71c:	002af0b0 	cmpltui	zero,zero,43970
}
 800f720:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800f724:	003fff06 	br	800f724 <_exit+0x34>

0800f728 <alt_get_errno>:
{
 800f728:	defffe04 	addi	sp,sp,-8
 800f72c:	dfc00115 	stw	ra,4(sp)
 800f730:	df000015 	stw	fp,0(sp)
 800f734:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f738:	d0a00917 	ldw	r2,-32732(gp)
 800f73c:	10000326 	beq	r2,zero,800f74c <alt_get_errno+0x24>
 800f740:	d0a00917 	ldw	r2,-32732(gp)
 800f744:	103ee83a 	callr	r2
 800f748:	00000106 	br	800f750 <alt_get_errno+0x28>
 800f74c:	d0a70804 	addi	r2,gp,-25568
}
 800f750:	e037883a 	mov	sp,fp
 800f754:	dfc00117 	ldw	ra,4(sp)
 800f758:	df000017 	ldw	fp,0(sp)
 800f75c:	dec00204 	addi	sp,sp,8
 800f760:	f800283a 	ret

0800f764 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f764:	defffb04 	addi	sp,sp,-20
 800f768:	dfc00415 	stw	ra,16(sp)
 800f76c:	df000315 	stw	fp,12(sp)
 800f770:	df000304 	addi	fp,sp,12
 800f774:	e13ffe15 	stw	r4,-8(fp)
 800f778:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f77c:	e0bffe17 	ldw	r2,-8(fp)
 800f780:	10000916 	blt	r2,zero,800f7a8 <fstat+0x44>
 800f784:	e0fffe17 	ldw	r3,-8(fp)
 800f788:	1805883a 	mov	r2,r3
 800f78c:	1085883a 	add	r2,r2,r2
 800f790:	10c5883a 	add	r2,r2,r3
 800f794:	100490ba 	slli	r2,r2,2
 800f798:	00c20074 	movhi	r3,2049
 800f79c:	18cd7904 	addi	r3,r3,13796
 800f7a0:	10c5883a 	add	r2,r2,r3
 800f7a4:	00000106 	br	800f7ac <fstat+0x48>
 800f7a8:	0005883a 	mov	r2,zero
 800f7ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800f7b0:	e0bfff17 	ldw	r2,-4(fp)
 800f7b4:	10001026 	beq	r2,zero,800f7f8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f7b8:	e0bfff17 	ldw	r2,-4(fp)
 800f7bc:	10800017 	ldw	r2,0(r2)
 800f7c0:	10800817 	ldw	r2,32(r2)
 800f7c4:	10000726 	beq	r2,zero,800f7e4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 800f7c8:	e0bfff17 	ldw	r2,-4(fp)
 800f7cc:	10800017 	ldw	r2,0(r2)
 800f7d0:	10800817 	ldw	r2,32(r2)
 800f7d4:	e17ffd17 	ldw	r5,-12(fp)
 800f7d8:	e13fff17 	ldw	r4,-4(fp)
 800f7dc:	103ee83a 	callr	r2
 800f7e0:	00000a06 	br	800f80c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f7e4:	e0bffd17 	ldw	r2,-12(fp)
 800f7e8:	00c80004 	movi	r3,8192
 800f7ec:	10c00115 	stw	r3,4(r2)
      return 0;
 800f7f0:	0005883a 	mov	r2,zero
 800f7f4:	00000506 	br	800f80c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f7f8:	800f7280 	call	800f728 <alt_get_errno>
 800f7fc:	1007883a 	mov	r3,r2
 800f800:	00801444 	movi	r2,81
 800f804:	18800015 	stw	r2,0(r3)
    return -1;
 800f808:	00bfffc4 	movi	r2,-1
  }
}
 800f80c:	e037883a 	mov	sp,fp
 800f810:	dfc00117 	ldw	ra,4(sp)
 800f814:	df000017 	ldw	fp,0(sp)
 800f818:	dec00204 	addi	sp,sp,8
 800f81c:	f800283a 	ret

0800f820 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 800f820:	deffff04 	addi	sp,sp,-4
 800f824:	df000015 	stw	fp,0(sp)
 800f828:	d839883a 	mov	fp,sp
  return 0;
 800f82c:	0005883a 	mov	r2,zero
}
 800f830:	e037883a 	mov	sp,fp
 800f834:	df000017 	ldw	fp,0(sp)
 800f838:	dec00104 	addi	sp,sp,4
 800f83c:	f800283a 	ret

0800f840 <alt_get_errno>:
{
 800f840:	defffe04 	addi	sp,sp,-8
 800f844:	dfc00115 	stw	ra,4(sp)
 800f848:	df000015 	stw	fp,0(sp)
 800f84c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f850:	d0a00917 	ldw	r2,-32732(gp)
 800f854:	10000326 	beq	r2,zero,800f864 <alt_get_errno+0x24>
 800f858:	d0a00917 	ldw	r2,-32732(gp)
 800f85c:	103ee83a 	callr	r2
 800f860:	00000106 	br	800f868 <alt_get_errno+0x28>
 800f864:	d0a70804 	addi	r2,gp,-25568
}
 800f868:	e037883a 	mov	sp,fp
 800f86c:	dfc00117 	ldw	ra,4(sp)
 800f870:	df000017 	ldw	fp,0(sp)
 800f874:	dec00204 	addi	sp,sp,8
 800f878:	f800283a 	ret

0800f87c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800f87c:	deffea04 	addi	sp,sp,-88
 800f880:	dfc01515 	stw	ra,84(sp)
 800f884:	df001415 	stw	fp,80(sp)
 800f888:	df001404 	addi	fp,sp,80
 800f88c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f890:	e0bfec17 	ldw	r2,-80(fp)
 800f894:	10000916 	blt	r2,zero,800f8bc <isatty+0x40>
 800f898:	e0ffec17 	ldw	r3,-80(fp)
 800f89c:	1805883a 	mov	r2,r3
 800f8a0:	1085883a 	add	r2,r2,r2
 800f8a4:	10c5883a 	add	r2,r2,r3
 800f8a8:	100490ba 	slli	r2,r2,2
 800f8ac:	00c20074 	movhi	r3,2049
 800f8b0:	18cd7904 	addi	r3,r3,13796
 800f8b4:	10c5883a 	add	r2,r2,r3
 800f8b8:	00000106 	br	800f8c0 <isatty+0x44>
 800f8bc:	0005883a 	mov	r2,zero
 800f8c0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800f8c4:	e0bfff17 	ldw	r2,-4(fp)
 800f8c8:	10000e26 	beq	r2,zero,800f904 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800f8cc:	e0bfff17 	ldw	r2,-4(fp)
 800f8d0:	10800017 	ldw	r2,0(r2)
 800f8d4:	10800817 	ldw	r2,32(r2)
 800f8d8:	1000021e 	bne	r2,zero,800f8e4 <isatty+0x68>
    {
      return 1;
 800f8dc:	00800044 	movi	r2,1
 800f8e0:	00000d06 	br	800f918 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800f8e4:	e0bfed04 	addi	r2,fp,-76
 800f8e8:	100b883a 	mov	r5,r2
 800f8ec:	e13fec17 	ldw	r4,-80(fp)
 800f8f0:	800f7640 	call	800f764 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800f8f4:	e0bfee17 	ldw	r2,-72(fp)
 800f8f8:	10880020 	cmpeqi	r2,r2,8192
 800f8fc:	10803fcc 	andi	r2,r2,255
 800f900:	00000506 	br	800f918 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f904:	800f8400 	call	800f840 <alt_get_errno>
 800f908:	1007883a 	mov	r3,r2
 800f90c:	00801444 	movi	r2,81
 800f910:	18800015 	stw	r2,0(r3)
    return 0;
 800f914:	0005883a 	mov	r2,zero
  }
}
 800f918:	e037883a 	mov	sp,fp
 800f91c:	dfc00117 	ldw	ra,4(sp)
 800f920:	df000017 	ldw	fp,0(sp)
 800f924:	dec00204 	addi	sp,sp,8
 800f928:	f800283a 	ret

0800f92c <alt_get_errno>:
{
 800f92c:	defffe04 	addi	sp,sp,-8
 800f930:	dfc00115 	stw	ra,4(sp)
 800f934:	df000015 	stw	fp,0(sp)
 800f938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f93c:	d0a00917 	ldw	r2,-32732(gp)
 800f940:	10000326 	beq	r2,zero,800f950 <alt_get_errno+0x24>
 800f944:	d0a00917 	ldw	r2,-32732(gp)
 800f948:	103ee83a 	callr	r2
 800f94c:	00000106 	br	800f954 <alt_get_errno+0x28>
 800f950:	d0a70804 	addi	r2,gp,-25568
}
 800f954:	e037883a 	mov	sp,fp
 800f958:	dfc00117 	ldw	ra,4(sp)
 800f95c:	df000017 	ldw	fp,0(sp)
 800f960:	dec00204 	addi	sp,sp,8
 800f964:	f800283a 	ret

0800f968 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 800f968:	defffb04 	addi	sp,sp,-20
 800f96c:	dfc00415 	stw	ra,16(sp)
 800f970:	df000315 	stw	fp,12(sp)
 800f974:	df000304 	addi	fp,sp,12
 800f978:	e13ffe15 	stw	r4,-8(fp)
 800f97c:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 800f980:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 800f984:	e0bffe17 	ldw	r2,-8(fp)
 800f988:	00802e16 	blt	zero,r2,800fa44 <kill+0xdc>
 800f98c:	e0bffd17 	ldw	r2,-12(fp)
 800f990:	10800828 	cmpgeui	r2,r2,32
 800f994:	1000281e 	bne	r2,zero,800fa38 <kill+0xd0>
 800f998:	e0bffd17 	ldw	r2,-12(fp)
 800f99c:	100690ba 	slli	r3,r2,2
 800f9a0:	00820074 	movhi	r2,2049
 800f9a4:	1885883a 	add	r2,r3,r2
 800f9a8:	10be6c17 	ldw	r2,-1616(r2)
 800f9ac:	1000683a 	jmp	r2
 800f9b0:	0800fa58 	cmpnei	zero,at,1001
 800f9b4:	0800fa38 	rdprs	zero,at,1000
 800f9b8:	0800fa38 	rdprs	zero,at,1000
 800f9bc:	0800fa30 	cmpltui	zero,at,1000
 800f9c0:	0800fa30 	cmpltui	zero,at,1000
 800f9c4:	0800fa30 	cmpltui	zero,at,1000
 800f9c8:	0800fa30 	cmpltui	zero,at,1000
 800f9cc:	0800fa38 	rdprs	zero,at,1000
 800f9d0:	0800fa30 	cmpltui	zero,at,1000
 800f9d4:	0800fa30 	cmpltui	zero,at,1000
 800f9d8:	0800fa30 	cmpltui	zero,at,1000
 800f9dc:	0800fa30 	cmpltui	zero,at,1000
 800f9e0:	0800fa30 	cmpltui	zero,at,1000
 800f9e4:	0800fa30 	cmpltui	zero,at,1000
 800f9e8:	0800fa30 	cmpltui	zero,at,1000
 800f9ec:	0800fa30 	cmpltui	zero,at,1000
 800f9f0:	0800fa58 	cmpnei	zero,at,1001
 800f9f4:	0800fa38 	rdprs	zero,at,1000
 800f9f8:	0800fa38 	rdprs	zero,at,1000
 800f9fc:	0800fa38 	rdprs	zero,at,1000
 800fa00:	0800fa58 	cmpnei	zero,at,1001
 800fa04:	0800fa38 	rdprs	zero,at,1000
 800fa08:	0800fa38 	rdprs	zero,at,1000
 800fa0c:	0800fa30 	cmpltui	zero,at,1000
 800fa10:	0800fa30 	cmpltui	zero,at,1000
 800fa14:	0800fa30 	cmpltui	zero,at,1000
 800fa18:	0800fa30 	cmpltui	zero,at,1000
 800fa1c:	0800fa30 	cmpltui	zero,at,1000
 800fa20:	0800fa38 	rdprs	zero,at,1000
 800fa24:	0800fa38 	rdprs	zero,at,1000
 800fa28:	0800fa30 	cmpltui	zero,at,1000
 800fa2c:	0800fa30 	cmpltui	zero,at,1000
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 800fa30:	0009883a 	mov	r4,zero
 800fa34:	800f6f00 	call	800f6f0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 800fa38:	00800584 	movi	r2,22
 800fa3c:	e0bfff15 	stw	r2,-4(fp)
 800fa40:	00000606 	br	800fa5c <kill+0xf4>
    }
  }

  else if (pid > 0)
 800fa44:	e0bffe17 	ldw	r2,-8(fp)
 800fa48:	0080040e 	bge	zero,r2,800fa5c <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 800fa4c:	008000c4 	movi	r2,3
 800fa50:	e0bfff15 	stw	r2,-4(fp)
 800fa54:	00000106 	br	800fa5c <kill+0xf4>
      break;
 800fa58:	0001883a 	nop
  }

  if (status)
 800fa5c:	e0bfff17 	ldw	r2,-4(fp)
 800fa60:	10000626 	beq	r2,zero,800fa7c <kill+0x114>
  {
    ALT_ERRNO = status;
 800fa64:	800f92c0 	call	800f92c <alt_get_errno>
 800fa68:	1007883a 	mov	r3,r2
 800fa6c:	e0bfff17 	ldw	r2,-4(fp)
 800fa70:	18800015 	stw	r2,0(r3)
    return -1;
 800fa74:	00bfffc4 	movi	r2,-1
 800fa78:	00000106 	br	800fa80 <kill+0x118>
  }

  return 0;
 800fa7c:	0005883a 	mov	r2,zero
}
 800fa80:	e037883a 	mov	sp,fp
 800fa84:	dfc00117 	ldw	ra,4(sp)
 800fa88:	df000017 	ldw	fp,0(sp)
 800fa8c:	dec00204 	addi	sp,sp,8
 800fa90:	f800283a 	ret

0800fa94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800fa94:	defffc04 	addi	sp,sp,-16
 800fa98:	df000315 	stw	fp,12(sp)
 800fa9c:	df000304 	addi	fp,sp,12
 800faa0:	e13fff15 	stw	r4,-4(fp)
 800faa4:	e17ffe15 	stw	r5,-8(fp)
 800faa8:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 800faac:	e0fffe17 	ldw	r3,-8(fp)
 800fab0:	e0bfff17 	ldw	r2,-4(fp)
 800fab4:	18800c26 	beq	r3,r2,800fae8 <alt_load_section+0x54>
  {
    while( to != end )
 800fab8:	00000806 	br	800fadc <alt_load_section+0x48>
    {
      *to++ = *from++;
 800fabc:	e0ffff17 	ldw	r3,-4(fp)
 800fac0:	18800104 	addi	r2,r3,4
 800fac4:	e0bfff15 	stw	r2,-4(fp)
 800fac8:	e0bffe17 	ldw	r2,-8(fp)
 800facc:	11000104 	addi	r4,r2,4
 800fad0:	e13ffe15 	stw	r4,-8(fp)
 800fad4:	18c00017 	ldw	r3,0(r3)
 800fad8:	10c00015 	stw	r3,0(r2)
    while( to != end )
 800fadc:	e0fffe17 	ldw	r3,-8(fp)
 800fae0:	e0bffd17 	ldw	r2,-12(fp)
 800fae4:	18bff51e 	bne	r3,r2,800fabc <alt_load_section+0x28>
    }
  }
}
 800fae8:	0001883a 	nop
 800faec:	e037883a 	mov	sp,fp
 800faf0:	df000017 	ldw	fp,0(sp)
 800faf4:	dec00104 	addi	sp,sp,4
 800faf8:	f800283a 	ret

0800fafc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800fafc:	defffe04 	addi	sp,sp,-8
 800fb00:	dfc00115 	stw	ra,4(sp)
 800fb04:	df000015 	stw	fp,0(sp)
 800fb08:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800fb0c:	01820074 	movhi	r6,2049
 800fb10:	3191ff04 	addi	r6,r6,18428
 800fb14:	01420074 	movhi	r5,2049
 800fb18:	294b0904 	addi	r5,r5,11300
 800fb1c:	01020074 	movhi	r4,2049
 800fb20:	2111ff04 	addi	r4,r4,18428
 800fb24:	800fa940 	call	800fa94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800fb28:	01820034 	movhi	r6,2048
 800fb2c:	31808904 	addi	r6,r6,548
 800fb30:	01420034 	movhi	r5,2048
 800fb34:	29400804 	addi	r5,r5,32
 800fb38:	01020034 	movhi	r4,2048
 800fb3c:	21000804 	addi	r4,r4,32
 800fb40:	800fa940 	call	800fa94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800fb44:	01820074 	movhi	r6,2049
 800fb48:	318b0904 	addi	r6,r6,11300
 800fb4c:	01420074 	movhi	r5,2049
 800fb50:	29479b04 	addi	r5,r5,7788
 800fb54:	01020074 	movhi	r4,2049
 800fb58:	21079b04 	addi	r4,r4,7788
 800fb5c:	800fa940 	call	800fa94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800fb60:	8010ef80 	call	8010ef8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800fb64:	80110c40 	call	80110c4 <alt_icache_flush_all>
}
 800fb68:	0001883a 	nop
 800fb6c:	e037883a 	mov	sp,fp
 800fb70:	dfc00117 	ldw	ra,4(sp)
 800fb74:	df000017 	ldw	fp,0(sp)
 800fb78:	dec00204 	addi	sp,sp,8
 800fb7c:	f800283a 	ret

0800fb80 <alt_get_errno>:
{
 800fb80:	defffe04 	addi	sp,sp,-8
 800fb84:	dfc00115 	stw	ra,4(sp)
 800fb88:	df000015 	stw	fp,0(sp)
 800fb8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fb90:	d0a00917 	ldw	r2,-32732(gp)
 800fb94:	10000326 	beq	r2,zero,800fba4 <alt_get_errno+0x24>
 800fb98:	d0a00917 	ldw	r2,-32732(gp)
 800fb9c:	103ee83a 	callr	r2
 800fba0:	00000106 	br	800fba8 <alt_get_errno+0x28>
 800fba4:	d0a70804 	addi	r2,gp,-25568
}
 800fba8:	e037883a 	mov	sp,fp
 800fbac:	dfc00117 	ldw	ra,4(sp)
 800fbb0:	df000017 	ldw	fp,0(sp)
 800fbb4:	dec00204 	addi	sp,sp,8
 800fbb8:	f800283a 	ret

0800fbbc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800fbbc:	defff904 	addi	sp,sp,-28
 800fbc0:	dfc00615 	stw	ra,24(sp)
 800fbc4:	df000515 	stw	fp,20(sp)
 800fbc8:	df000504 	addi	fp,sp,20
 800fbcc:	e13ffd15 	stw	r4,-12(fp)
 800fbd0:	e17ffc15 	stw	r5,-16(fp)
 800fbd4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800fbd8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fbdc:	e0bffd17 	ldw	r2,-12(fp)
 800fbe0:	10000916 	blt	r2,zero,800fc08 <lseek+0x4c>
 800fbe4:	e0fffd17 	ldw	r3,-12(fp)
 800fbe8:	1805883a 	mov	r2,r3
 800fbec:	1085883a 	add	r2,r2,r2
 800fbf0:	10c5883a 	add	r2,r2,r3
 800fbf4:	100490ba 	slli	r2,r2,2
 800fbf8:	00c20074 	movhi	r3,2049
 800fbfc:	18cd7904 	addi	r3,r3,13796
 800fc00:	10c5883a 	add	r2,r2,r3
 800fc04:	00000106 	br	800fc0c <lseek+0x50>
 800fc08:	0005883a 	mov	r2,zero
 800fc0c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 800fc10:	e0bffe17 	ldw	r2,-8(fp)
 800fc14:	10001026 	beq	r2,zero,800fc58 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800fc18:	e0bffe17 	ldw	r2,-8(fp)
 800fc1c:	10800017 	ldw	r2,0(r2)
 800fc20:	10800717 	ldw	r2,28(r2)
 800fc24:	10000926 	beq	r2,zero,800fc4c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800fc28:	e0bffe17 	ldw	r2,-8(fp)
 800fc2c:	10800017 	ldw	r2,0(r2)
 800fc30:	10800717 	ldw	r2,28(r2)
 800fc34:	e1bffb17 	ldw	r6,-20(fp)
 800fc38:	e17ffc17 	ldw	r5,-16(fp)
 800fc3c:	e13ffe17 	ldw	r4,-8(fp)
 800fc40:	103ee83a 	callr	r2
 800fc44:	e0bfff15 	stw	r2,-4(fp)
 800fc48:	00000506 	br	800fc60 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800fc4c:	00bfde84 	movi	r2,-134
 800fc50:	e0bfff15 	stw	r2,-4(fp)
 800fc54:	00000206 	br	800fc60 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 800fc58:	00bfebc4 	movi	r2,-81
 800fc5c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 800fc60:	e0bfff17 	ldw	r2,-4(fp)
 800fc64:	1000070e 	bge	r2,zero,800fc84 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 800fc68:	800fb800 	call	800fb80 <alt_get_errno>
 800fc6c:	1007883a 	mov	r3,r2
 800fc70:	e0bfff17 	ldw	r2,-4(fp)
 800fc74:	0085c83a 	sub	r2,zero,r2
 800fc78:	18800015 	stw	r2,0(r3)
    rc = -1;
 800fc7c:	00bfffc4 	movi	r2,-1
 800fc80:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 800fc84:	e0bfff17 	ldw	r2,-4(fp)
}
 800fc88:	e037883a 	mov	sp,fp
 800fc8c:	dfc00117 	ldw	ra,4(sp)
 800fc90:	df000017 	ldw	fp,0(sp)
 800fc94:	dec00204 	addi	sp,sp,8
 800fc98:	f800283a 	ret

0800fc9c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800fc9c:	defffd04 	addi	sp,sp,-12
 800fca0:	dfc00215 	stw	ra,8(sp)
 800fca4:	df000115 	stw	fp,4(sp)
 800fca8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800fcac:	0009883a 	mov	r4,zero
 800fcb0:	80101700 	call	8010170 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800fcb4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800fcb8:	80101ac0 	call	80101ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800fcbc:	01820074 	movhi	r6,2049
 800fcc0:	318aff04 	addi	r6,r6,11260
 800fcc4:	01420074 	movhi	r5,2049
 800fcc8:	294aff04 	addi	r5,r5,11260
 800fccc:	01020074 	movhi	r4,2049
 800fcd0:	210aff04 	addi	r4,r4,11260
 800fcd4:	80114500 	call	8011450 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800fcd8:	8010ffc0 	call	8010ffc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800fcdc:	01020074 	movhi	r4,2049
 800fce0:	21041804 	addi	r4,r4,4192
 800fce4:	8011bfc0 	call	8011bfc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800fce8:	d0a70a17 	ldw	r2,-25560(gp)
 800fcec:	d0e70b17 	ldw	r3,-25556(gp)
 800fcf0:	d1270c17 	ldw	r4,-25552(gp)
 800fcf4:	200d883a 	mov	r6,r4
 800fcf8:	180b883a 	mov	r5,r3
 800fcfc:	1009883a 	mov	r4,r2
 800fd00:	800041c0 	call	800041c <main>
 800fd04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800fd08:	01000044 	movi	r4,1
 800fd0c:	800f5e80 	call	800f5e8 <close>
  exit (result);
 800fd10:	e13fff17 	ldw	r4,-4(fp)
 800fd14:	8011c100 	call	8011c10 <exit>

0800fd18 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800fd18:	defffe04 	addi	sp,sp,-8
 800fd1c:	df000115 	stw	fp,4(sp)
 800fd20:	df000104 	addi	fp,sp,4
 800fd24:	e13fff15 	stw	r4,-4(fp)
}
 800fd28:	0001883a 	nop
 800fd2c:	e037883a 	mov	sp,fp
 800fd30:	df000017 	ldw	fp,0(sp)
 800fd34:	dec00104 	addi	sp,sp,4
 800fd38:	f800283a 	ret

0800fd3c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800fd3c:	defffe04 	addi	sp,sp,-8
 800fd40:	df000115 	stw	fp,4(sp)
 800fd44:	df000104 	addi	fp,sp,4
 800fd48:	e13fff15 	stw	r4,-4(fp)
}
 800fd4c:	0001883a 	nop
 800fd50:	e037883a 	mov	sp,fp
 800fd54:	df000017 	ldw	fp,0(sp)
 800fd58:	dec00104 	addi	sp,sp,4
 800fd5c:	f800283a 	ret

0800fd60 <alt_get_errno>:
{
 800fd60:	defffe04 	addi	sp,sp,-8
 800fd64:	dfc00115 	stw	ra,4(sp)
 800fd68:	df000015 	stw	fp,0(sp)
 800fd6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fd70:	d0a00917 	ldw	r2,-32732(gp)
 800fd74:	10000326 	beq	r2,zero,800fd84 <alt_get_errno+0x24>
 800fd78:	d0a00917 	ldw	r2,-32732(gp)
 800fd7c:	103ee83a 	callr	r2
 800fd80:	00000106 	br	800fd88 <alt_get_errno+0x28>
 800fd84:	d0a70804 	addi	r2,gp,-25568
}
 800fd88:	e037883a 	mov	sp,fp
 800fd8c:	dfc00117 	ldw	ra,4(sp)
 800fd90:	df000017 	ldw	fp,0(sp)
 800fd94:	dec00204 	addi	sp,sp,8
 800fd98:	f800283a 	ret

0800fd9c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800fd9c:	defff904 	addi	sp,sp,-28
 800fda0:	dfc00615 	stw	ra,24(sp)
 800fda4:	df000515 	stw	fp,20(sp)
 800fda8:	df000504 	addi	fp,sp,20
 800fdac:	e13ffd15 	stw	r4,-12(fp)
 800fdb0:	e17ffc15 	stw	r5,-16(fp)
 800fdb4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fdb8:	e0bffd17 	ldw	r2,-12(fp)
 800fdbc:	10000916 	blt	r2,zero,800fde4 <read+0x48>
 800fdc0:	e0fffd17 	ldw	r3,-12(fp)
 800fdc4:	1805883a 	mov	r2,r3
 800fdc8:	1085883a 	add	r2,r2,r2
 800fdcc:	10c5883a 	add	r2,r2,r3
 800fdd0:	100490ba 	slli	r2,r2,2
 800fdd4:	00c20074 	movhi	r3,2049
 800fdd8:	18cd7904 	addi	r3,r3,13796
 800fddc:	10c5883a 	add	r2,r2,r3
 800fde0:	00000106 	br	800fde8 <read+0x4c>
 800fde4:	0005883a 	mov	r2,zero
 800fde8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800fdec:	e0bfff17 	ldw	r2,-4(fp)
 800fdf0:	10002226 	beq	r2,zero,800fe7c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fdf4:	e0bfff17 	ldw	r2,-4(fp)
 800fdf8:	10800217 	ldw	r2,8(r2)
 800fdfc:	108000cc 	andi	r2,r2,3
 800fe00:	10800060 	cmpeqi	r2,r2,1
 800fe04:	1000181e 	bne	r2,zero,800fe68 <read+0xcc>
        (fd->dev->read))
 800fe08:	e0bfff17 	ldw	r2,-4(fp)
 800fe0c:	10800017 	ldw	r2,0(r2)
 800fe10:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fe14:	10001426 	beq	r2,zero,800fe68 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800fe18:	e0bfff17 	ldw	r2,-4(fp)
 800fe1c:	10800017 	ldw	r2,0(r2)
 800fe20:	10800517 	ldw	r2,20(r2)
 800fe24:	e0fffb17 	ldw	r3,-20(fp)
 800fe28:	180d883a 	mov	r6,r3
 800fe2c:	e17ffc17 	ldw	r5,-16(fp)
 800fe30:	e13fff17 	ldw	r4,-4(fp)
 800fe34:	103ee83a 	callr	r2
 800fe38:	e0bffe15 	stw	r2,-8(fp)
 800fe3c:	e0bffe17 	ldw	r2,-8(fp)
 800fe40:	1000070e 	bge	r2,zero,800fe60 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 800fe44:	800fd600 	call	800fd60 <alt_get_errno>
 800fe48:	1007883a 	mov	r3,r2
 800fe4c:	e0bffe17 	ldw	r2,-8(fp)
 800fe50:	0085c83a 	sub	r2,zero,r2
 800fe54:	18800015 	stw	r2,0(r3)
          return -1;
 800fe58:	00bfffc4 	movi	r2,-1
 800fe5c:	00000c06 	br	800fe90 <read+0xf4>
        }
        return rval;
 800fe60:	e0bffe17 	ldw	r2,-8(fp)
 800fe64:	00000a06 	br	800fe90 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800fe68:	800fd600 	call	800fd60 <alt_get_errno>
 800fe6c:	1007883a 	mov	r3,r2
 800fe70:	00800344 	movi	r2,13
 800fe74:	18800015 	stw	r2,0(r3)
 800fe78:	00000406 	br	800fe8c <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800fe7c:	800fd600 	call	800fd60 <alt_get_errno>
 800fe80:	1007883a 	mov	r3,r2
 800fe84:	00801444 	movi	r2,81
 800fe88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fe8c:	00bfffc4 	movi	r2,-1
}
 800fe90:	e037883a 	mov	sp,fp
 800fe94:	dfc00117 	ldw	ra,4(sp)
 800fe98:	df000017 	ldw	fp,0(sp)
 800fe9c:	dec00204 	addi	sp,sp,8
 800fea0:	f800283a 	ret

0800fea4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800fea4:	defffe04 	addi	sp,sp,-8
 800fea8:	df000115 	stw	fp,4(sp)
 800feac:	df000104 	addi	fp,sp,4
 800feb0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800feb4:	e0bfff17 	ldw	r2,-4(fp)
 800feb8:	108000d0 	cmplti	r2,r2,3
 800febc:	1000101e 	bne	r2,zero,800ff00 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 800fec0:	e0ffff17 	ldw	r3,-4(fp)
 800fec4:	1805883a 	mov	r2,r3
 800fec8:	1085883a 	add	r2,r2,r2
 800fecc:	10c5883a 	add	r2,r2,r3
 800fed0:	100490ba 	slli	r2,r2,2
 800fed4:	00c20074 	movhi	r3,2049
 800fed8:	10c7883a 	add	r3,r2,r3
 800fedc:	180d7b15 	stw	zero,13804(r3)
    alt_fd_list[fd].dev      = 0;
 800fee0:	e0ffff17 	ldw	r3,-4(fp)
 800fee4:	1805883a 	mov	r2,r3
 800fee8:	1085883a 	add	r2,r2,r2
 800feec:	10c5883a 	add	r2,r2,r3
 800fef0:	100490ba 	slli	r2,r2,2
 800fef4:	00c20074 	movhi	r3,2049
 800fef8:	10c7883a 	add	r3,r2,r3
 800fefc:	180d7915 	stw	zero,13796(r3)
  }
}
 800ff00:	0001883a 	nop
 800ff04:	e037883a 	mov	sp,fp
 800ff08:	df000017 	ldw	fp,0(sp)
 800ff0c:	dec00104 	addi	sp,sp,4
 800ff10:	f800283a 	ret

0800ff14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800ff14:	defff904 	addi	sp,sp,-28
 800ff18:	df000615 	stw	fp,24(sp)
 800ff1c:	df000604 	addi	fp,sp,24
 800ff20:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 800ff24:	0005303a 	rdctl	r2,status
 800ff28:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff2c:	e0fffd17 	ldw	r3,-12(fp)
 800ff30:	00bfff84 	movi	r2,-2
 800ff34:	1884703a 	and	r2,r3,r2
 800ff38:	1001703a 	wrctl	status,r2
  return context;
 800ff3c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800ff40:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800ff44:	d0a00a17 	ldw	r2,-32728(gp)
 800ff48:	10c000c4 	addi	r3,r2,3
 800ff4c:	00bfff04 	movi	r2,-4
 800ff50:	1884703a 	and	r2,r3,r2
 800ff54:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800ff58:	d0e00a17 	ldw	r3,-32728(gp)
 800ff5c:	e0bffa17 	ldw	r2,-24(fp)
 800ff60:	1887883a 	add	r3,r3,r2
 800ff64:	00840034 	movhi	r2,4096
 800ff68:	10800004 	addi	r2,r2,0
 800ff6c:	10c0072e 	bgeu	r2,r3,800ff8c <sbrk+0x78>
 800ff70:	e0bfff17 	ldw	r2,-4(fp)
 800ff74:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800ff78:	e0bffc17 	ldw	r2,-16(fp)
 800ff7c:	1001703a 	wrctl	status,r2
}
 800ff80:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ff84:	00bfffc4 	movi	r2,-1
 800ff88:	00000c06 	br	800ffbc <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 800ff8c:	d0a00a17 	ldw	r2,-32728(gp)
 800ff90:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 800ff94:	d0e00a17 	ldw	r3,-32728(gp)
 800ff98:	e0bffa17 	ldw	r2,-24(fp)
 800ff9c:	1885883a 	add	r2,r3,r2
 800ffa0:	d0a00a15 	stw	r2,-32728(gp)
 800ffa4:	e0bfff17 	ldw	r2,-4(fp)
 800ffa8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 800ffac:	e0bffb17 	ldw	r2,-20(fp)
 800ffb0:	1001703a 	wrctl	status,r2
}
 800ffb4:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ffb8:	e0bffe17 	ldw	r2,-8(fp)
} 
 800ffbc:	e037883a 	mov	sp,fp
 800ffc0:	df000017 	ldw	fp,0(sp)
 800ffc4:	dec00104 	addi	sp,sp,4
 800ffc8:	f800283a 	ret

0800ffcc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800ffcc:	defffd04 	addi	sp,sp,-12
 800ffd0:	dfc00215 	stw	ra,8(sp)
 800ffd4:	df000115 	stw	fp,4(sp)
 800ffd8:	df000104 	addi	fp,sp,4
 800ffdc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800ffe0:	e13fff17 	ldw	r4,-4(fp)
 800ffe4:	8010da00 	call	8010da0 <alt_busy_sleep>
}
 800ffe8:	e037883a 	mov	sp,fp
 800ffec:	dfc00117 	ldw	ra,4(sp)
 800fff0:	df000017 	ldw	fp,0(sp)
 800fff4:	dec00204 	addi	sp,sp,8
 800fff8:	f800283a 	ret

0800fffc <alt_get_errno>:
{
 800fffc:	defffe04 	addi	sp,sp,-8
 8010000:	dfc00115 	stw	ra,4(sp)
 8010004:	df000015 	stw	fp,0(sp)
 8010008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801000c:	d0a00917 	ldw	r2,-32732(gp)
 8010010:	10000326 	beq	r2,zero,8010020 <alt_get_errno+0x24>
 8010014:	d0a00917 	ldw	r2,-32732(gp)
 8010018:	103ee83a 	callr	r2
 801001c:	00000106 	br	8010024 <alt_get_errno+0x28>
 8010020:	d0a70804 	addi	r2,gp,-25568
}
 8010024:	e037883a 	mov	sp,fp
 8010028:	dfc00117 	ldw	ra,4(sp)
 801002c:	df000017 	ldw	fp,0(sp)
 8010030:	dec00204 	addi	sp,sp,8
 8010034:	f800283a 	ret

08010038 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8010038:	defff904 	addi	sp,sp,-28
 801003c:	dfc00615 	stw	ra,24(sp)
 8010040:	df000515 	stw	fp,20(sp)
 8010044:	df000504 	addi	fp,sp,20
 8010048:	e13ffd15 	stw	r4,-12(fp)
 801004c:	e17ffc15 	stw	r5,-16(fp)
 8010050:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010054:	e0bffd17 	ldw	r2,-12(fp)
 8010058:	10000916 	blt	r2,zero,8010080 <write+0x48>
 801005c:	e0fffd17 	ldw	r3,-12(fp)
 8010060:	1805883a 	mov	r2,r3
 8010064:	1085883a 	add	r2,r2,r2
 8010068:	10c5883a 	add	r2,r2,r3
 801006c:	100490ba 	slli	r2,r2,2
 8010070:	00c20074 	movhi	r3,2049
 8010074:	18cd7904 	addi	r3,r3,13796
 8010078:	10c5883a 	add	r2,r2,r3
 801007c:	00000106 	br	8010084 <write+0x4c>
 8010080:	0005883a 	mov	r2,zero
 8010084:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 8010088:	e0bfff17 	ldw	r2,-4(fp)
 801008c:	10002126 	beq	r2,zero,8010114 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010090:	e0bfff17 	ldw	r2,-4(fp)
 8010094:	10800217 	ldw	r2,8(r2)
 8010098:	108000cc 	andi	r2,r2,3
 801009c:	10001826 	beq	r2,zero,8010100 <write+0xc8>
 80100a0:	e0bfff17 	ldw	r2,-4(fp)
 80100a4:	10800017 	ldw	r2,0(r2)
 80100a8:	10800617 	ldw	r2,24(r2)
 80100ac:	10001426 	beq	r2,zero,8010100 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80100b0:	e0bfff17 	ldw	r2,-4(fp)
 80100b4:	10800017 	ldw	r2,0(r2)
 80100b8:	10800617 	ldw	r2,24(r2)
 80100bc:	e0fffb17 	ldw	r3,-20(fp)
 80100c0:	180d883a 	mov	r6,r3
 80100c4:	e17ffc17 	ldw	r5,-16(fp)
 80100c8:	e13fff17 	ldw	r4,-4(fp)
 80100cc:	103ee83a 	callr	r2
 80100d0:	e0bffe15 	stw	r2,-8(fp)
 80100d4:	e0bffe17 	ldw	r2,-8(fp)
 80100d8:	1000070e 	bge	r2,zero,80100f8 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 80100dc:	800fffc0 	call	800fffc <alt_get_errno>
 80100e0:	1007883a 	mov	r3,r2
 80100e4:	e0bffe17 	ldw	r2,-8(fp)
 80100e8:	0085c83a 	sub	r2,zero,r2
 80100ec:	18800015 	stw	r2,0(r3)
        return -1;
 80100f0:	00bfffc4 	movi	r2,-1
 80100f4:	00000c06 	br	8010128 <write+0xf0>
      }
      return rval;
 80100f8:	e0bffe17 	ldw	r2,-8(fp)
 80100fc:	00000a06 	br	8010128 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8010100:	800fffc0 	call	800fffc <alt_get_errno>
 8010104:	1007883a 	mov	r3,r2
 8010108:	00800344 	movi	r2,13
 801010c:	18800015 	stw	r2,0(r3)
 8010110:	00000406 	br	8010124 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8010114:	800fffc0 	call	800fffc <alt_get_errno>
 8010118:	1007883a 	mov	r3,r2
 801011c:	00801444 	movi	r2,81
 8010120:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010124:	00bfffc4 	movi	r2,-1
}
 8010128:	e037883a 	mov	sp,fp
 801012c:	dfc00117 	ldw	ra,4(sp)
 8010130:	df000017 	ldw	fp,0(sp)
 8010134:	dec00204 	addi	sp,sp,8
 8010138:	f800283a 	ret

0801013c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 801013c:	defffd04 	addi	sp,sp,-12
 8010140:	dfc00215 	stw	ra,8(sp)
 8010144:	df000115 	stw	fp,4(sp)
 8010148:	df000104 	addi	fp,sp,4
 801014c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8010150:	d1600604 	addi	r5,gp,-32744
 8010154:	e13fff17 	ldw	r4,-4(fp)
 8010158:	8010f540 	call	8010f54 <alt_dev_llist_insert>
}
 801015c:	e037883a 	mov	sp,fp
 8010160:	dfc00117 	ldw	ra,4(sp)
 8010164:	df000017 	ldw	fp,0(sp)
 8010168:	dec00204 	addi	sp,sp,8
 801016c:	f800283a 	ret

08010170 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8010170:	defffd04 	addi	sp,sp,-12
 8010174:	dfc00215 	stw	ra,8(sp)
 8010178:	df000115 	stw	fp,4(sp)
 801017c:	df000104 	addi	fp,sp,4
 8010180:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8010184:	80118f00 	call	80118f0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8010188:	00800044 	movi	r2,1
 801018c:	1001703a 	wrctl	status,r2
}
 8010190:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 8010194:	0001883a 	nop
 8010198:	e037883a 	mov	sp,fp
 801019c:	dfc00117 	ldw	ra,4(sp)
 80101a0:	df000017 	ldw	fp,0(sp)
 80101a4:	dec00204 	addi	sp,sp,8
 80101a8:	f800283a 	ret

080101ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80101ac:	defffe04 	addi	sp,sp,-8
 80101b0:	dfc00115 	stw	ra,4(sp)
 80101b4:	df000015 	stw	fp,0(sp)
 80101b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80101bc:	000d883a 	mov	r6,zero
 80101c0:	000b883a 	mov	r5,zero
 80101c4:	01020074 	movhi	r4,2049
 80101c8:	210de304 	addi	r4,r4,14220
 80101cc:	801035c0 	call	801035c <altera_avalon_jtag_uart_init>
 80101d0:	01020074 	movhi	r4,2049
 80101d4:	210dd904 	addi	r4,r4,14180
 80101d8:	801013c0 	call	801013c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80101dc:	0001883a 	nop
}
 80101e0:	0001883a 	nop
 80101e4:	e037883a 	mov	sp,fp
 80101e8:	dfc00117 	ldw	ra,4(sp)
 80101ec:	df000017 	ldw	fp,0(sp)
 80101f0:	dec00204 	addi	sp,sp,8
 80101f4:	f800283a 	ret

080101f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80101f8:	defffa04 	addi	sp,sp,-24
 80101fc:	dfc00515 	stw	ra,20(sp)
 8010200:	df000415 	stw	fp,16(sp)
 8010204:	df000404 	addi	fp,sp,16
 8010208:	e13ffe15 	stw	r4,-8(fp)
 801020c:	e17ffd15 	stw	r5,-12(fp)
 8010210:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010214:	e0bffe17 	ldw	r2,-8(fp)
 8010218:	10800017 	ldw	r2,0(r2)
 801021c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8010220:	e0bfff17 	ldw	r2,-4(fp)
 8010224:	10c00a04 	addi	r3,r2,40
 8010228:	e0bffe17 	ldw	r2,-8(fp)
 801022c:	10800217 	ldw	r2,8(r2)
 8010230:	100f883a 	mov	r7,r2
 8010234:	e1bffc17 	ldw	r6,-16(fp)
 8010238:	e17ffd17 	ldw	r5,-12(fp)
 801023c:	1809883a 	mov	r4,r3
 8010240:	80108240 	call	8010824 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8010244:	e037883a 	mov	sp,fp
 8010248:	dfc00117 	ldw	ra,4(sp)
 801024c:	df000017 	ldw	fp,0(sp)
 8010250:	dec00204 	addi	sp,sp,8
 8010254:	f800283a 	ret

08010258 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8010258:	defffa04 	addi	sp,sp,-24
 801025c:	dfc00515 	stw	ra,20(sp)
 8010260:	df000415 	stw	fp,16(sp)
 8010264:	df000404 	addi	fp,sp,16
 8010268:	e13ffe15 	stw	r4,-8(fp)
 801026c:	e17ffd15 	stw	r5,-12(fp)
 8010270:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010274:	e0bffe17 	ldw	r2,-8(fp)
 8010278:	10800017 	ldw	r2,0(r2)
 801027c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8010280:	e0bfff17 	ldw	r2,-4(fp)
 8010284:	10c00a04 	addi	r3,r2,40
 8010288:	e0bffe17 	ldw	r2,-8(fp)
 801028c:	10800217 	ldw	r2,8(r2)
 8010290:	100f883a 	mov	r7,r2
 8010294:	e1bffc17 	ldw	r6,-16(fp)
 8010298:	e17ffd17 	ldw	r5,-12(fp)
 801029c:	1809883a 	mov	r4,r3
 80102a0:	8010a440 	call	8010a44 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80102a4:	e037883a 	mov	sp,fp
 80102a8:	dfc00117 	ldw	ra,4(sp)
 80102ac:	df000017 	ldw	fp,0(sp)
 80102b0:	dec00204 	addi	sp,sp,8
 80102b4:	f800283a 	ret

080102b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80102b8:	defffc04 	addi	sp,sp,-16
 80102bc:	dfc00315 	stw	ra,12(sp)
 80102c0:	df000215 	stw	fp,8(sp)
 80102c4:	df000204 	addi	fp,sp,8
 80102c8:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80102cc:	e0bffe17 	ldw	r2,-8(fp)
 80102d0:	10800017 	ldw	r2,0(r2)
 80102d4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80102d8:	e0bfff17 	ldw	r2,-4(fp)
 80102dc:	10c00a04 	addi	r3,r2,40
 80102e0:	e0bffe17 	ldw	r2,-8(fp)
 80102e4:	10800217 	ldw	r2,8(r2)
 80102e8:	100b883a 	mov	r5,r2
 80102ec:	1809883a 	mov	r4,r3
 80102f0:	80106c80 	call	80106c8 <altera_avalon_jtag_uart_close>
}
 80102f4:	e037883a 	mov	sp,fp
 80102f8:	dfc00117 	ldw	ra,4(sp)
 80102fc:	df000017 	ldw	fp,0(sp)
 8010300:	dec00204 	addi	sp,sp,8
 8010304:	f800283a 	ret

08010308 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8010308:	defffa04 	addi	sp,sp,-24
 801030c:	dfc00515 	stw	ra,20(sp)
 8010310:	df000415 	stw	fp,16(sp)
 8010314:	df000404 	addi	fp,sp,16
 8010318:	e13ffe15 	stw	r4,-8(fp)
 801031c:	e17ffd15 	stw	r5,-12(fp)
 8010320:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8010324:	e0bffe17 	ldw	r2,-8(fp)
 8010328:	10800017 	ldw	r2,0(r2)
 801032c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8010330:	e0bfff17 	ldw	r2,-4(fp)
 8010334:	10800a04 	addi	r2,r2,40
 8010338:	e1bffc17 	ldw	r6,-16(fp)
 801033c:	e17ffd17 	ldw	r5,-12(fp)
 8010340:	1009883a 	mov	r4,r2
 8010344:	80107300 	call	8010730 <altera_avalon_jtag_uart_ioctl>
}
 8010348:	e037883a 	mov	sp,fp
 801034c:	dfc00117 	ldw	ra,4(sp)
 8010350:	df000017 	ldw	fp,0(sp)
 8010354:	dec00204 	addi	sp,sp,8
 8010358:	f800283a 	ret

0801035c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801035c:	defffa04 	addi	sp,sp,-24
 8010360:	dfc00515 	stw	ra,20(sp)
 8010364:	df000415 	stw	fp,16(sp)
 8010368:	df000404 	addi	fp,sp,16
 801036c:	e13fff15 	stw	r4,-4(fp)
 8010370:	e17ffe15 	stw	r5,-8(fp)
 8010374:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010378:	e0bfff17 	ldw	r2,-4(fp)
 801037c:	00c00044 	movi	r3,1
 8010380:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010384:	e0bfff17 	ldw	r2,-4(fp)
 8010388:	10800017 	ldw	r2,0(r2)
 801038c:	10800104 	addi	r2,r2,4
 8010390:	1007883a 	mov	r3,r2
 8010394:	e0bfff17 	ldw	r2,-4(fp)
 8010398:	10800817 	ldw	r2,32(r2)
 801039c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80103a0:	e0bffe17 	ldw	r2,-8(fp)
 80103a4:	e0fffd17 	ldw	r3,-12(fp)
 80103a8:	d8000015 	stw	zero,0(sp)
 80103ac:	e1ffff17 	ldw	r7,-4(fp)
 80103b0:	01820074 	movhi	r6,2049
 80103b4:	31810704 	addi	r6,r6,1052
 80103b8:	180b883a 	mov	r5,r3
 80103bc:	1009883a 	mov	r4,r2
 80103c0:	80110e40 	call	80110e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80103c4:	e0bfff17 	ldw	r2,-4(fp)
 80103c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80103cc:	e0bfff17 	ldw	r2,-4(fp)
 80103d0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80103d4:	d0e70e17 	ldw	r3,-25544(gp)
 80103d8:	e1ffff17 	ldw	r7,-4(fp)
 80103dc:	01820074 	movhi	r6,2049
 80103e0:	31818a04 	addi	r6,r6,1576
 80103e4:	180b883a 	mov	r5,r3
 80103e8:	1009883a 	mov	r4,r2
 80103ec:	8010c6c0 	call	8010c6c <alt_alarm_start>
 80103f0:	1000040e 	bge	r2,zero,8010404 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80103f4:	e0ffff17 	ldw	r3,-4(fp)
 80103f8:	00a00034 	movhi	r2,32768
 80103fc:	10bfffc4 	addi	r2,r2,-1
 8010400:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8010404:	0001883a 	nop
 8010408:	e037883a 	mov	sp,fp
 801040c:	dfc00117 	ldw	ra,4(sp)
 8010410:	df000017 	ldw	fp,0(sp)
 8010414:	dec00204 	addi	sp,sp,8
 8010418:	f800283a 	ret

0801041c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801041c:	defff804 	addi	sp,sp,-32
 8010420:	df000715 	stw	fp,28(sp)
 8010424:	df000704 	addi	fp,sp,28
 8010428:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801042c:	e0bff917 	ldw	r2,-28(fp)
 8010430:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8010434:	e0bffd17 	ldw	r2,-12(fp)
 8010438:	10800017 	ldw	r2,0(r2)
 801043c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010440:	e0bffc17 	ldw	r2,-16(fp)
 8010444:	10800104 	addi	r2,r2,4
 8010448:	10800037 	ldwio	r2,0(r2)
 801044c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010450:	e0bffb17 	ldw	r2,-20(fp)
 8010454:	1080c00c 	andi	r2,r2,768
 8010458:	10006d26 	beq	r2,zero,8010610 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801045c:	e0bffb17 	ldw	r2,-20(fp)
 8010460:	1080400c 	andi	r2,r2,256
 8010464:	10003526 	beq	r2,zero,801053c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8010468:	00800074 	movhi	r2,1
 801046c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010470:	e0bffd17 	ldw	r2,-12(fp)
 8010474:	10800a17 	ldw	r2,40(r2)
 8010478:	10800044 	addi	r2,r2,1
 801047c:	1081ffcc 	andi	r2,r2,2047
 8010480:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8010484:	e0bffd17 	ldw	r2,-12(fp)
 8010488:	10800b17 	ldw	r2,44(r2)
 801048c:	e0fffa17 	ldw	r3,-24(fp)
 8010490:	18801526 	beq	r3,r2,80104e8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8010494:	e0bffc17 	ldw	r2,-16(fp)
 8010498:	10800037 	ldwio	r2,0(r2)
 801049c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80104a0:	e0bfff17 	ldw	r2,-4(fp)
 80104a4:	10a0000c 	andi	r2,r2,32768
 80104a8:	10001126 	beq	r2,zero,80104f0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80104ac:	e0bffd17 	ldw	r2,-12(fp)
 80104b0:	10800a17 	ldw	r2,40(r2)
 80104b4:	e0ffff17 	ldw	r3,-4(fp)
 80104b8:	1809883a 	mov	r4,r3
 80104bc:	e0fffd17 	ldw	r3,-12(fp)
 80104c0:	1885883a 	add	r2,r3,r2
 80104c4:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80104c8:	e0bffd17 	ldw	r2,-12(fp)
 80104cc:	10800a17 	ldw	r2,40(r2)
 80104d0:	10800044 	addi	r2,r2,1
 80104d4:	10c1ffcc 	andi	r3,r2,2047
 80104d8:	e0bffd17 	ldw	r2,-12(fp)
 80104dc:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 80104e0:	0001883a 	nop
      {
 80104e4:	003fe206 	br	8010470 <altera_avalon_jtag_uart_irq+0x54>
          break;
 80104e8:	0001883a 	nop
 80104ec:	00000106 	br	80104f4 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 80104f0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80104f4:	e0bfff17 	ldw	r2,-4(fp)
 80104f8:	10bfffec 	andhi	r2,r2,65535
 80104fc:	10000f26 	beq	r2,zero,801053c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010500:	e0bffd17 	ldw	r2,-12(fp)
 8010504:	10c00817 	ldw	r3,32(r2)
 8010508:	00bfff84 	movi	r2,-2
 801050c:	1886703a 	and	r3,r3,r2
 8010510:	e0bffd17 	ldw	r2,-12(fp)
 8010514:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8010518:	e0bffc17 	ldw	r2,-16(fp)
 801051c:	10800104 	addi	r2,r2,4
 8010520:	1007883a 	mov	r3,r2
 8010524:	e0bffd17 	ldw	r2,-12(fp)
 8010528:	10800817 	ldw	r2,32(r2)
 801052c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010530:	e0bffc17 	ldw	r2,-16(fp)
 8010534:	10800104 	addi	r2,r2,4
 8010538:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801053c:	e0bffb17 	ldw	r2,-20(fp)
 8010540:	1080800c 	andi	r2,r2,512
 8010544:	103fbe26 	beq	r2,zero,8010440 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8010548:	e0bffb17 	ldw	r2,-20(fp)
 801054c:	1004d43a 	srli	r2,r2,16
 8010550:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010554:	00001406 	br	80105a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8010558:	e0bffc17 	ldw	r2,-16(fp)
 801055c:	e0fffd17 	ldw	r3,-12(fp)
 8010560:	18c00d17 	ldw	r3,52(r3)
 8010564:	e13ffd17 	ldw	r4,-12(fp)
 8010568:	20c7883a 	add	r3,r4,r3
 801056c:	18c20e03 	ldbu	r3,2104(r3)
 8010570:	18c03fcc 	andi	r3,r3,255
 8010574:	18c0201c 	xori	r3,r3,128
 8010578:	18ffe004 	addi	r3,r3,-128
 801057c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010580:	e0bffd17 	ldw	r2,-12(fp)
 8010584:	10800d17 	ldw	r2,52(r2)
 8010588:	10800044 	addi	r2,r2,1
 801058c:	10c1ffcc 	andi	r3,r2,2047
 8010590:	e0bffd17 	ldw	r2,-12(fp)
 8010594:	10c00d15 	stw	r3,52(r2)
 8010598:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801059c:	e0bffe17 	ldw	r2,-8(fp)
 80105a0:	10bfffc4 	addi	r2,r2,-1
 80105a4:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 80105a8:	e0bffe17 	ldw	r2,-8(fp)
 80105ac:	10000526 	beq	r2,zero,80105c4 <altera_avalon_jtag_uart_irq+0x1a8>
 80105b0:	e0bffd17 	ldw	r2,-12(fp)
 80105b4:	10c00d17 	ldw	r3,52(r2)
 80105b8:	e0bffd17 	ldw	r2,-12(fp)
 80105bc:	10800c17 	ldw	r2,48(r2)
 80105c0:	18bfe51e 	bne	r3,r2,8010558 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 80105c4:	e0bffe17 	ldw	r2,-8(fp)
 80105c8:	103f9d26 	beq	r2,zero,8010440 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80105cc:	e0bffd17 	ldw	r2,-12(fp)
 80105d0:	10c00817 	ldw	r3,32(r2)
 80105d4:	00bfff44 	movi	r2,-3
 80105d8:	1886703a 	and	r3,r3,r2
 80105dc:	e0bffd17 	ldw	r2,-12(fp)
 80105e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80105e4:	e0bffd17 	ldw	r2,-12(fp)
 80105e8:	10800017 	ldw	r2,0(r2)
 80105ec:	10800104 	addi	r2,r2,4
 80105f0:	1007883a 	mov	r3,r2
 80105f4:	e0bffd17 	ldw	r2,-12(fp)
 80105f8:	10800817 	ldw	r2,32(r2)
 80105fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010600:	e0bffc17 	ldw	r2,-16(fp)
 8010604:	10800104 	addi	r2,r2,4
 8010608:	10800037 	ldwio	r2,0(r2)
  {
 801060c:	003f8c06 	br	8010440 <altera_avalon_jtag_uart_irq+0x24>
      break;
 8010610:	0001883a 	nop
      }
    }
  }
}
 8010614:	0001883a 	nop
 8010618:	e037883a 	mov	sp,fp
 801061c:	df000017 	ldw	fp,0(sp)
 8010620:	dec00104 	addi	sp,sp,4
 8010624:	f800283a 	ret

08010628 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8010628:	defffc04 	addi	sp,sp,-16
 801062c:	df000315 	stw	fp,12(sp)
 8010630:	df000304 	addi	fp,sp,12
 8010634:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8010638:	e0bffd17 	ldw	r2,-12(fp)
 801063c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8010640:	e0bfff17 	ldw	r2,-4(fp)
 8010644:	10800017 	ldw	r2,0(r2)
 8010648:	10800104 	addi	r2,r2,4
 801064c:	10800037 	ldwio	r2,0(r2)
 8010650:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8010654:	e0bffe17 	ldw	r2,-8(fp)
 8010658:	1081000c 	andi	r2,r2,1024
 801065c:	10000b26 	beq	r2,zero,801068c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8010660:	e0bfff17 	ldw	r2,-4(fp)
 8010664:	10800017 	ldw	r2,0(r2)
 8010668:	10800104 	addi	r2,r2,4
 801066c:	1007883a 	mov	r3,r2
 8010670:	e0bfff17 	ldw	r2,-4(fp)
 8010674:	10800817 	ldw	r2,32(r2)
 8010678:	10810014 	ori	r2,r2,1024
 801067c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8010680:	e0bfff17 	ldw	r2,-4(fp)
 8010684:	10000915 	stw	zero,36(r2)
 8010688:	00000a06 	br	80106b4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801068c:	e0bfff17 	ldw	r2,-4(fp)
 8010690:	10c00917 	ldw	r3,36(r2)
 8010694:	00a00034 	movhi	r2,32768
 8010698:	10bfff04 	addi	r2,r2,-4
 801069c:	10c00536 	bltu	r2,r3,80106b4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80106a0:	e0bfff17 	ldw	r2,-4(fp)
 80106a4:	10800917 	ldw	r2,36(r2)
 80106a8:	10c00044 	addi	r3,r2,1
 80106ac:	e0bfff17 	ldw	r2,-4(fp)
 80106b0:	10c00915 	stw	r3,36(r2)
 80106b4:	d0a70e17 	ldw	r2,-25544(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80106b8:	e037883a 	mov	sp,fp
 80106bc:	df000017 	ldw	fp,0(sp)
 80106c0:	dec00104 	addi	sp,sp,4
 80106c4:	f800283a 	ret

080106c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80106c8:	defffd04 	addi	sp,sp,-12
 80106cc:	df000215 	stw	fp,8(sp)
 80106d0:	df000204 	addi	fp,sp,8
 80106d4:	e13fff15 	stw	r4,-4(fp)
 80106d8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80106dc:	00000506 	br	80106f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80106e0:	e0bffe17 	ldw	r2,-8(fp)
 80106e4:	1090000c 	andi	r2,r2,16384
 80106e8:	10000226 	beq	r2,zero,80106f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80106ec:	00bffd44 	movi	r2,-11
 80106f0:	00000b06 	br	8010720 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80106f4:	e0bfff17 	ldw	r2,-4(fp)
 80106f8:	10c00d17 	ldw	r3,52(r2)
 80106fc:	e0bfff17 	ldw	r2,-4(fp)
 8010700:	10800c17 	ldw	r2,48(r2)
 8010704:	18800526 	beq	r3,r2,801071c <altera_avalon_jtag_uart_close+0x54>
 8010708:	e0bfff17 	ldw	r2,-4(fp)
 801070c:	10c00917 	ldw	r3,36(r2)
 8010710:	e0bfff17 	ldw	r2,-4(fp)
 8010714:	10800117 	ldw	r2,4(r2)
 8010718:	18bff136 	bltu	r3,r2,80106e0 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 801071c:	0005883a 	mov	r2,zero
}
 8010720:	e037883a 	mov	sp,fp
 8010724:	df000017 	ldw	fp,0(sp)
 8010728:	dec00104 	addi	sp,sp,4
 801072c:	f800283a 	ret

08010730 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8010730:	defffa04 	addi	sp,sp,-24
 8010734:	df000515 	stw	fp,20(sp)
 8010738:	df000504 	addi	fp,sp,20
 801073c:	e13ffd15 	stw	r4,-12(fp)
 8010740:	e17ffc15 	stw	r5,-16(fp)
 8010744:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 8010748:	00bff9c4 	movi	r2,-25
 801074c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 8010750:	e0bffc17 	ldw	r2,-16(fp)
 8010754:	109a8060 	cmpeqi	r2,r2,27137
 8010758:	1000041e 	bne	r2,zero,801076c <altera_avalon_jtag_uart_ioctl+0x3c>
 801075c:	e0bffc17 	ldw	r2,-16(fp)
 8010760:	109a80a0 	cmpeqi	r2,r2,27138
 8010764:	1000181e 	bne	r2,zero,80107c8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8010768:	00002906 	br	8010810 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 801076c:	e0bffd17 	ldw	r2,-12(fp)
 8010770:	10c00117 	ldw	r3,4(r2)
 8010774:	00a00034 	movhi	r2,32768
 8010778:	10bfffc4 	addi	r2,r2,-1
 801077c:	18802126 	beq	r3,r2,8010804 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 8010780:	e0bffb17 	ldw	r2,-20(fp)
 8010784:	10800017 	ldw	r2,0(r2)
 8010788:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801078c:	e0bffe17 	ldw	r2,-8(fp)
 8010790:	10800090 	cmplti	r2,r2,2
 8010794:	1000061e 	bne	r2,zero,80107b0 <altera_avalon_jtag_uart_ioctl+0x80>
 8010798:	e0fffe17 	ldw	r3,-8(fp)
 801079c:	00a00034 	movhi	r2,32768
 80107a0:	10bfffc4 	addi	r2,r2,-1
 80107a4:	18800226 	beq	r3,r2,80107b0 <altera_avalon_jtag_uart_ioctl+0x80>
 80107a8:	e0bffe17 	ldw	r2,-8(fp)
 80107ac:	00000206 	br	80107b8 <altera_avalon_jtag_uart_ioctl+0x88>
 80107b0:	00a00034 	movhi	r2,32768
 80107b4:	10bfff84 	addi	r2,r2,-2
 80107b8:	e0fffd17 	ldw	r3,-12(fp)
 80107bc:	18800115 	stw	r2,4(r3)
      rc = 0;
 80107c0:	e03fff15 	stw	zero,-4(fp)
    break;
 80107c4:	00000f06 	br	8010804 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 80107c8:	e0bffd17 	ldw	r2,-12(fp)
 80107cc:	10c00117 	ldw	r3,4(r2)
 80107d0:	00a00034 	movhi	r2,32768
 80107d4:	10bfffc4 	addi	r2,r2,-1
 80107d8:	18800c26 	beq	r3,r2,801080c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80107dc:	e0bffd17 	ldw	r2,-12(fp)
 80107e0:	10c00917 	ldw	r3,36(r2)
 80107e4:	e0bffd17 	ldw	r2,-12(fp)
 80107e8:	10800117 	ldw	r2,4(r2)
 80107ec:	1885803a 	cmpltu	r2,r3,r2
 80107f0:	10c03fcc 	andi	r3,r2,255
 80107f4:	e0bffb17 	ldw	r2,-20(fp)
 80107f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80107fc:	e03fff15 	stw	zero,-4(fp)
    break;
 8010800:	00000206 	br	801080c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8010804:	0001883a 	nop
 8010808:	00000106 	br	8010810 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 801080c:	0001883a 	nop
  }

  return rc;
 8010810:	e0bfff17 	ldw	r2,-4(fp)
}
 8010814:	e037883a 	mov	sp,fp
 8010818:	df000017 	ldw	fp,0(sp)
 801081c:	dec00104 	addi	sp,sp,4
 8010820:	f800283a 	ret

08010824 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8010824:	defff304 	addi	sp,sp,-52
 8010828:	dfc00c15 	stw	ra,48(sp)
 801082c:	df000b15 	stw	fp,44(sp)
 8010830:	df000b04 	addi	fp,sp,44
 8010834:	e13ff815 	stw	r4,-32(fp)
 8010838:	e17ff715 	stw	r5,-36(fp)
 801083c:	e1bff615 	stw	r6,-40(fp)
 8010840:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 8010844:	e0bff717 	ldw	r2,-36(fp)
 8010848:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801084c:	00004706 	br	801096c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010850:	e0bff817 	ldw	r2,-32(fp)
 8010854:	10800a17 	ldw	r2,40(r2)
 8010858:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 801085c:	e0bff817 	ldw	r2,-32(fp)
 8010860:	10800b17 	ldw	r2,44(r2)
 8010864:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 8010868:	e0fffd17 	ldw	r3,-12(fp)
 801086c:	e0bffc17 	ldw	r2,-16(fp)
 8010870:	18800536 	bltu	r3,r2,8010888 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8010874:	e0fffd17 	ldw	r3,-12(fp)
 8010878:	e0bffc17 	ldw	r2,-16(fp)
 801087c:	1885c83a 	sub	r2,r3,r2
 8010880:	e0bffe15 	stw	r2,-8(fp)
 8010884:	00000406 	br	8010898 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010888:	00c20004 	movi	r3,2048
 801088c:	e0bffc17 	ldw	r2,-16(fp)
 8010890:	1885c83a 	sub	r2,r3,r2
 8010894:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8010898:	e0bffe17 	ldw	r2,-8(fp)
 801089c:	10001e26 	beq	r2,zero,8010918 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80108a0:	e0fff617 	ldw	r3,-40(fp)
 80108a4:	e0bffe17 	ldw	r2,-8(fp)
 80108a8:	1880022e 	bgeu	r3,r2,80108b4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80108ac:	e0bff617 	ldw	r2,-40(fp)
 80108b0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80108b4:	e0bff817 	ldw	r2,-32(fp)
 80108b8:	10c00e04 	addi	r3,r2,56
 80108bc:	e0bffc17 	ldw	r2,-16(fp)
 80108c0:	1885883a 	add	r2,r3,r2
 80108c4:	e1bffe17 	ldw	r6,-8(fp)
 80108c8:	100b883a 	mov	r5,r2
 80108cc:	e13fff17 	ldw	r4,-4(fp)
 80108d0:	8007e100 	call	8007e10 <memcpy>
      ptr   += n;
 80108d4:	e0ffff17 	ldw	r3,-4(fp)
 80108d8:	e0bffe17 	ldw	r2,-8(fp)
 80108dc:	1885883a 	add	r2,r3,r2
 80108e0:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 80108e4:	e0fff617 	ldw	r3,-40(fp)
 80108e8:	e0bffe17 	ldw	r2,-8(fp)
 80108ec:	1885c83a 	sub	r2,r3,r2
 80108f0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80108f4:	e0fffc17 	ldw	r3,-16(fp)
 80108f8:	e0bffe17 	ldw	r2,-8(fp)
 80108fc:	1885883a 	add	r2,r3,r2
 8010900:	10c1ffcc 	andi	r3,r2,2047
 8010904:	e0bff817 	ldw	r2,-32(fp)
 8010908:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 801090c:	e0bff617 	ldw	r2,-40(fp)
 8010910:	00bfcf16 	blt	zero,r2,8010850 <altera_avalon_jtag_uart_read+0x2c>
 8010914:	00000106 	br	801091c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 8010918:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 801091c:	e0ffff17 	ldw	r3,-4(fp)
 8010920:	e0bff717 	ldw	r2,-36(fp)
 8010924:	1880141e 	bne	r3,r2,8010978 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8010928:	e0bff517 	ldw	r2,-44(fp)
 801092c:	1090000c 	andi	r2,r2,16384
 8010930:	1000131e 	bne	r2,zero,8010980 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010934:	0001883a 	nop
 8010938:	e0bff817 	ldw	r2,-32(fp)
 801093c:	10800a17 	ldw	r2,40(r2)
 8010940:	e0fffd17 	ldw	r3,-12(fp)
 8010944:	1880051e 	bne	r3,r2,801095c <altera_avalon_jtag_uart_read+0x138>
 8010948:	e0bff817 	ldw	r2,-32(fp)
 801094c:	10c00917 	ldw	r3,36(r2)
 8010950:	e0bff817 	ldw	r2,-32(fp)
 8010954:	10800117 	ldw	r2,4(r2)
 8010958:	18bff736 	bltu	r3,r2,8010938 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801095c:	e0bff817 	ldw	r2,-32(fp)
 8010960:	10800a17 	ldw	r2,40(r2)
 8010964:	e0fffd17 	ldw	r3,-12(fp)
 8010968:	18800726 	beq	r3,r2,8010988 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 801096c:	e0bff617 	ldw	r2,-40(fp)
 8010970:	00bfb716 	blt	zero,r2,8010850 <altera_avalon_jtag_uart_read+0x2c>
 8010974:	00000506 	br	801098c <altera_avalon_jtag_uart_read+0x168>
      break;
 8010978:	0001883a 	nop
 801097c:	00000306 	br	801098c <altera_avalon_jtag_uart_read+0x168>
      break;
 8010980:	0001883a 	nop
 8010984:	00000106 	br	801098c <altera_avalon_jtag_uart_read+0x168>
      break;
 8010988:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801098c:	e0ffff17 	ldw	r3,-4(fp)
 8010990:	e0bff717 	ldw	r2,-36(fp)
 8010994:	18801926 	beq	r3,r2,80109fc <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 8010998:	0005303a 	rdctl	r2,status
 801099c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80109a0:	e0fff917 	ldw	r3,-28(fp)
 80109a4:	00bfff84 	movi	r2,-2
 80109a8:	1884703a 	and	r2,r3,r2
 80109ac:	1001703a 	wrctl	status,r2
  return context;
 80109b0:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80109b4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80109b8:	e0bff817 	ldw	r2,-32(fp)
 80109bc:	10800817 	ldw	r2,32(r2)
 80109c0:	10c00054 	ori	r3,r2,1
 80109c4:	e0bff817 	ldw	r2,-32(fp)
 80109c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80109cc:	e0bff817 	ldw	r2,-32(fp)
 80109d0:	10800017 	ldw	r2,0(r2)
 80109d4:	10800104 	addi	r2,r2,4
 80109d8:	1007883a 	mov	r3,r2
 80109dc:	e0bff817 	ldw	r2,-32(fp)
 80109e0:	10800817 	ldw	r2,32(r2)
 80109e4:	18800035 	stwio	r2,0(r3)
 80109e8:	e0bffb17 	ldw	r2,-20(fp)
 80109ec:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80109f0:	e0bffa17 	ldw	r2,-24(fp)
 80109f4:	1001703a 	wrctl	status,r2
}
 80109f8:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80109fc:	e0ffff17 	ldw	r3,-4(fp)
 8010a00:	e0bff717 	ldw	r2,-36(fp)
 8010a04:	18800426 	beq	r3,r2,8010a18 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 8010a08:	e0ffff17 	ldw	r3,-4(fp)
 8010a0c:	e0bff717 	ldw	r2,-36(fp)
 8010a10:	1885c83a 	sub	r2,r3,r2
 8010a14:	00000606 	br	8010a30 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 8010a18:	e0bff517 	ldw	r2,-44(fp)
 8010a1c:	1090000c 	andi	r2,r2,16384
 8010a20:	10000226 	beq	r2,zero,8010a2c <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 8010a24:	00bffd44 	movi	r2,-11
 8010a28:	00000106 	br	8010a30 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 8010a2c:	00bffec4 	movi	r2,-5
}
 8010a30:	e037883a 	mov	sp,fp
 8010a34:	dfc00117 	ldw	ra,4(sp)
 8010a38:	df000017 	ldw	fp,0(sp)
 8010a3c:	dec00204 	addi	sp,sp,8
 8010a40:	f800283a 	ret

08010a44 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010a44:	defff304 	addi	sp,sp,-52
 8010a48:	dfc00c15 	stw	ra,48(sp)
 8010a4c:	df000b15 	stw	fp,44(sp)
 8010a50:	df000b04 	addi	fp,sp,44
 8010a54:	e13ff815 	stw	r4,-32(fp)
 8010a58:	e17ff715 	stw	r5,-36(fp)
 8010a5c:	e1bff615 	stw	r6,-40(fp)
 8010a60:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010a64:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8010a68:	e0bff717 	ldw	r2,-36(fp)
 8010a6c:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010a70:	00003706 	br	8010b50 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010a74:	e0bff817 	ldw	r2,-32(fp)
 8010a78:	10800c17 	ldw	r2,48(r2)
 8010a7c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 8010a80:	e0bff817 	ldw	r2,-32(fp)
 8010a84:	10800d17 	ldw	r2,52(r2)
 8010a88:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 8010a8c:	e0fffc17 	ldw	r3,-16(fp)
 8010a90:	e0bfff17 	ldw	r2,-4(fp)
 8010a94:	1880062e 	bgeu	r3,r2,8010ab0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8010a98:	e0ffff17 	ldw	r3,-4(fp)
 8010a9c:	e0bffc17 	ldw	r2,-16(fp)
 8010aa0:	1885c83a 	sub	r2,r3,r2
 8010aa4:	10bfffc4 	addi	r2,r2,-1
 8010aa8:	e0bffe15 	stw	r2,-8(fp)
 8010aac:	00000b06 	br	8010adc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8010ab0:	e0bfff17 	ldw	r2,-4(fp)
 8010ab4:	10000526 	beq	r2,zero,8010acc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010ab8:	00c20004 	movi	r3,2048
 8010abc:	e0bffc17 	ldw	r2,-16(fp)
 8010ac0:	1885c83a 	sub	r2,r3,r2
 8010ac4:	e0bffe15 	stw	r2,-8(fp)
 8010ac8:	00000406 	br	8010adc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010acc:	00c1ffc4 	movi	r3,2047
 8010ad0:	e0bffc17 	ldw	r2,-16(fp)
 8010ad4:	1885c83a 	sub	r2,r3,r2
 8010ad8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8010adc:	e0bffe17 	ldw	r2,-8(fp)
 8010ae0:	10001e26 	beq	r2,zero,8010b5c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8010ae4:	e0fff617 	ldw	r3,-40(fp)
 8010ae8:	e0bffe17 	ldw	r2,-8(fp)
 8010aec:	1880022e 	bgeu	r3,r2,8010af8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8010af0:	e0bff617 	ldw	r2,-40(fp)
 8010af4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8010af8:	e0bff817 	ldw	r2,-32(fp)
 8010afc:	10c20e04 	addi	r3,r2,2104
 8010b00:	e0bffc17 	ldw	r2,-16(fp)
 8010b04:	1885883a 	add	r2,r3,r2
 8010b08:	e1bffe17 	ldw	r6,-8(fp)
 8010b0c:	e17ff717 	ldw	r5,-36(fp)
 8010b10:	1009883a 	mov	r4,r2
 8010b14:	8007e100 	call	8007e10 <memcpy>
      ptr   += n;
 8010b18:	e0fff717 	ldw	r3,-36(fp)
 8010b1c:	e0bffe17 	ldw	r2,-8(fp)
 8010b20:	1885883a 	add	r2,r3,r2
 8010b24:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 8010b28:	e0fff617 	ldw	r3,-40(fp)
 8010b2c:	e0bffe17 	ldw	r2,-8(fp)
 8010b30:	1885c83a 	sub	r2,r3,r2
 8010b34:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010b38:	e0fffc17 	ldw	r3,-16(fp)
 8010b3c:	e0bffe17 	ldw	r2,-8(fp)
 8010b40:	1885883a 	add	r2,r3,r2
 8010b44:	10c1ffcc 	andi	r3,r2,2047
 8010b48:	e0bff817 	ldw	r2,-32(fp)
 8010b4c:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 8010b50:	e0bff617 	ldw	r2,-40(fp)
 8010b54:	00bfc716 	blt	zero,r2,8010a74 <altera_avalon_jtag_uart_write+0x30>
 8010b58:	00000106 	br	8010b60 <altera_avalon_jtag_uart_write+0x11c>
        break;
 8010b5c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8010b60:	0005303a 	rdctl	r2,status
 8010b64:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010b68:	e0fff917 	ldw	r3,-28(fp)
 8010b6c:	00bfff84 	movi	r2,-2
 8010b70:	1884703a 	and	r2,r3,r2
 8010b74:	1001703a 	wrctl	status,r2
  return context;
 8010b78:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010b7c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010b80:	e0bff817 	ldw	r2,-32(fp)
 8010b84:	10800817 	ldw	r2,32(r2)
 8010b88:	10c00094 	ori	r3,r2,2
 8010b8c:	e0bff817 	ldw	r2,-32(fp)
 8010b90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010b94:	e0bff817 	ldw	r2,-32(fp)
 8010b98:	10800017 	ldw	r2,0(r2)
 8010b9c:	10800104 	addi	r2,r2,4
 8010ba0:	1007883a 	mov	r3,r2
 8010ba4:	e0bff817 	ldw	r2,-32(fp)
 8010ba8:	10800817 	ldw	r2,32(r2)
 8010bac:	18800035 	stwio	r2,0(r3)
 8010bb0:	e0bffb17 	ldw	r2,-20(fp)
 8010bb4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8010bb8:	e0bffa17 	ldw	r2,-24(fp)
 8010bbc:	1001703a 	wrctl	status,r2
}
 8010bc0:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8010bc4:	e0bff617 	ldw	r2,-40(fp)
 8010bc8:	0080100e 	bge	zero,r2,8010c0c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8010bcc:	e0bff517 	ldw	r2,-44(fp)
 8010bd0:	1090000c 	andi	r2,r2,16384
 8010bd4:	1000101e 	bne	r2,zero,8010c18 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010bd8:	0001883a 	nop
 8010bdc:	e0bff817 	ldw	r2,-32(fp)
 8010be0:	10800d17 	ldw	r2,52(r2)
 8010be4:	e0ffff17 	ldw	r3,-4(fp)
 8010be8:	1880051e 	bne	r3,r2,8010c00 <altera_avalon_jtag_uart_write+0x1bc>
 8010bec:	e0bff817 	ldw	r2,-32(fp)
 8010bf0:	10c00917 	ldw	r3,36(r2)
 8010bf4:	e0bff817 	ldw	r2,-32(fp)
 8010bf8:	10800117 	ldw	r2,4(r2)
 8010bfc:	18bff736 	bltu	r3,r2,8010bdc <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010c00:	e0bff817 	ldw	r2,-32(fp)
 8010c04:	10800917 	ldw	r2,36(r2)
 8010c08:	1000051e 	bne	r2,zero,8010c20 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 8010c0c:	e0bff617 	ldw	r2,-40(fp)
 8010c10:	00bfcf16 	blt	zero,r2,8010b50 <altera_avalon_jtag_uart_write+0x10c>
 8010c14:	00000306 	br	8010c24 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 8010c18:	0001883a 	nop
 8010c1c:	00000106 	br	8010c24 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 8010c20:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010c24:	e0fff717 	ldw	r3,-36(fp)
 8010c28:	e0bffd17 	ldw	r2,-12(fp)
 8010c2c:	18800426 	beq	r3,r2,8010c40 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 8010c30:	e0fff717 	ldw	r3,-36(fp)
 8010c34:	e0bffd17 	ldw	r2,-12(fp)
 8010c38:	1885c83a 	sub	r2,r3,r2
 8010c3c:	00000606 	br	8010c58 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 8010c40:	e0bff517 	ldw	r2,-44(fp)
 8010c44:	1090000c 	andi	r2,r2,16384
 8010c48:	10000226 	beq	r2,zero,8010c54 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 8010c4c:	00bffd44 	movi	r2,-11
 8010c50:	00000106 	br	8010c58 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010c54:	00bffec4 	movi	r2,-5
}
 8010c58:	e037883a 	mov	sp,fp
 8010c5c:	dfc00117 	ldw	ra,4(sp)
 8010c60:	df000017 	ldw	fp,0(sp)
 8010c64:	dec00204 	addi	sp,sp,8
 8010c68:	f800283a 	ret

08010c6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010c6c:	defff504 	addi	sp,sp,-44
 8010c70:	df000a15 	stw	fp,40(sp)
 8010c74:	df000a04 	addi	fp,sp,40
 8010c78:	e13ff915 	stw	r4,-28(fp)
 8010c7c:	e17ff815 	stw	r5,-32(fp)
 8010c80:	e1bff715 	stw	r6,-36(fp)
 8010c84:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010c88:	e03fff15 	stw	zero,-4(fp)
 8010c8c:	d0a70e17 	ldw	r2,-25544(gp)
  
  if (alt_ticks_per_second ())
 8010c90:	10003e26 	beq	r2,zero,8010d8c <alt_alarm_start+0x120>
  {
    if (alarm)
 8010c94:	e0bff917 	ldw	r2,-28(fp)
 8010c98:	10003a26 	beq	r2,zero,8010d84 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 8010c9c:	e0bff917 	ldw	r2,-28(fp)
 8010ca0:	e0fff717 	ldw	r3,-36(fp)
 8010ca4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010ca8:	e0bff917 	ldw	r2,-28(fp)
 8010cac:	e0fff617 	ldw	r3,-40(fp)
 8010cb0:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 8010cb4:	0005303a 	rdctl	r2,status
 8010cb8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010cbc:	e0fffd17 	ldw	r3,-12(fp)
 8010cc0:	00bfff84 	movi	r2,-2
 8010cc4:	1884703a 	and	r2,r3,r2
 8010cc8:	1001703a 	wrctl	status,r2
  return context;
 8010ccc:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 8010cd0:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010cd4:	d0a70f17 	ldw	r2,-25540(gp)
      
      current_nticks = alt_nticks();
 8010cd8:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010cdc:	e0fff817 	ldw	r3,-32(fp)
 8010ce0:	e0bfff17 	ldw	r2,-4(fp)
 8010ce4:	1885883a 	add	r2,r3,r2
 8010ce8:	10c00044 	addi	r3,r2,1
 8010cec:	e0bff917 	ldw	r2,-28(fp)
 8010cf0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010cf4:	e0bff917 	ldw	r2,-28(fp)
 8010cf8:	10c00217 	ldw	r3,8(r2)
 8010cfc:	e0bfff17 	ldw	r2,-4(fp)
 8010d00:	1880042e 	bgeu	r3,r2,8010d14 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8010d04:	e0bff917 	ldw	r2,-28(fp)
 8010d08:	00c00044 	movi	r3,1
 8010d0c:	10c00405 	stb	r3,16(r2)
 8010d10:	00000206 	br	8010d1c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8010d14:	e0bff917 	ldw	r2,-28(fp)
 8010d18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010d1c:	e0bff917 	ldw	r2,-28(fp)
 8010d20:	d0e00c04 	addi	r3,gp,-32720
 8010d24:	e0fffb15 	stw	r3,-20(fp)
 8010d28:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010d2c:	e0bffa17 	ldw	r2,-24(fp)
 8010d30:	e0fffb17 	ldw	r3,-20(fp)
 8010d34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010d38:	e0bffb17 	ldw	r2,-20(fp)
 8010d3c:	10c00017 	ldw	r3,0(r2)
 8010d40:	e0bffa17 	ldw	r2,-24(fp)
 8010d44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010d48:	e0bffb17 	ldw	r2,-20(fp)
 8010d4c:	10800017 	ldw	r2,0(r2)
 8010d50:	e0fffa17 	ldw	r3,-24(fp)
 8010d54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010d58:	e0bffb17 	ldw	r2,-20(fp)
 8010d5c:	e0fffa17 	ldw	r3,-24(fp)
 8010d60:	10c00015 	stw	r3,0(r2)
}
 8010d64:	0001883a 	nop
 8010d68:	e0bffe17 	ldw	r2,-8(fp)
 8010d6c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8010d70:	e0bffc17 	ldw	r2,-16(fp)
 8010d74:	1001703a 	wrctl	status,r2
}
 8010d78:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 8010d7c:	0005883a 	mov	r2,zero
 8010d80:	00000306 	br	8010d90 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 8010d84:	00bffa84 	movi	r2,-22
 8010d88:	00000106 	br	8010d90 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 8010d8c:	00bfde84 	movi	r2,-134
  }
}
 8010d90:	e037883a 	mov	sp,fp
 8010d94:	df000017 	ldw	fp,0(sp)
 8010d98:	dec00104 	addi	sp,sp,4
 8010d9c:	f800283a 	ret

08010da0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010da0:	defffa04 	addi	sp,sp,-24
 8010da4:	dfc00515 	stw	ra,20(sp)
 8010da8:	df000415 	stw	fp,16(sp)
 8010dac:	df000404 	addi	fp,sp,16
 8010db0:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010db4:	00800244 	movi	r2,9
 8010db8:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8010dbc:	014003f4 	movhi	r5,15
 8010dc0:	29509004 	addi	r5,r5,16960
 8010dc4:	e13ffe17 	ldw	r4,-8(fp)
 8010dc8:	800ce440 	call	800ce44 <__mulsi3>
 8010dcc:	100b883a 	mov	r5,r2
 8010dd0:	0100bef4 	movhi	r4,763
 8010dd4:	213c2004 	addi	r4,r4,-3968
 8010dd8:	800cd840 	call	800cd84 <__udivsi3>
  big_loops = us / (INT_MAX/
 8010ddc:	100b883a 	mov	r5,r2
 8010de0:	01200034 	movhi	r4,32768
 8010de4:	213fffc4 	addi	r4,r4,-1
 8010de8:	800cd840 	call	800cd84 <__udivsi3>
 8010dec:	100b883a 	mov	r5,r2
 8010df0:	e13ffc17 	ldw	r4,-16(fp)
 8010df4:	800cd840 	call	800cd84 <__udivsi3>
 8010df8:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 8010dfc:	e0bffd17 	ldw	r2,-12(fp)
 8010e00:	10002a26 	beq	r2,zero,8010eac <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010e04:	e03fff15 	stw	zero,-4(fp)
 8010e08:	00001706 	br	8010e68 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8010e0c:	00a00034 	movhi	r2,32768
 8010e10:	10bfffc4 	addi	r2,r2,-1
 8010e14:	10bfffc4 	addi	r2,r2,-1
 8010e18:	103ffe1e 	bne	r2,zero,8010e14 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010e1c:	014003f4 	movhi	r5,15
 8010e20:	29509004 	addi	r5,r5,16960
 8010e24:	e13ffe17 	ldw	r4,-8(fp)
 8010e28:	800ce440 	call	800ce44 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010e2c:	100b883a 	mov	r5,r2
 8010e30:	0100bef4 	movhi	r4,763
 8010e34:	213c2004 	addi	r4,r4,-3968
 8010e38:	800cd840 	call	800cd84 <__udivsi3>
 8010e3c:	100b883a 	mov	r5,r2
 8010e40:	01200034 	movhi	r4,32768
 8010e44:	213fffc4 	addi	r4,r4,-1
 8010e48:	800cd840 	call	800cd84 <__udivsi3>
 8010e4c:	1007883a 	mov	r3,r2
 8010e50:	e0bffc17 	ldw	r2,-16(fp)
 8010e54:	10c5c83a 	sub	r2,r2,r3
 8010e58:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 8010e5c:	e0bfff17 	ldw	r2,-4(fp)
 8010e60:	10800044 	addi	r2,r2,1
 8010e64:	e0bfff15 	stw	r2,-4(fp)
 8010e68:	e0ffff17 	ldw	r3,-4(fp)
 8010e6c:	e0bffd17 	ldw	r2,-12(fp)
 8010e70:	18bfe616 	blt	r3,r2,8010e0c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010e74:	014003f4 	movhi	r5,15
 8010e78:	29509004 	addi	r5,r5,16960
 8010e7c:	e13ffe17 	ldw	r4,-8(fp)
 8010e80:	800ce440 	call	800ce44 <__mulsi3>
 8010e84:	100b883a 	mov	r5,r2
 8010e88:	0100bef4 	movhi	r4,763
 8010e8c:	213c2004 	addi	r4,r4,-3968
 8010e90:	800cd840 	call	800cd84 <__udivsi3>
 8010e94:	e17ffc17 	ldw	r5,-16(fp)
 8010e98:	1009883a 	mov	r4,r2
 8010e9c:	800ce440 	call	800ce44 <__mulsi3>
    __asm__ volatile (
 8010ea0:	10bfffc4 	addi	r2,r2,-1
 8010ea4:	103ffe1e 	bne	r2,zero,8010ea0 <alt_busy_sleep+0x100>
 8010ea8:	00000d06 	br	8010ee0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010eac:	014003f4 	movhi	r5,15
 8010eb0:	29509004 	addi	r5,r5,16960
 8010eb4:	e13ffe17 	ldw	r4,-8(fp)
 8010eb8:	800ce440 	call	800ce44 <__mulsi3>
 8010ebc:	100b883a 	mov	r5,r2
 8010ec0:	0100bef4 	movhi	r4,763
 8010ec4:	213c2004 	addi	r4,r4,-3968
 8010ec8:	800cd840 	call	800cd84 <__udivsi3>
 8010ecc:	e17ffc17 	ldw	r5,-16(fp)
 8010ed0:	1009883a 	mov	r4,r2
 8010ed4:	800ce440 	call	800ce44 <__mulsi3>
    __asm__ volatile (
 8010ed8:	10bfffc4 	addi	r2,r2,-1
 8010edc:	00bffe16 	blt	zero,r2,8010ed8 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010ee0:	0005883a 	mov	r2,zero
}
 8010ee4:	e037883a 	mov	sp,fp
 8010ee8:	dfc00117 	ldw	ra,4(sp)
 8010eec:	df000017 	ldw	fp,0(sp)
 8010ef0:	dec00204 	addi	sp,sp,8
 8010ef4:	f800283a 	ret

08010ef8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010ef8:	deffff04 	addi	sp,sp,-4
 8010efc:	df000015 	stw	fp,0(sp)
 8010f00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010f04:	0001883a 	nop
 8010f08:	e037883a 	mov	sp,fp
 8010f0c:	df000017 	ldw	fp,0(sp)
 8010f10:	dec00104 	addi	sp,sp,4
 8010f14:	f800283a 	ret

08010f18 <alt_get_errno>:
{
 8010f18:	defffe04 	addi	sp,sp,-8
 8010f1c:	dfc00115 	stw	ra,4(sp)
 8010f20:	df000015 	stw	fp,0(sp)
 8010f24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010f28:	d0a00917 	ldw	r2,-32732(gp)
 8010f2c:	10000326 	beq	r2,zero,8010f3c <alt_get_errno+0x24>
 8010f30:	d0a00917 	ldw	r2,-32732(gp)
 8010f34:	103ee83a 	callr	r2
 8010f38:	00000106 	br	8010f40 <alt_get_errno+0x28>
 8010f3c:	d0a70804 	addi	r2,gp,-25568
}
 8010f40:	e037883a 	mov	sp,fp
 8010f44:	dfc00117 	ldw	ra,4(sp)
 8010f48:	df000017 	ldw	fp,0(sp)
 8010f4c:	dec00204 	addi	sp,sp,8
 8010f50:	f800283a 	ret

08010f54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010f54:	defffa04 	addi	sp,sp,-24
 8010f58:	dfc00515 	stw	ra,20(sp)
 8010f5c:	df000415 	stw	fp,16(sp)
 8010f60:	df000404 	addi	fp,sp,16
 8010f64:	e13ffd15 	stw	r4,-12(fp)
 8010f68:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010f6c:	e0bffd17 	ldw	r2,-12(fp)
 8010f70:	10000326 	beq	r2,zero,8010f80 <alt_dev_llist_insert+0x2c>
 8010f74:	e0bffd17 	ldw	r2,-12(fp)
 8010f78:	10800217 	ldw	r2,8(r2)
 8010f7c:	1000061e 	bne	r2,zero,8010f98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010f80:	8010f180 	call	8010f18 <alt_get_errno>
 8010f84:	1007883a 	mov	r3,r2
 8010f88:	00800584 	movi	r2,22
 8010f8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010f90:	00bffa84 	movi	r2,-22
 8010f94:	00001406 	br	8010fe8 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010f98:	e0bffd17 	ldw	r2,-12(fp)
 8010f9c:	e0fffc17 	ldw	r3,-16(fp)
 8010fa0:	e0ffff15 	stw	r3,-4(fp)
 8010fa4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 8010fa8:	e0bffe17 	ldw	r2,-8(fp)
 8010fac:	e0ffff17 	ldw	r3,-4(fp)
 8010fb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010fb4:	e0bfff17 	ldw	r2,-4(fp)
 8010fb8:	10c00017 	ldw	r3,0(r2)
 8010fbc:	e0bffe17 	ldw	r2,-8(fp)
 8010fc0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8010fc4:	e0bfff17 	ldw	r2,-4(fp)
 8010fc8:	10800017 	ldw	r2,0(r2)
 8010fcc:	e0fffe17 	ldw	r3,-8(fp)
 8010fd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010fd4:	e0bfff17 	ldw	r2,-4(fp)
 8010fd8:	e0fffe17 	ldw	r3,-8(fp)
 8010fdc:	10c00015 	stw	r3,0(r2)
}
 8010fe0:	0001883a 	nop

  return 0;  
 8010fe4:	0005883a 	mov	r2,zero
}
 8010fe8:	e037883a 	mov	sp,fp
 8010fec:	dfc00117 	ldw	ra,4(sp)
 8010ff0:	df000017 	ldw	fp,0(sp)
 8010ff4:	dec00204 	addi	sp,sp,8
 8010ff8:	f800283a 	ret

08010ffc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010ffc:	defffd04 	addi	sp,sp,-12
 8011000:	dfc00215 	stw	ra,8(sp)
 8011004:	df000115 	stw	fp,4(sp)
 8011008:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801100c:	00820074 	movhi	r2,2049
 8011010:	10879a04 	addi	r2,r2,7784
 8011014:	e0bfff15 	stw	r2,-4(fp)
 8011018:	00000606 	br	8011034 <_do_ctors+0x38>
        (*ctor) (); 
 801101c:	e0bfff17 	ldw	r2,-4(fp)
 8011020:	10800017 	ldw	r2,0(r2)
 8011024:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011028:	e0bfff17 	ldw	r2,-4(fp)
 801102c:	10bfff04 	addi	r2,r2,-4
 8011030:	e0bfff15 	stw	r2,-4(fp)
 8011034:	e0ffff17 	ldw	r3,-4(fp)
 8011038:	00820074 	movhi	r2,2049
 801103c:	10879b04 	addi	r2,r2,7788
 8011040:	18bff62e 	bgeu	r3,r2,801101c <_do_ctors+0x20>
}
 8011044:	0001883a 	nop
 8011048:	0001883a 	nop
 801104c:	e037883a 	mov	sp,fp
 8011050:	dfc00117 	ldw	ra,4(sp)
 8011054:	df000017 	ldw	fp,0(sp)
 8011058:	dec00204 	addi	sp,sp,8
 801105c:	f800283a 	ret

08011060 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8011060:	defffd04 	addi	sp,sp,-12
 8011064:	dfc00215 	stw	ra,8(sp)
 8011068:	df000115 	stw	fp,4(sp)
 801106c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011070:	00820074 	movhi	r2,2049
 8011074:	10879a04 	addi	r2,r2,7784
 8011078:	e0bfff15 	stw	r2,-4(fp)
 801107c:	00000606 	br	8011098 <_do_dtors+0x38>
        (*dtor) (); 
 8011080:	e0bfff17 	ldw	r2,-4(fp)
 8011084:	10800017 	ldw	r2,0(r2)
 8011088:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801108c:	e0bfff17 	ldw	r2,-4(fp)
 8011090:	10bfff04 	addi	r2,r2,-4
 8011094:	e0bfff15 	stw	r2,-4(fp)
 8011098:	e0ffff17 	ldw	r3,-4(fp)
 801109c:	00820074 	movhi	r2,2049
 80110a0:	10879b04 	addi	r2,r2,7788
 80110a4:	18bff62e 	bgeu	r3,r2,8011080 <_do_dtors+0x20>
}
 80110a8:	0001883a 	nop
 80110ac:	0001883a 	nop
 80110b0:	e037883a 	mov	sp,fp
 80110b4:	dfc00117 	ldw	ra,4(sp)
 80110b8:	df000017 	ldw	fp,0(sp)
 80110bc:	dec00204 	addi	sp,sp,8
 80110c0:	f800283a 	ret

080110c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80110c4:	deffff04 	addi	sp,sp,-4
 80110c8:	df000015 	stw	fp,0(sp)
 80110cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80110d0:	0001883a 	nop
 80110d4:	e037883a 	mov	sp,fp
 80110d8:	df000017 	ldw	fp,0(sp)
 80110dc:	dec00104 	addi	sp,sp,4
 80110e0:	f800283a 	ret

080110e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80110e4:	defff904 	addi	sp,sp,-28
 80110e8:	dfc00615 	stw	ra,24(sp)
 80110ec:	df000515 	stw	fp,20(sp)
 80110f0:	df000504 	addi	fp,sp,20
 80110f4:	e13fff15 	stw	r4,-4(fp)
 80110f8:	e17ffe15 	stw	r5,-8(fp)
 80110fc:	e1bffd15 	stw	r6,-12(fp)
 8011100:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8011104:	e0800217 	ldw	r2,8(fp)
 8011108:	d8800015 	stw	r2,0(sp)
 801110c:	e1fffc17 	ldw	r7,-16(fp)
 8011110:	e1bffd17 	ldw	r6,-12(fp)
 8011114:	e17ffe17 	ldw	r5,-8(fp)
 8011118:	e13fff17 	ldw	r4,-4(fp)
 801111c:	80112940 	call	8011294 <alt_iic_isr_register>
}  
 8011120:	e037883a 	mov	sp,fp
 8011124:	dfc00117 	ldw	ra,4(sp)
 8011128:	df000017 	ldw	fp,0(sp)
 801112c:	dec00204 	addi	sp,sp,8
 8011130:	f800283a 	ret

08011134 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8011134:	defff904 	addi	sp,sp,-28
 8011138:	df000615 	stw	fp,24(sp)
 801113c:	df000604 	addi	fp,sp,24
 8011140:	e13ffb15 	stw	r4,-20(fp)
 8011144:	e17ffa15 	stw	r5,-24(fp)
 8011148:	e0bffa17 	ldw	r2,-24(fp)
 801114c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8011150:	0005303a 	rdctl	r2,status
 8011154:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011158:	e0fffe17 	ldw	r3,-8(fp)
 801115c:	00bfff84 	movi	r2,-2
 8011160:	1884703a 	and	r2,r3,r2
 8011164:	1001703a 	wrctl	status,r2
  return context;
 8011168:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801116c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8011170:	00c00044 	movi	r3,1
 8011174:	e0bfff17 	ldw	r2,-4(fp)
 8011178:	1884983a 	sll	r2,r3,r2
 801117c:	1007883a 	mov	r3,r2
 8011180:	d0a70d17 	ldw	r2,-25548(gp)
 8011184:	1884b03a 	or	r2,r3,r2
 8011188:	d0a70d15 	stw	r2,-25548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801118c:	d0a70d17 	ldw	r2,-25548(gp)
 8011190:	100170fa 	wrctl	ienable,r2
 8011194:	e0bffd17 	ldw	r2,-12(fp)
 8011198:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801119c:	e0bffc17 	ldw	r2,-16(fp)
 80111a0:	1001703a 	wrctl	status,r2
}
 80111a4:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 80111a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 80111ac:	e037883a 	mov	sp,fp
 80111b0:	df000017 	ldw	fp,0(sp)
 80111b4:	dec00104 	addi	sp,sp,4
 80111b8:	f800283a 	ret

080111bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80111bc:	defff904 	addi	sp,sp,-28
 80111c0:	df000615 	stw	fp,24(sp)
 80111c4:	df000604 	addi	fp,sp,24
 80111c8:	e13ffb15 	stw	r4,-20(fp)
 80111cc:	e17ffa15 	stw	r5,-24(fp)
 80111d0:	e0bffa17 	ldw	r2,-24(fp)
 80111d4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 80111d8:	0005303a 	rdctl	r2,status
 80111dc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80111e0:	e0fffe17 	ldw	r3,-8(fp)
 80111e4:	00bfff84 	movi	r2,-2
 80111e8:	1884703a 	and	r2,r3,r2
 80111ec:	1001703a 	wrctl	status,r2
  return context;
 80111f0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 80111f4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 80111f8:	00c00044 	movi	r3,1
 80111fc:	e0bfff17 	ldw	r2,-4(fp)
 8011200:	1884983a 	sll	r2,r3,r2
 8011204:	0084303a 	nor	r2,zero,r2
 8011208:	1007883a 	mov	r3,r2
 801120c:	d0a70d17 	ldw	r2,-25548(gp)
 8011210:	1884703a 	and	r2,r3,r2
 8011214:	d0a70d15 	stw	r2,-25548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011218:	d0a70d17 	ldw	r2,-25548(gp)
 801121c:	100170fa 	wrctl	ienable,r2
 8011220:	e0bffd17 	ldw	r2,-12(fp)
 8011224:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011228:	e0bffc17 	ldw	r2,-16(fp)
 801122c:	1001703a 	wrctl	status,r2
}
 8011230:	0001883a 	nop
  return 0;
 8011234:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 8011238:	e037883a 	mov	sp,fp
 801123c:	df000017 	ldw	fp,0(sp)
 8011240:	dec00104 	addi	sp,sp,4
 8011244:	f800283a 	ret

08011248 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8011248:	defffc04 	addi	sp,sp,-16
 801124c:	df000315 	stw	fp,12(sp)
 8011250:	df000304 	addi	fp,sp,12
 8011254:	e13ffe15 	stw	r4,-8(fp)
 8011258:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801125c:	000530fa 	rdctl	r2,ienable
 8011260:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011264:	00c00044 	movi	r3,1
 8011268:	e0bffd17 	ldw	r2,-12(fp)
 801126c:	1884983a 	sll	r2,r3,r2
 8011270:	1007883a 	mov	r3,r2
 8011274:	e0bfff17 	ldw	r2,-4(fp)
 8011278:	1884703a 	and	r2,r3,r2
 801127c:	1004c03a 	cmpne	r2,r2,zero
 8011280:	10803fcc 	andi	r2,r2,255
}
 8011284:	e037883a 	mov	sp,fp
 8011288:	df000017 	ldw	fp,0(sp)
 801128c:	dec00104 	addi	sp,sp,4
 8011290:	f800283a 	ret

08011294 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011294:	defff504 	addi	sp,sp,-44
 8011298:	dfc00a15 	stw	ra,40(sp)
 801129c:	df000915 	stw	fp,36(sp)
 80112a0:	df000904 	addi	fp,sp,36
 80112a4:	e13ffa15 	stw	r4,-24(fp)
 80112a8:	e17ff915 	stw	r5,-28(fp)
 80112ac:	e1bff815 	stw	r6,-32(fp)
 80112b0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 80112b4:	00bffa84 	movi	r2,-22
 80112b8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80112bc:	e0bff917 	ldw	r2,-28(fp)
 80112c0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80112c4:	e0bffe17 	ldw	r2,-8(fp)
 80112c8:	10800808 	cmpgei	r2,r2,32
 80112cc:	1000251e 	bne	r2,zero,8011364 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 80112d0:	0005303a 	rdctl	r2,status
 80112d4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80112d8:	e0fffc17 	ldw	r3,-16(fp)
 80112dc:	00bfff84 	movi	r2,-2
 80112e0:	1884703a 	and	r2,r3,r2
 80112e4:	1001703a 	wrctl	status,r2
  return context;
 80112e8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80112ec:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 80112f0:	e0bffe17 	ldw	r2,-8(fp)
 80112f4:	100890fa 	slli	r4,r2,3
 80112f8:	e0fff817 	ldw	r3,-32(fp)
 80112fc:	00820074 	movhi	r2,2049
 8011300:	2085883a 	add	r2,r4,r2
 8011304:	10d90c15 	stw	r3,25648(r2)
    alt_irq[id].context = isr_context;
 8011308:	e0bffe17 	ldw	r2,-8(fp)
 801130c:	100890fa 	slli	r4,r2,3
 8011310:	e0fff717 	ldw	r3,-36(fp)
 8011314:	00820074 	movhi	r2,2049
 8011318:	2085883a 	add	r2,r4,r2
 801131c:	10d90d15 	stw	r3,25652(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8011320:	e0bff817 	ldw	r2,-32(fp)
 8011324:	10000526 	beq	r2,zero,801133c <alt_iic_isr_register+0xa8>
 8011328:	e0bffe17 	ldw	r2,-8(fp)
 801132c:	100b883a 	mov	r5,r2
 8011330:	e13ffa17 	ldw	r4,-24(fp)
 8011334:	80111340 	call	8011134 <alt_ic_irq_enable>
 8011338:	00000406 	br	801134c <alt_iic_isr_register+0xb8>
 801133c:	e0bffe17 	ldw	r2,-8(fp)
 8011340:	100b883a 	mov	r5,r2
 8011344:	e13ffa17 	ldw	r4,-24(fp)
 8011348:	80111bc0 	call	80111bc <alt_ic_irq_disable>
 801134c:	e0bfff15 	stw	r2,-4(fp)
 8011350:	e0bffd17 	ldw	r2,-12(fp)
 8011354:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 8011358:	e0bffb17 	ldw	r2,-20(fp)
 801135c:	1001703a 	wrctl	status,r2
}
 8011360:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 8011364:	e0bfff17 	ldw	r2,-4(fp)
}
 8011368:	e037883a 	mov	sp,fp
 801136c:	dfc00117 	ldw	ra,4(sp)
 8011370:	df000017 	ldw	fp,0(sp)
 8011374:	dec00204 	addi	sp,sp,8
 8011378:	f800283a 	ret

0801137c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801137c:	defff904 	addi	sp,sp,-28
 8011380:	dfc00615 	stw	ra,24(sp)
 8011384:	df000515 	stw	fp,20(sp)
 8011388:	df000504 	addi	fp,sp,20
 801138c:	e13ffe15 	stw	r4,-8(fp)
 8011390:	e17ffd15 	stw	r5,-12(fp)
 8011394:	e1bffc15 	stw	r6,-16(fp)
 8011398:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 801139c:	e1bffb17 	ldw	r6,-20(fp)
 80113a0:	e17ffc17 	ldw	r5,-16(fp)
 80113a4:	e13ffd17 	ldw	r4,-12(fp)
 80113a8:	80115e40 	call	80115e4 <open>
 80113ac:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 80113b0:	e0bfff17 	ldw	r2,-4(fp)
 80113b4:	10002016 	blt	r2,zero,8011438 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 80113b8:	e0ffff17 	ldw	r3,-4(fp)
 80113bc:	1805883a 	mov	r2,r3
 80113c0:	1085883a 	add	r2,r2,r2
 80113c4:	10c5883a 	add	r2,r2,r3
 80113c8:	100490ba 	slli	r2,r2,2
 80113cc:	00c20074 	movhi	r3,2049
 80113d0:	10c7883a 	add	r3,r2,r3
 80113d4:	18cd7917 	ldw	r3,13796(r3)
 80113d8:	e0bffe17 	ldw	r2,-8(fp)
 80113dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80113e0:	e0ffff17 	ldw	r3,-4(fp)
 80113e4:	1805883a 	mov	r2,r3
 80113e8:	1085883a 	add	r2,r2,r2
 80113ec:	10c5883a 	add	r2,r2,r3
 80113f0:	100490ba 	slli	r2,r2,2
 80113f4:	00c20074 	movhi	r3,2049
 80113f8:	10c7883a 	add	r3,r2,r3
 80113fc:	18cd7a17 	ldw	r3,13800(r3)
 8011400:	e0bffe17 	ldw	r2,-8(fp)
 8011404:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8011408:	e0ffff17 	ldw	r3,-4(fp)
 801140c:	1805883a 	mov	r2,r3
 8011410:	1085883a 	add	r2,r2,r2
 8011414:	10c5883a 	add	r2,r2,r3
 8011418:	100490ba 	slli	r2,r2,2
 801141c:	00c20074 	movhi	r3,2049
 8011420:	10c7883a 	add	r3,r2,r3
 8011424:	18cd7b17 	ldw	r3,13804(r3)
 8011428:	e0bffe17 	ldw	r2,-8(fp)
 801142c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8011430:	e13fff17 	ldw	r4,-4(fp)
 8011434:	800fea40 	call	800fea4 <alt_release_fd>
  }
} 
 8011438:	0001883a 	nop
 801143c:	e037883a 	mov	sp,fp
 8011440:	dfc00117 	ldw	ra,4(sp)
 8011444:	df000017 	ldw	fp,0(sp)
 8011448:	dec00204 	addi	sp,sp,8
 801144c:	f800283a 	ret

08011450 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8011450:	defffb04 	addi	sp,sp,-20
 8011454:	dfc00415 	stw	ra,16(sp)
 8011458:	df000315 	stw	fp,12(sp)
 801145c:	df000304 	addi	fp,sp,12
 8011460:	e13fff15 	stw	r4,-4(fp)
 8011464:	e17ffe15 	stw	r5,-8(fp)
 8011468:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801146c:	01c07fc4 	movi	r7,511
 8011470:	01800044 	movi	r6,1
 8011474:	e17fff17 	ldw	r5,-4(fp)
 8011478:	01020074 	movhi	r4,2049
 801147c:	210d7c04 	addi	r4,r4,13808
 8011480:	801137c0 	call	801137c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011484:	01c07fc4 	movi	r7,511
 8011488:	000d883a 	mov	r6,zero
 801148c:	e17ffe17 	ldw	r5,-8(fp)
 8011490:	01020074 	movhi	r4,2049
 8011494:	210d7904 	addi	r4,r4,13796
 8011498:	801137c0 	call	801137c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801149c:	01c07fc4 	movi	r7,511
 80114a0:	01800044 	movi	r6,1
 80114a4:	e17ffd17 	ldw	r5,-12(fp)
 80114a8:	01020074 	movhi	r4,2049
 80114ac:	210d7f04 	addi	r4,r4,13820
 80114b0:	801137c0 	call	801137c <alt_open_fd>
}  
 80114b4:	0001883a 	nop
 80114b8:	e037883a 	mov	sp,fp
 80114bc:	dfc00117 	ldw	ra,4(sp)
 80114c0:	df000017 	ldw	fp,0(sp)
 80114c4:	dec00204 	addi	sp,sp,8
 80114c8:	f800283a 	ret

080114cc <alt_get_errno>:
{
 80114cc:	defffe04 	addi	sp,sp,-8
 80114d0:	dfc00115 	stw	ra,4(sp)
 80114d4:	df000015 	stw	fp,0(sp)
 80114d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80114dc:	d0a00917 	ldw	r2,-32732(gp)
 80114e0:	10000326 	beq	r2,zero,80114f0 <alt_get_errno+0x24>
 80114e4:	d0a00917 	ldw	r2,-32732(gp)
 80114e8:	103ee83a 	callr	r2
 80114ec:	00000106 	br	80114f4 <alt_get_errno+0x28>
 80114f0:	d0a70804 	addi	r2,gp,-25568
}
 80114f4:	e037883a 	mov	sp,fp
 80114f8:	dfc00117 	ldw	ra,4(sp)
 80114fc:	df000017 	ldw	fp,0(sp)
 8011500:	dec00204 	addi	sp,sp,8
 8011504:	f800283a 	ret

08011508 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8011508:	defffd04 	addi	sp,sp,-12
 801150c:	df000215 	stw	fp,8(sp)
 8011510:	df000204 	addi	fp,sp,8
 8011514:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8011518:	e0bffe17 	ldw	r2,-8(fp)
 801151c:	10800217 	ldw	r2,8(r2)
 8011520:	10d00034 	orhi	r3,r2,16384
 8011524:	e0bffe17 	ldw	r2,-8(fp)
 8011528:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801152c:	e03fff15 	stw	zero,-4(fp)
 8011530:	00002306 	br	80115c0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011534:	e0ffff17 	ldw	r3,-4(fp)
 8011538:	1805883a 	mov	r2,r3
 801153c:	1085883a 	add	r2,r2,r2
 8011540:	10c5883a 	add	r2,r2,r3
 8011544:	100490ba 	slli	r2,r2,2
 8011548:	00c20074 	movhi	r3,2049
 801154c:	10c7883a 	add	r3,r2,r3
 8011550:	18cd7917 	ldw	r3,13796(r3)
 8011554:	e0bffe17 	ldw	r2,-8(fp)
 8011558:	10800017 	ldw	r2,0(r2)
 801155c:	1880151e 	bne	r3,r2,80115b4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011560:	e0ffff17 	ldw	r3,-4(fp)
 8011564:	1805883a 	mov	r2,r3
 8011568:	1085883a 	add	r2,r2,r2
 801156c:	10c5883a 	add	r2,r2,r3
 8011570:	100490ba 	slli	r2,r2,2
 8011574:	00c20074 	movhi	r3,2049
 8011578:	10c7883a 	add	r3,r2,r3
 801157c:	188d7b17 	ldw	r2,13804(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011580:	10000c0e 	bge	r2,zero,80115b4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8011584:	e0ffff17 	ldw	r3,-4(fp)
 8011588:	1805883a 	mov	r2,r3
 801158c:	1085883a 	add	r2,r2,r2
 8011590:	10c5883a 	add	r2,r2,r3
 8011594:	100490ba 	slli	r2,r2,2
 8011598:	00c20074 	movhi	r3,2049
 801159c:	18cd7904 	addi	r3,r3,13796
 80115a0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80115a4:	e0fffe17 	ldw	r3,-8(fp)
 80115a8:	18800226 	beq	r3,r2,80115b4 <alt_file_locked+0xac>
    {
      return -EACCES;
 80115ac:	00bffcc4 	movi	r2,-13
 80115b0:	00000806 	br	80115d4 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 80115b4:	e0bfff17 	ldw	r2,-4(fp)
 80115b8:	10800044 	addi	r2,r2,1
 80115bc:	e0bfff15 	stw	r2,-4(fp)
 80115c0:	d0a00817 	ldw	r2,-32736(gp)
 80115c4:	1007883a 	mov	r3,r2
 80115c8:	e0bfff17 	ldw	r2,-4(fp)
 80115cc:	18bfd92e 	bgeu	r3,r2,8011534 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80115d0:	0005883a 	mov	r2,zero
}
 80115d4:	e037883a 	mov	sp,fp
 80115d8:	df000017 	ldw	fp,0(sp)
 80115dc:	dec00104 	addi	sp,sp,4
 80115e0:	f800283a 	ret

080115e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80115e4:	defff604 	addi	sp,sp,-40
 80115e8:	dfc00915 	stw	ra,36(sp)
 80115ec:	df000815 	stw	fp,32(sp)
 80115f0:	df000804 	addi	fp,sp,32
 80115f4:	e13ffa15 	stw	r4,-24(fp)
 80115f8:	e17ff915 	stw	r5,-28(fp)
 80115fc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8011600:	00bfffc4 	movi	r2,-1
 8011604:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8011608:	00bffb44 	movi	r2,-19
 801160c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8011610:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011614:	d1600604 	addi	r5,gp,-32744
 8011618:	e13ffa17 	ldw	r4,-24(fp)
 801161c:	80119140 	call	8011914 <alt_find_dev>
 8011620:	e0bfff15 	stw	r2,-4(fp)
 8011624:	e0bfff17 	ldw	r2,-4(fp)
 8011628:	1000051e 	bne	r2,zero,8011640 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801162c:	e13ffa17 	ldw	r4,-24(fp)
 8011630:	80119a40 	call	80119a4 <alt_find_file>
 8011634:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8011638:	00800044 	movi	r2,1
 801163c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8011640:	e0bfff17 	ldw	r2,-4(fp)
 8011644:	10002c26 	beq	r2,zero,80116f8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8011648:	e13fff17 	ldw	r4,-4(fp)
 801164c:	8011aac0 	call	8011aac <alt_get_fd>
 8011650:	e0bffe15 	stw	r2,-8(fp)
 8011654:	e0bffe17 	ldw	r2,-8(fp)
 8011658:	1000030e 	bge	r2,zero,8011668 <open+0x84>
    {
      status = index;
 801165c:	e0bffe17 	ldw	r2,-8(fp)
 8011660:	e0bffd15 	stw	r2,-12(fp)
 8011664:	00002606 	br	8011700 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8011668:	e0fffe17 	ldw	r3,-8(fp)
 801166c:	1805883a 	mov	r2,r3
 8011670:	1085883a 	add	r2,r2,r2
 8011674:	10c5883a 	add	r2,r2,r3
 8011678:	100490ba 	slli	r2,r2,2
 801167c:	00c20074 	movhi	r3,2049
 8011680:	18cd7904 	addi	r3,r3,13796
 8011684:	10c5883a 	add	r2,r2,r3
 8011688:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801168c:	e0fff917 	ldw	r3,-28(fp)
 8011690:	00900034 	movhi	r2,16384
 8011694:	10bfffc4 	addi	r2,r2,-1
 8011698:	1886703a 	and	r3,r3,r2
 801169c:	e0bffb17 	ldw	r2,-20(fp)
 80116a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80116a4:	e0bffc17 	ldw	r2,-16(fp)
 80116a8:	1000051e 	bne	r2,zero,80116c0 <open+0xdc>
 80116ac:	e13ffb17 	ldw	r4,-20(fp)
 80116b0:	80115080 	call	8011508 <alt_file_locked>
 80116b4:	e0bffd15 	stw	r2,-12(fp)
 80116b8:	e0bffd17 	ldw	r2,-12(fp)
 80116bc:	10001016 	blt	r2,zero,8011700 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80116c0:	e0bfff17 	ldw	r2,-4(fp)
 80116c4:	10800317 	ldw	r2,12(r2)
 80116c8:	10000826 	beq	r2,zero,80116ec <open+0x108>
 80116cc:	e0bfff17 	ldw	r2,-4(fp)
 80116d0:	10800317 	ldw	r2,12(r2)
 80116d4:	e1fff817 	ldw	r7,-32(fp)
 80116d8:	e1bff917 	ldw	r6,-28(fp)
 80116dc:	e17ffa17 	ldw	r5,-24(fp)
 80116e0:	e13ffb17 	ldw	r4,-20(fp)
 80116e4:	103ee83a 	callr	r2
 80116e8:	00000106 	br	80116f0 <open+0x10c>
 80116ec:	0005883a 	mov	r2,zero
 80116f0:	e0bffd15 	stw	r2,-12(fp)
 80116f4:	00000206 	br	8011700 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80116f8:	00bffb44 	movi	r2,-19
 80116fc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8011700:	e0bffd17 	ldw	r2,-12(fp)
 8011704:	1000090e 	bge	r2,zero,801172c <open+0x148>
  {
    alt_release_fd (index);  
 8011708:	e13ffe17 	ldw	r4,-8(fp)
 801170c:	800fea40 	call	800fea4 <alt_release_fd>
    ALT_ERRNO = -status;
 8011710:	80114cc0 	call	80114cc <alt_get_errno>
 8011714:	1007883a 	mov	r3,r2
 8011718:	e0bffd17 	ldw	r2,-12(fp)
 801171c:	0085c83a 	sub	r2,zero,r2
 8011720:	18800015 	stw	r2,0(r3)
    return -1;
 8011724:	00bfffc4 	movi	r2,-1
 8011728:	00000106 	br	8011730 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 801172c:	e0bffe17 	ldw	r2,-8(fp)
}
 8011730:	e037883a 	mov	sp,fp
 8011734:	dfc00117 	ldw	ra,4(sp)
 8011738:	df000017 	ldw	fp,0(sp)
 801173c:	dec00204 	addi	sp,sp,8
 8011740:	f800283a 	ret

08011744 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8011744:	defffa04 	addi	sp,sp,-24
 8011748:	df000515 	stw	fp,20(sp)
 801174c:	df000504 	addi	fp,sp,20
 8011750:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 8011754:	0005303a 	rdctl	r2,status
 8011758:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801175c:	e0fffc17 	ldw	r3,-16(fp)
 8011760:	00bfff84 	movi	r2,-2
 8011764:	1884703a 	and	r2,r3,r2
 8011768:	1001703a 	wrctl	status,r2
  return context;
 801176c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8011770:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 8011774:	e0bffb17 	ldw	r2,-20(fp)
 8011778:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801177c:	e0bffd17 	ldw	r2,-12(fp)
 8011780:	10800017 	ldw	r2,0(r2)
 8011784:	e0fffd17 	ldw	r3,-12(fp)
 8011788:	18c00117 	ldw	r3,4(r3)
 801178c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8011790:	e0bffd17 	ldw	r2,-12(fp)
 8011794:	10800117 	ldw	r2,4(r2)
 8011798:	e0fffd17 	ldw	r3,-12(fp)
 801179c:	18c00017 	ldw	r3,0(r3)
 80117a0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80117a4:	e0bffd17 	ldw	r2,-12(fp)
 80117a8:	e0fffd17 	ldw	r3,-12(fp)
 80117ac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80117b0:	e0bffd17 	ldw	r2,-12(fp)
 80117b4:	e0fffd17 	ldw	r3,-12(fp)
 80117b8:	10c00015 	stw	r3,0(r2)
} 
 80117bc:	0001883a 	nop
 80117c0:	e0bfff17 	ldw	r2,-4(fp)
 80117c4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 80117c8:	e0bffe17 	ldw	r2,-8(fp)
 80117cc:	1001703a 	wrctl	status,r2
}
 80117d0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 80117d4:	0001883a 	nop
 80117d8:	e037883a 	mov	sp,fp
 80117dc:	df000017 	ldw	fp,0(sp)
 80117e0:	dec00104 	addi	sp,sp,4
 80117e4:	f800283a 	ret

080117e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80117e8:	defffb04 	addi	sp,sp,-20
 80117ec:	dfc00415 	stw	ra,16(sp)
 80117f0:	df000315 	stw	fp,12(sp)
 80117f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80117f8:	d0a00c17 	ldw	r2,-32720(gp)
 80117fc:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8011800:	d0a70f17 	ldw	r2,-25540(gp)
 8011804:	10800044 	addi	r2,r2,1
 8011808:	d0a70f15 	stw	r2,-25540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801180c:	00002e06 	br	80118c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8011810:	e0bfff17 	ldw	r2,-4(fp)
 8011814:	10800017 	ldw	r2,0(r2)
 8011818:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801181c:	e0bfff17 	ldw	r2,-4(fp)
 8011820:	10800403 	ldbu	r2,16(r2)
 8011824:	10803fcc 	andi	r2,r2,255
 8011828:	10000426 	beq	r2,zero,801183c <alt_tick+0x54>
 801182c:	d0a70f17 	ldw	r2,-25540(gp)
 8011830:	1000021e 	bne	r2,zero,801183c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8011834:	e0bfff17 	ldw	r2,-4(fp)
 8011838:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801183c:	e0bfff17 	ldw	r2,-4(fp)
 8011840:	10800217 	ldw	r2,8(r2)
 8011844:	d0e70f17 	ldw	r3,-25540(gp)
 8011848:	18801d36 	bltu	r3,r2,80118c0 <alt_tick+0xd8>
 801184c:	e0bfff17 	ldw	r2,-4(fp)
 8011850:	10800403 	ldbu	r2,16(r2)
 8011854:	10803fcc 	andi	r2,r2,255
 8011858:	1000191e 	bne	r2,zero,80118c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801185c:	e0bfff17 	ldw	r2,-4(fp)
 8011860:	10800317 	ldw	r2,12(r2)
 8011864:	e0ffff17 	ldw	r3,-4(fp)
 8011868:	18c00517 	ldw	r3,20(r3)
 801186c:	1809883a 	mov	r4,r3
 8011870:	103ee83a 	callr	r2
 8011874:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8011878:	e0bffd17 	ldw	r2,-12(fp)
 801187c:	1000031e 	bne	r2,zero,801188c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8011880:	e13fff17 	ldw	r4,-4(fp)
 8011884:	80117440 	call	8011744 <alt_alarm_stop>
 8011888:	00000d06 	br	80118c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801188c:	e0bfff17 	ldw	r2,-4(fp)
 8011890:	10c00217 	ldw	r3,8(r2)
 8011894:	e0bffd17 	ldw	r2,-12(fp)
 8011898:	1887883a 	add	r3,r3,r2
 801189c:	e0bfff17 	ldw	r2,-4(fp)
 80118a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80118a4:	e0bfff17 	ldw	r2,-4(fp)
 80118a8:	10c00217 	ldw	r3,8(r2)
 80118ac:	d0a70f17 	ldw	r2,-25540(gp)
 80118b0:	1880032e 	bgeu	r3,r2,80118c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80118b4:	e0bfff17 	ldw	r2,-4(fp)
 80118b8:	00c00044 	movi	r3,1
 80118bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80118c0:	e0bffe17 	ldw	r2,-8(fp)
 80118c4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 80118c8:	e0ffff17 	ldw	r3,-4(fp)
 80118cc:	d0a00c04 	addi	r2,gp,-32720
 80118d0:	18bfcf1e 	bne	r3,r2,8011810 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80118d4:	0001883a 	nop
}
 80118d8:	0001883a 	nop
 80118dc:	e037883a 	mov	sp,fp
 80118e0:	dfc00117 	ldw	ra,4(sp)
 80118e4:	df000017 	ldw	fp,0(sp)
 80118e8:	dec00204 	addi	sp,sp,8
 80118ec:	f800283a 	ret

080118f0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80118f0:	deffff04 	addi	sp,sp,-4
 80118f4:	df000015 	stw	fp,0(sp)
 80118f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80118fc:	000170fa 	wrctl	ienable,zero
}
 8011900:	0001883a 	nop
 8011904:	e037883a 	mov	sp,fp
 8011908:	df000017 	ldw	fp,0(sp)
 801190c:	dec00104 	addi	sp,sp,4
 8011910:	f800283a 	ret

08011914 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8011914:	defffa04 	addi	sp,sp,-24
 8011918:	dfc00515 	stw	ra,20(sp)
 801191c:	df000415 	stw	fp,16(sp)
 8011920:	df000404 	addi	fp,sp,16
 8011924:	e13ffd15 	stw	r4,-12(fp)
 8011928:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801192c:	e0bffc17 	ldw	r2,-16(fp)
 8011930:	10800017 	ldw	r2,0(r2)
 8011934:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011938:	e13ffd17 	ldw	r4,-12(fp)
 801193c:	80024dc0 	call	80024dc <strlen>
 8011940:	10800044 	addi	r2,r2,1
 8011944:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011948:	00000d06 	br	8011980 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801194c:	e0bfff17 	ldw	r2,-4(fp)
 8011950:	10800217 	ldw	r2,8(r2)
 8011954:	e0fffe17 	ldw	r3,-8(fp)
 8011958:	180d883a 	mov	r6,r3
 801195c:	e17ffd17 	ldw	r5,-12(fp)
 8011960:	1009883a 	mov	r4,r2
 8011964:	8011c440 	call	8011c44 <memcmp>
 8011968:	1000021e 	bne	r2,zero,8011974 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801196c:	e0bfff17 	ldw	r2,-4(fp)
 8011970:	00000706 	br	8011990 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8011974:	e0bfff17 	ldw	r2,-4(fp)
 8011978:	10800017 	ldw	r2,0(r2)
 801197c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 8011980:	e0ffff17 	ldw	r3,-4(fp)
 8011984:	e0bffc17 	ldw	r2,-16(fp)
 8011988:	18bff01e 	bne	r3,r2,801194c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 801198c:	0005883a 	mov	r2,zero
}
 8011990:	e037883a 	mov	sp,fp
 8011994:	dfc00117 	ldw	ra,4(sp)
 8011998:	df000017 	ldw	fp,0(sp)
 801199c:	dec00204 	addi	sp,sp,8
 80119a0:	f800283a 	ret

080119a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80119a4:	defffb04 	addi	sp,sp,-20
 80119a8:	dfc00415 	stw	ra,16(sp)
 80119ac:	df000315 	stw	fp,12(sp)
 80119b0:	df000304 	addi	fp,sp,12
 80119b4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80119b8:	d0a00417 	ldw	r2,-32752(gp)
 80119bc:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80119c0:	00003106 	br	8011a88 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80119c4:	e0bfff17 	ldw	r2,-4(fp)
 80119c8:	10800217 	ldw	r2,8(r2)
 80119cc:	1009883a 	mov	r4,r2
 80119d0:	80024dc0 	call	80024dc <strlen>
 80119d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80119d8:	e0bfff17 	ldw	r2,-4(fp)
 80119dc:	10c00217 	ldw	r3,8(r2)
 80119e0:	e0bffe17 	ldw	r2,-8(fp)
 80119e4:	10bfffc4 	addi	r2,r2,-1
 80119e8:	1885883a 	add	r2,r3,r2
 80119ec:	10800003 	ldbu	r2,0(r2)
 80119f0:	10803fcc 	andi	r2,r2,255
 80119f4:	1080201c 	xori	r2,r2,128
 80119f8:	10bfe004 	addi	r2,r2,-128
 80119fc:	10800bd8 	cmpnei	r2,r2,47
 8011a00:	1000031e 	bne	r2,zero,8011a10 <alt_find_file+0x6c>
    {
      len -= 1;
 8011a04:	e0bffe17 	ldw	r2,-8(fp)
 8011a08:	10bfffc4 	addi	r2,r2,-1
 8011a0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011a10:	e0bffe17 	ldw	r2,-8(fp)
 8011a14:	e0fffd17 	ldw	r3,-12(fp)
 8011a18:	1885883a 	add	r2,r3,r2
 8011a1c:	10800003 	ldbu	r2,0(r2)
 8011a20:	10803fcc 	andi	r2,r2,255
 8011a24:	1080201c 	xori	r2,r2,128
 8011a28:	10bfe004 	addi	r2,r2,-128
 8011a2c:	10800be0 	cmpeqi	r2,r2,47
 8011a30:	1000081e 	bne	r2,zero,8011a54 <alt_find_file+0xb0>
 8011a34:	e0bffe17 	ldw	r2,-8(fp)
 8011a38:	e0fffd17 	ldw	r3,-12(fp)
 8011a3c:	1885883a 	add	r2,r3,r2
 8011a40:	10800003 	ldbu	r2,0(r2)
 8011a44:	10803fcc 	andi	r2,r2,255
 8011a48:	1080201c 	xori	r2,r2,128
 8011a4c:	10bfe004 	addi	r2,r2,-128
 8011a50:	10000a1e 	bne	r2,zero,8011a7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8011a54:	e0bfff17 	ldw	r2,-4(fp)
 8011a58:	10800217 	ldw	r2,8(r2)
 8011a5c:	e0fffe17 	ldw	r3,-8(fp)
 8011a60:	180d883a 	mov	r6,r3
 8011a64:	e17ffd17 	ldw	r5,-12(fp)
 8011a68:	1009883a 	mov	r4,r2
 8011a6c:	8011c440 	call	8011c44 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011a70:	1000021e 	bne	r2,zero,8011a7c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8011a74:	e0bfff17 	ldw	r2,-4(fp)
 8011a78:	00000706 	br	8011a98 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8011a7c:	e0bfff17 	ldw	r2,-4(fp)
 8011a80:	10800017 	ldw	r2,0(r2)
 8011a84:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8011a88:	e0ffff17 	ldw	r3,-4(fp)
 8011a8c:	d0a00404 	addi	r2,gp,-32752
 8011a90:	18bfcc1e 	bne	r3,r2,80119c4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8011a94:	0005883a 	mov	r2,zero
}
 8011a98:	e037883a 	mov	sp,fp
 8011a9c:	dfc00117 	ldw	ra,4(sp)
 8011aa0:	df000017 	ldw	fp,0(sp)
 8011aa4:	dec00204 	addi	sp,sp,8
 8011aa8:	f800283a 	ret

08011aac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011aac:	defffc04 	addi	sp,sp,-16
 8011ab0:	df000315 	stw	fp,12(sp)
 8011ab4:	df000304 	addi	fp,sp,12
 8011ab8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011abc:	00bffa04 	movi	r2,-24
 8011ac0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011ac4:	e03fff15 	stw	zero,-4(fp)
 8011ac8:	00001d06 	br	8011b40 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8011acc:	e0ffff17 	ldw	r3,-4(fp)
 8011ad0:	1805883a 	mov	r2,r3
 8011ad4:	1085883a 	add	r2,r2,r2
 8011ad8:	10c5883a 	add	r2,r2,r3
 8011adc:	100490ba 	slli	r2,r2,2
 8011ae0:	00c20074 	movhi	r3,2049
 8011ae4:	10c7883a 	add	r3,r2,r3
 8011ae8:	188d7917 	ldw	r2,13796(r3)
 8011aec:	1000111e 	bne	r2,zero,8011b34 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8011af0:	e0ffff17 	ldw	r3,-4(fp)
 8011af4:	1805883a 	mov	r2,r3
 8011af8:	1085883a 	add	r2,r2,r2
 8011afc:	10c5883a 	add	r2,r2,r3
 8011b00:	100490ba 	slli	r2,r2,2
 8011b04:	e13ffd17 	ldw	r4,-12(fp)
 8011b08:	00c20074 	movhi	r3,2049
 8011b0c:	10c7883a 	add	r3,r2,r3
 8011b10:	190d7915 	stw	r4,13796(r3)
      if (i > alt_max_fd)
 8011b14:	d0e00817 	ldw	r3,-32736(gp)
 8011b18:	e0bfff17 	ldw	r2,-4(fp)
 8011b1c:	1880020e 	bge	r3,r2,8011b28 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8011b20:	e0bfff17 	ldw	r2,-4(fp)
 8011b24:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 8011b28:	e0bfff17 	ldw	r2,-4(fp)
 8011b2c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011b30:	00000706 	br	8011b50 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8011b34:	e0bfff17 	ldw	r2,-4(fp)
 8011b38:	10800044 	addi	r2,r2,1
 8011b3c:	e0bfff15 	stw	r2,-4(fp)
 8011b40:	e0bfff17 	ldw	r2,-4(fp)
 8011b44:	10800810 	cmplti	r2,r2,32
 8011b48:	103fe01e 	bne	r2,zero,8011acc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 8011b4c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011b50:	e0bffe17 	ldw	r2,-8(fp)
}
 8011b54:	e037883a 	mov	sp,fp
 8011b58:	df000017 	ldw	fp,0(sp)
 8011b5c:	dec00104 	addi	sp,sp,4
 8011b60:	f800283a 	ret

08011b64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011b64:	defffe04 	addi	sp,sp,-8
 8011b68:	df000115 	stw	fp,4(sp)
 8011b6c:	df000104 	addi	fp,sp,4
 8011b70:	e13fff15 	stw	r4,-4(fp)
 8011b74:	e0bfff17 	ldw	r2,-4(fp)
 8011b78:	10bffe84 	addi	r2,r2,-6
 8011b7c:	10c00428 	cmpgeui	r3,r2,16
 8011b80:	1800191e 	bne	r3,zero,8011be8 <alt_exception_cause_generated_bad_addr+0x84>
 8011b84:	100690ba 	slli	r3,r2,2
 8011b88:	00820074 	movhi	r2,2049
 8011b8c:	1885883a 	add	r2,r3,r2
 8011b90:	1086e617 	ldw	r2,7064(r2)
 8011b94:	1000683a 	jmp	r2
 8011b98:	08011bd8 	cmpnei	zero,at,1135
 8011b9c:	08011bd8 	cmpnei	zero,at,1135
 8011ba0:	08011be8 	cmpgeui	zero,at,1135
 8011ba4:	08011be8 	cmpgeui	zero,at,1135
 8011ba8:	08011be8 	cmpgeui	zero,at,1135
 8011bac:	08011bd8 	cmpnei	zero,at,1135
 8011bb0:	08011be0 	cmpeqi	zero,at,1135
 8011bb4:	08011be8 	cmpgeui	zero,at,1135
 8011bb8:	08011bd8 	cmpnei	zero,at,1135
 8011bbc:	08011bd8 	cmpnei	zero,at,1135
 8011bc0:	08011be8 	cmpgeui	zero,at,1135
 8011bc4:	08011bd8 	cmpnei	zero,at,1135
 8011bc8:	08011be0 	cmpeqi	zero,at,1135
 8011bcc:	08011be8 	cmpgeui	zero,at,1135
 8011bd0:	08011be8 	cmpgeui	zero,at,1135
 8011bd4:	08011bd8 	cmpnei	zero,at,1135
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8011bd8:	00800044 	movi	r2,1
 8011bdc:	00000306 	br	8011bec <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8011be0:	0005883a 	mov	r2,zero
 8011be4:	00000106 	br	8011bec <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 8011be8:	0005883a 	mov	r2,zero
  }
}
 8011bec:	e037883a 	mov	sp,fp
 8011bf0:	df000017 	ldw	fp,0(sp)
 8011bf4:	dec00104 	addi	sp,sp,4
 8011bf8:	f800283a 	ret

08011bfc <atexit>:
 8011bfc:	200b883a 	mov	r5,r4
 8011c00:	000f883a 	mov	r7,zero
 8011c04:	000d883a 	mov	r6,zero
 8011c08:	0009883a 	mov	r4,zero
 8011c0c:	8011cbc1 	jmpi	8011cbc <__register_exitproc>

08011c10 <exit>:
 8011c10:	defffe04 	addi	sp,sp,-8
 8011c14:	000b883a 	mov	r5,zero
 8011c18:	dc000015 	stw	r16,0(sp)
 8011c1c:	dfc00115 	stw	ra,4(sp)
 8011c20:	2021883a 	mov	r16,r4
 8011c24:	8011d4c0 	call	8011d4c <__call_exitprocs>
 8011c28:	00820074 	movhi	r2,2049
 8011c2c:	1111f117 	ldw	r4,18372(r2)
 8011c30:	20800f17 	ldw	r2,60(r4)
 8011c34:	10000126 	beq	r2,zero,8011c3c <exit+0x2c>
 8011c38:	103ee83a 	callr	r2
 8011c3c:	8009883a 	mov	r4,r16
 8011c40:	800f6f00 	call	800f6f0 <_exit>

08011c44 <memcmp>:
 8011c44:	30800130 	cmpltui	r2,r6,4
 8011c48:	10000b1e 	bne	r2,zero,8011c78 <memcmp+0x34>
 8011c4c:	2144b03a 	or	r2,r4,r5
 8011c50:	108000cc 	andi	r2,r2,3
 8011c54:	1000171e 	bne	r2,zero,8011cb4 <memcmp+0x70>
 8011c58:	20c00017 	ldw	r3,0(r4)
 8011c5c:	28800017 	ldw	r2,0(r5)
 8011c60:	1880141e 	bne	r3,r2,8011cb4 <memcmp+0x70>
 8011c64:	31bfff04 	addi	r6,r6,-4
 8011c68:	30800128 	cmpgeui	r2,r6,4
 8011c6c:	21000104 	addi	r4,r4,4
 8011c70:	29400104 	addi	r5,r5,4
 8011c74:	103ff81e 	bne	r2,zero,8011c58 <memcmp+0x14>
 8011c78:	30bfffc4 	addi	r2,r6,-1
 8011c7c:	30000b26 	beq	r6,zero,8011cac <memcmp+0x68>
 8011c80:	11800044 	addi	r6,r2,1
 8011c84:	218d883a 	add	r6,r4,r6
 8011c88:	00000106 	br	8011c90 <memcmp+0x4c>
 8011c8c:	21800726 	beq	r4,r6,8011cac <memcmp+0x68>
 8011c90:	20800003 	ldbu	r2,0(r4)
 8011c94:	28c00003 	ldbu	r3,0(r5)
 8011c98:	21000044 	addi	r4,r4,1
 8011c9c:	29400044 	addi	r5,r5,1
 8011ca0:	10fffa26 	beq	r2,r3,8011c8c <memcmp+0x48>
 8011ca4:	10c5c83a 	sub	r2,r2,r3
 8011ca8:	f800283a 	ret
 8011cac:	0005883a 	mov	r2,zero
 8011cb0:	f800283a 	ret
 8011cb4:	30bfffc4 	addi	r2,r6,-1
 8011cb8:	003ff106 	br	8011c80 <memcmp+0x3c>

08011cbc <__register_exitproc>:
 8011cbc:	00820074 	movhi	r2,2049
 8011cc0:	10d1f117 	ldw	r3,18372(r2)
 8011cc4:	18805217 	ldw	r2,328(r3)
 8011cc8:	10001726 	beq	r2,zero,8011d28 <__register_exitproc+0x6c>
 8011ccc:	10c00117 	ldw	r3,4(r2)
 8011cd0:	1a000808 	cmpgei	r8,r3,32
 8011cd4:	40001b1e 	bne	r8,zero,8011d44 <__register_exitproc+0x88>
 8011cd8:	20000b26 	beq	r4,zero,8011d08 <__register_exitproc+0x4c>
 8011cdc:	181090ba 	slli	r8,r3,2
 8011ce0:	02400044 	movi	r9,1
 8011ce4:	48d2983a 	sll	r9,r9,r3
 8011ce8:	1211883a 	add	r8,r2,r8
 8011cec:	41802215 	stw	r6,136(r8)
 8011cf0:	11806217 	ldw	r6,392(r2)
 8011cf4:	21000098 	cmpnei	r4,r4,2
 8011cf8:	324cb03a 	or	r6,r6,r9
 8011cfc:	11806215 	stw	r6,392(r2)
 8011d00:	41c04215 	stw	r7,264(r8)
 8011d04:	20000b26 	beq	r4,zero,8011d34 <__register_exitproc+0x78>
 8011d08:	19000084 	addi	r4,r3,2
 8011d0c:	200890ba 	slli	r4,r4,2
 8011d10:	18c00044 	addi	r3,r3,1
 8011d14:	10c00115 	stw	r3,4(r2)
 8011d18:	1105883a 	add	r2,r2,r4
 8011d1c:	11400015 	stw	r5,0(r2)
 8011d20:	0005883a 	mov	r2,zero
 8011d24:	f800283a 	ret
 8011d28:	18805304 	addi	r2,r3,332
 8011d2c:	18805215 	stw	r2,328(r3)
 8011d30:	003fe606 	br	8011ccc <__register_exitproc+0x10>
 8011d34:	11006317 	ldw	r4,396(r2)
 8011d38:	2252b03a 	or	r9,r4,r9
 8011d3c:	12406315 	stw	r9,396(r2)
 8011d40:	003ff106 	br	8011d08 <__register_exitproc+0x4c>
 8011d44:	00bfffc4 	movi	r2,-1
 8011d48:	f800283a 	ret

08011d4c <__call_exitprocs>:
 8011d4c:	defff704 	addi	sp,sp,-36
 8011d50:	00820074 	movhi	r2,2049
 8011d54:	dcc00315 	stw	r19,12(sp)
 8011d58:	14d1f117 	ldw	r19,18372(r2)
 8011d5c:	dc800215 	stw	r18,8(sp)
 8011d60:	dfc00815 	stw	ra,32(sp)
 8011d64:	9c805217 	ldw	r18,328(r19)
 8011d68:	ddc00715 	stw	r23,28(sp)
 8011d6c:	dd800615 	stw	r22,24(sp)
 8011d70:	dd400515 	stw	r21,20(sp)
 8011d74:	dd000415 	stw	r20,16(sp)
 8011d78:	dc400115 	stw	r17,4(sp)
 8011d7c:	dc000015 	stw	r16,0(sp)
 8011d80:	90001026 	beq	r18,zero,8011dc4 <__call_exitprocs+0x78>
 8011d84:	202b883a 	mov	r21,r4
 8011d88:	282d883a 	mov	r22,r5
 8011d8c:	05000044 	movi	r20,1
 8011d90:	94000117 	ldw	r16,4(r18)
 8011d94:	847fffc4 	addi	r17,r16,-1
 8011d98:	88000a16 	blt	r17,zero,8011dc4 <__call_exitprocs+0x78>
 8011d9c:	84000044 	addi	r16,r16,1
 8011da0:	802090ba 	slli	r16,r16,2
 8011da4:	9421883a 	add	r16,r18,r16
 8011da8:	b0001126 	beq	r22,zero,8011df0 <__call_exitprocs+0xa4>
 8011dac:	80804017 	ldw	r2,256(r16)
 8011db0:	15800f26 	beq	r2,r22,8011df0 <__call_exitprocs+0xa4>
 8011db4:	8c7fffc4 	addi	r17,r17,-1
 8011db8:	88bfffd8 	cmpnei	r2,r17,-1
 8011dbc:	843fff04 	addi	r16,r16,-4
 8011dc0:	103ff91e 	bne	r2,zero,8011da8 <__call_exitprocs+0x5c>
 8011dc4:	dfc00817 	ldw	ra,32(sp)
 8011dc8:	ddc00717 	ldw	r23,28(sp)
 8011dcc:	dd800617 	ldw	r22,24(sp)
 8011dd0:	dd400517 	ldw	r21,20(sp)
 8011dd4:	dd000417 	ldw	r20,16(sp)
 8011dd8:	dcc00317 	ldw	r19,12(sp)
 8011ddc:	dc800217 	ldw	r18,8(sp)
 8011de0:	dc400117 	ldw	r17,4(sp)
 8011de4:	dc000017 	ldw	r16,0(sp)
 8011de8:	dec00904 	addi	sp,sp,36
 8011dec:	f800283a 	ret
 8011df0:	90800117 	ldw	r2,4(r18)
 8011df4:	81800017 	ldw	r6,0(r16)
 8011df8:	10bfffc4 	addi	r2,r2,-1
 8011dfc:	14401726 	beq	r2,r17,8011e5c <__call_exitprocs+0x110>
 8011e00:	80000015 	stw	zero,0(r16)
 8011e04:	303feb26 	beq	r6,zero,8011db4 <__call_exitprocs+0x68>
 8011e08:	a446983a 	sll	r3,r20,r17
 8011e0c:	90806217 	ldw	r2,392(r18)
 8011e10:	95c00117 	ldw	r23,4(r18)
 8011e14:	1884703a 	and	r2,r3,r2
 8011e18:	1000081e 	bne	r2,zero,8011e3c <__call_exitprocs+0xf0>
 8011e1c:	303ee83a 	callr	r6
 8011e20:	90c00117 	ldw	r3,4(r18)
 8011e24:	98805217 	ldw	r2,328(r19)
 8011e28:	1dc0011e 	bne	r3,r23,8011e30 <__call_exitprocs+0xe4>
 8011e2c:	90bfe126 	beq	r18,r2,8011db4 <__call_exitprocs+0x68>
 8011e30:	103fe426 	beq	r2,zero,8011dc4 <__call_exitprocs+0x78>
 8011e34:	1025883a 	mov	r18,r2
 8011e38:	003fd506 	br	8011d90 <__call_exitprocs+0x44>
 8011e3c:	90806317 	ldw	r2,396(r18)
 8011e40:	81002017 	ldw	r4,128(r16)
 8011e44:	1886703a 	and	r3,r3,r2
 8011e48:	1800061e 	bne	r3,zero,8011e64 <__call_exitprocs+0x118>
 8011e4c:	200b883a 	mov	r5,r4
 8011e50:	a809883a 	mov	r4,r21
 8011e54:	303ee83a 	callr	r6
 8011e58:	003ff106 	br	8011e20 <__call_exitprocs+0xd4>
 8011e5c:	94400115 	stw	r17,4(r18)
 8011e60:	003fe806 	br	8011e04 <__call_exitprocs+0xb8>
 8011e64:	303ee83a 	callr	r6
 8011e68:	003fed06 	br	8011e20 <__call_exitprocs+0xd4>
